{"version":3,"file":"backoffice.js","mappings":"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","sources":["webpack://@flamarkt/taxonomies/webpack/bootstrap","webpack://@flamarkt/taxonomies/webpack/runtime/compat get default export","webpack://@flamarkt/taxonomies/webpack/runtime/define property getters","webpack://@flamarkt/taxonomies/webpack/runtime/hasOwnProperty shorthand","webpack://@flamarkt/taxonomies/webpack/runtime/make namespace object","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['app']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['components/BackofficeNav']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-core']||{})['backoffice']||{})['pages/ProductShowPage']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/extend']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/LinkButton']\"","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Page']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Button']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/Sortable']\"","webpack://@flamarkt/taxonomies/./src/common/utils/sortTaxonomies.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/Component']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/extractText']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/string']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/withAttr']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@flamarkt/taxonomies/./src/backoffice/components/AbstractEditModal.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/EditTermModal.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/classList']\"","webpack://@flamarkt/taxonomies/./src/common/helpers/taxonomyIcon.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/TaxonomyTermsList.ts","webpack://@flamarkt/taxonomies/./src/common/utils/sortTerms.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Select']\"","webpack://@flamarkt/taxonomies/./src/backoffice/components/EditTaxonomyModal.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/TaxonomiesPage.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/app']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/Forum']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/User']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/Model']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-core']||{})['common']||{})['models/Product']\"","webpack://@flamarkt/taxonomies/./src/common/models/Taxonomy.ts","webpack://@flamarkt/taxonomies/./src/common/models/Term.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/helpers/highlight']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['utils/KeyboardNavigatable']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/extract']\"","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@flamarkt/taxonomies/./src/common/utils/termToIdentifier.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsDropdown.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsModal.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/termLabel.ts","webpack://@flamarkt/taxonomies/./src/backoffice/index.ts","webpack://@flamarkt/taxonomies/./src/common/addModels.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['app'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['components/BackofficeNav'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-core']||{})['backoffice']||{})['pages/ProductShowPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LinkButton'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Page'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/Sortable'];","import Taxonomy from '../models/Taxonomy';\n\nexport default function (taxonomies: Taxonomy[] | false): Taxonomy[] {\n    // Special case for when retrieving an empty relationship from the store\n    if (taxonomies === false) {\n        taxonomies = [];\n    }\n\n    return taxonomies.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extractText'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/string'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/withAttr'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Modal'];","import {Children} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport Modal, {IInternalModalAttrs} from 'flarum/common/components/Modal';\nimport Button from 'flarum/common/components/Button';\n\nexport interface AbstractEditModalAttrs extends IInternalModalAttrs {\n    // nothing special, but it's easier to import a parent class from here from the sub classes\n}\n\nexport default abstract class AbstractEditModal<ModalAttrs extends AbstractEditModalAttrs = AbstractEditModalAttrs> extends Modal<ModalAttrs> {\n    dirty: boolean = false;\n\n    className() {\n        return 'Modal--small TaxonomyEditModal';\n    }\n\n    abstract translationPrefix(): string\n\n    abstract isNew(): boolean\n\n    title() {\n        return app.translator.trans(this.translationPrefix() + 'title.' + (this.isNew() ? 'new' : 'edit'));\n    }\n\n    abstract form(): Children;\n\n    content() {\n        return m('.Modal-body', [\n            this.form(),\n            m('.FormGroup', [\n                Button.component({\n                    type: 'submit',\n                    className: 'Button Button--primary',\n                    loading: this.loading,\n                    disabled: !this.dirty,\n                }, app.translator.trans(this.translationPrefix() + 'submit.' + (this.isNew() ? 'new' : 'edit'))),\n                ' ',\n                this.isNew() ? null : Button.component({\n                    className: 'Button Button--link TaxonomyEditModal-delete',\n                    loading: this.loading,\n                    onclick: this.ondelete.bind(this),\n                }, app.translator.trans(this.translationPrefix() + 'delete')),\n            ]),\n        ]);\n    }\n\n    abstract ondelete(): void;\n}\n","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport extractText from 'flarum/common/utils/extractText';\nimport {slug} from 'flarum/common/utils/string';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport AbstractEditModal, {AbstractEditModalAttrs} from './AbstractEditModal';\nimport Term from '../../common/models/Term';\nimport Taxonomy from '../../common/models/Taxonomy';\n\ninterface EditTermModalAttrs extends AbstractEditModalAttrs {\n    term: Term\n    taxonomy: Taxonomy\n    onsave?: (term: Term) => void\n    ondelete?: () => void\n}\n\nexport default class EditTermModal extends AbstractEditModal<EditTermModalAttrs> {\n    name!: string\n    slug!: string\n    description!: string\n    color!: string\n    icon!: string\n\n    oninit(vnode: Vnode<EditTermModalAttrs, this>) {\n        super.oninit(vnode);\n\n        const {term} = this.attrs;\n\n        this.name = term ? term.name() : '';\n        this.slug = term ? term.slug() : '';\n        this.description = term ? term.description() : '';\n        this.color = term ? term.color() : '';\n        this.icon = term ? term.icon() : '';\n    }\n\n    translationPrefix() {\n        return 'flamarkt-taxonomies.admin.edit-term.';\n    }\n\n    isNew() {\n        return !this.attrs.term;\n    }\n\n    form() {\n        return [\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.name')),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.name,\n                    oninput: withAttr('value', (value: string) => {\n                        this.name = value;\n                        this.slug = slug(value);\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.slug')),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.slug,\n                    oninput: withAttr('value', (value: string) => {\n                        this.slug = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.description')),\n                m('textarea.FormControl', {\n                    value: this.description,\n                    oninput: withAttr('value', (value: string) => {\n                        this.description = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.color')),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.color,\n                    oninput: withAttr('value', (value: string) => {\n                        this.color = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.icon')),\n                m('.helpText', app.translator.trans(this.translationPrefix() + 'field.iconDescription', {\n                    a: m('a', {\n                        href: 'https://fontawesome.com/icons?m=free',\n                        tabindex: -1,\n                    }),\n                })),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.icon,\n                    oninput: withAttr('value', (value: string) => {\n                        this.icon = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n        ];\n    }\n\n    ondelete() {\n        if (!confirm(extractText(app.translator.trans(this.translationPrefix() + 'deleteConfirmation', {\n            name: this.attrs.term.name(),\n        })))) {\n            return;\n        }\n\n        this.loading = true;\n\n        this.attrs.term.delete({\n            errorHandler: this.onerror.bind(this),\n        }).then(() => {\n            app.modal.close();\n\n            if (this.attrs.ondelete) {\n                this.attrs.ondelete();\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n\n    // @ts-ignore wrong Modal.obsubmit typings in Flarum\n    onsubmit(event: Event) {\n        event.preventDefault();\n\n        this.loading = true;\n\n        const record: Term = this.attrs.term || app.store.createRecord('flamarkt-taxonomy-terms');\n\n        const options: any = {\n            errorHandler: this.onerror.bind(this),\n        };\n\n        if (this.isNew()) {\n            options.url = app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiTermsEndpoint();\n        }\n\n        record.save({\n            name: this.name,\n            slug: this.slug,\n            description: this.description,\n            color: this.color,\n            icon: this.icon,\n        }, options).then(record => {\n            app.modal.close();\n\n            if (this.attrs.onsave) {\n                this.attrs.onsave(record);\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/classList'];","import {Attributes} from 'mithril';\nimport classList from 'flarum/common/utils/classList';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\ninterface Settings {\n    useColor?: boolean\n}\n\nexport default function taxonomyIcon(term: Taxonomy | Term, attrs: Attributes = {}, settings: Settings = {}) {\n    const hasIcon = term && term.icon();\n    const {useColor = true} = settings;\n\n    attrs.className = classList([\n        attrs.className,\n        'icon',\n        hasIcon ? term.icon() : 'TaxonomyIcon',\n    ]);\n\n    if (term) {\n        attrs.style = attrs.style || {};\n\n        if (hasIcon) {\n            attrs.style.color = useColor ? term.color() : '';\n        } else {\n            attrs.style.backgroundColor = term.color();\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return hasIcon ? m('i', attrs) : m('span', attrs);\n}\n","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport Component, {ComponentAttrs} from 'flarum/common/Component';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Sortable from 'flamarkt/backoffice/common/components/Sortable';\nimport sortTerms from '../../common/utils/sortTerms';\nimport EditTermModal from './EditTermModal';\nimport taxonomyIcon from '../../common/helpers/taxonomyIcon';\nimport Term from '../../common/models/Term';\nimport Taxonomy from '../../common/models/Taxonomy';\n\ninterface TaxonomyTermsListAttrs extends ComponentAttrs {\n    taxonomy: Taxonomy\n}\n\nexport default class TaxonomyTermsList extends Component<TaxonomyTermsListAttrs> {\n    terms: Term[] | null = null\n\n    oninit(vnode: Vnode<TaxonomyTermsListAttrs, this>) {\n        super.oninit(vnode);\n\n        app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiTermsEndpoint(),\n        }).then(result => {\n            this.terms = app.store.pushPayload<Term[]>(result);\n            m.redraw();\n        });\n    }\n\n    view() {\n        return m('.TaxonomyTermEdit', [\n            this.terms === null ? LoadingIndicator.component({}) : this.viewTerms(this.terms),\n        ]);\n    }\n\n    viewTerms(terms: Term[]) {\n        return [\n            m(Sortable, {\n                containerTag: 'ol',\n                className: 'TaxonomyTermList',\n                handleClassName: null,\n                onsort: (origin: number, destination: number) => {\n                    terms.splice(destination, 0, ...terms.splice(origin, 1));\n\n                    app.request<ApiPayloadPlural>({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiOrderEndpoint(),\n                        body: {\n                            order: terms.map(term => term.id()),\n                        },\n                    }).then(result => {\n                        // If there's no error, we save the new order so it can be used in case a redraw is triggered\n                        app.store.pushPayload(result);\n                    }).catch(e => {\n                        // If there's an error, we force a full redraw to make sure the user sees what is saved\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, terms.map((term, index) => m('li.TaxonomyTermListItem', {\n                draggable: true,\n                key: term.id(),\n                style: {\n                    color: term.color(),\n                },\n            }, [\n                taxonomyIcon(term),\n                m('span.TaxonomyTermListItem-name', term.name()),\n                Button.component({\n                    className: 'Button Button--link',\n                    icon: 'fas fa-pencil-alt',\n                    onclick: () => {\n                        app.modal.show(EditTermModal, {\n                            term,\n                            ondelete: () => {\n                                terms.splice(index, 1);\n                            },\n                        });\n                    },\n                }),\n            ]))),\n            Button.component({\n                className: 'Button',\n                onclick: () => {\n                    app.modal.show(EditTermModal, {\n                        taxonomy: this.attrs.taxonomy,\n                        onsave: (term: Term) => {\n                            this.terms = sortTerms([...terms, term]);\n                        },\n                    });\n                },\n            }, app.translator.trans('flamarkt-taxonomies.admin.page.create.term')),\n            ' ',\n            Button.component({\n                className: 'Button',\n                onclick: () => {\n                    app.request<ApiPayloadPlural>({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiOrderEndpoint(),\n                        body: {\n                            order: [],\n                        },\n                    }).then(result => {\n                        this.terms = app.store.pushPayload<Term[]>(result);\n                        m.redraw();\n                    }).catch(e => {\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, app.translator.trans('flamarkt-taxonomies.admin.page.reset-term-order')),\n        ];\n    }\n}\n","import Term from '../models/Term';\n\nexport default function (terms: Term[]): Term[] {\n    return terms.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Select'];","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport AbstractEditModal, {AbstractEditModalAttrs} from './AbstractEditModal';\nimport Taxonomy from '../../common/models/Taxonomy';\nimport Select from 'flarum/common/components/Select';\nimport {slug} from 'flarum/common/utils/string';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport extractText from 'flarum/common/utils/extractText';\n\nexport interface EditTaxonomyModalAttrs extends AbstractEditModalAttrs {\n    taxonomy: Taxonomy\n    onsave?: (taxonomy: Taxonomy) => void\n    ondelete?: () => void\n}\n\nexport default class EditTaxonomyModal extends AbstractEditModal<EditTaxonomyModalAttrs> {\n    type!: string\n    name!: string\n    slug!: string\n    description!: string\n    color!: string\n    icon!: string\n    showLabel!: boolean\n    showFilter!: boolean\n    allowCustomValues!: boolean\n    customValueValidation!: string\n    customValueSlugger!: string\n    minTerms!: number | string // Needs string because we leave the field empty for null\n    maxTerms!: number | string\n\n    oninit(vnode: Vnode<EditTaxonomyModalAttrs, this>) {\n        super.oninit(vnode);\n\n        const {taxonomy} = this.attrs;\n\n        this.type = taxonomy ? taxonomy.type() : 'discussions';\n        this.name = taxonomy ? taxonomy.name() : '';\n        this.slug = taxonomy ? taxonomy.slug() : '';\n        this.description = taxonomy ? taxonomy.description() : '';\n        this.color = taxonomy ? taxonomy.color() : '';\n        this.icon = taxonomy ? taxonomy.icon() : '';\n        this.showLabel = taxonomy ? taxonomy.showLabel() : false;\n        this.showFilter = taxonomy ? taxonomy.showFilter() : false;\n        this.allowCustomValues = taxonomy ? taxonomy.allowCustomValues() : false;\n        this.customValueValidation = (taxonomy ? taxonomy.customValueValidation() : null) || '';\n        this.customValueSlugger = (taxonomy ? taxonomy.customValueSlugger() : null) || 'random';\n        this.minTerms = taxonomy ? taxonomy.minTerms() : '';\n        this.maxTerms = taxonomy ? taxonomy.maxTerms() : '';\n    }\n\n    translationPrefix() {\n        return 'flamarkt-taxonomies.admin.edit-taxonomy.';\n    }\n\n    isNew() {\n        return !this.attrs.taxonomy;\n    }\n\n    form() {\n        const options: any = {\n            discussions: app.translator.trans(this.translationPrefix() + 'type-options.discussions'),\n            users: app.translator.trans(this.translationPrefix() + 'type-options.users'),\n        };\n\n        if ('flamarkt-core' in flarum.extensions || this.type === 'products') {\n            options.products = app.translator.trans(this.translationPrefix() + 'type-options.products');\n        }\n\n        return [\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.type')),\n                m('.helpText', app.translator.trans(this.translationPrefix() + 'field.typeDescription')),\n                Select.component({\n                    options,\n                    value: this.type,\n                    onchange: (value: string) => {\n                        this.type = value;\n                        this.dirty = true;\n                    },\n                    disabled: !this.isNew(),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.name')),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.name,\n                    oninput: withAttr('value', (value: string) => {\n                        this.name = value;\n                        this.slug = slug(value);\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.slug')),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.slug,\n                    oninput: withAttr('value', (value: string) => {\n                        this.slug = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.description')),\n                m('textarea.FormControl', {\n                    value: this.description,\n                    oninput: withAttr('value', (value: string) => {\n                        this.description = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.color')),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.color,\n                    oninput: withAttr('value', (value: string) => {\n                        this.color = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.icon')),\n                m('.helpText', app.translator.trans(this.translationPrefix() + 'field.iconDescription', {\n                    a: m('a', {\n                        href: 'https://fontawesome.com/icons?m=free',\n                        tabindex: -1,\n                    }),\n                })),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.icon,\n                    oninput: withAttr('value', (value: string) => {\n                        this.icon = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', [\n                    m('input', {\n                        type: 'checkbox',\n                        checked: this.showLabel,\n                        onchange: () => {\n                            this.showLabel = !this.showLabel;\n                            this.dirty = true;\n                        },\n                    }),\n                    ' ',\n                    app.translator.trans(this.translationPrefix() + 'field.showLabel'),\n                ]),\n            ]),\n            m('.Form-group', [\n                m('label', [\n                    m('input', {\n                        type: 'checkbox',\n                        checked: this.showFilter,\n                        onchange: () => {\n                            this.showFilter = !this.showFilter;\n                            this.dirty = true;\n                        },\n                    }),\n                    ' ',\n                    app.translator.trans(this.translationPrefix() + 'field.showFilter'),\n                ]),\n            ]),\n            m('.Form-group', [\n                m('label', [\n                    m('input', {\n                        type: 'checkbox',\n                        checked: this.allowCustomValues,\n                        onchange: () => {\n                            this.allowCustomValues = !this.allowCustomValues;\n                            this.dirty = true;\n                        },\n                    }),\n                    ' ',\n                    app.translator.trans(this.translationPrefix() + 'field.allowCustomValues'),\n                ]),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.customValueValidation')),\n                Select.component({\n                    options: {\n                        '': app.translator.trans(this.translationPrefix() + 'validation-options.default'),\n                        alpha_num: app.translator.trans(this.translationPrefix() + 'validation-options.alpha_num'),\n                        alpha_dash: app.translator.trans(this.translationPrefix() + 'validation-options.alpha_dash'),\n                        regex: app.translator.trans(this.translationPrefix() + 'validation-options.regex'),\n                    },\n                    value: this.customValueValidation.indexOf('/') === 0 ? 'regex' : this.customValueValidation,\n                    onchange: (value: string) => {\n                        this.customValueValidation = value === 'regex' ? '//' : value;\n                        this.dirty = true;\n                    },\n                    disabled: !this.allowCustomValues,\n                }),\n                this.customValueValidation.indexOf('/') === 0 ? m('.TaxonomyRegexInput', [\n                    m('span', '/'),\n                    m('input.FormControl', {\n                        type: 'text',\n                        value: this.customValueValidation.split('/')[1],\n                        oninput: withAttr('value', (value: string) => {\n                            this.customValueValidation = '/' + value + '/' + this.customValueValidation.split('/')[2];\n                            this.dirty = true;\n                        }),\n                        disabled: !this.allowCustomValues,\n                    }),\n                    m('span', '/'),\n                    m('input.FormControl', {\n                        type: 'text',\n                        value: this.customValueValidation.split('/')[2],\n                        oninput: withAttr('value', (value: string) => {\n                            this.customValueValidation = '/' + this.customValueValidation.split('/')[1] + '/' + value;\n                            this.dirty = true;\n                        }),\n                        disabled: !this.allowCustomValues,\n                    }),\n                ]) : null,\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.customValueSlugger')),\n                m('.helpText', app.translator.trans(this.translationPrefix() + 'field.customValueSluggerDescription')),\n                Select.component({\n                    options: {\n                        random: app.translator.trans(this.translationPrefix() + 'slugger-options.random'),\n                        alpha_dash: app.translator.trans(this.translationPrefix() + 'slugger-options.alpha_dash'),\n                        transliterator: app.translator.trans(this.translationPrefix() + 'slugger-options.transliterator'),\n                    },\n                    value: this.customValueSlugger,\n                    onchange: (value: string) => {\n                        this.customValueSlugger = value;\n                        this.dirty = true;\n                    },\n                    disabled: !this.allowCustomValues,\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.countRequired')),\n                m('.helpText', app.translator.trans(this.translationPrefix() + 'field.countRequiredDescription')),\n                m('.TaxonomyModal-rangeInput', [\n                    m('input.FormControl', {\n                        type: 'number',\n                        min: 0,\n                        step: 1,\n                        value: this.minTerms,\n                        oninput: withAttr('value', (value: string) => {\n                            this.minTerms = parseInt(value) || '';\n                            this.dirty = true;\n                        }),\n                    }),\n                    ' ',\n                    app.translator.trans(this.translationPrefix() + 'field.rangeSeparatorText'),\n                    ' ',\n                    m('input.FormControl', {\n                        type: 'number',\n                        min: 0,\n                        step: 1,\n                        value: this.maxTerms,\n                        oninput: withAttr('value', (value: string) => {\n                            this.maxTerms = parseInt(value) || '';\n                            this.dirty = true;\n                        }),\n                    }),\n                ]),\n            ]),\n        ];\n    }\n\n    ondelete() {\n        if (!confirm(extractText(app.translator.trans(this.translationPrefix() + 'deleteConfirmation', {\n            name: this.attrs.taxonomy.name(),\n        })))) {\n            return;\n        }\n\n        this.loading = true;\n\n        this.attrs.taxonomy.delete({\n            errorHandler: this.onerror.bind(this),\n        }).then(() => {\n            app.modal.close();\n\n            if (this.attrs.ondelete) {\n                this.attrs.ondelete();\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n\n    // @ts-ignore wrong Modal.obsubmit typings in Flarum\n    onsubmit(event: Event) {\n        event.preventDefault();\n\n        this.loading = true;\n\n        const record: Taxonomy = this.attrs.taxonomy || app.store.createRecord('flamarkt-taxonomies');\n\n        record.save({\n            type: this.type,\n            name: this.name,\n            slug: this.slug,\n            description: this.description,\n            color: this.color,\n            icon: this.icon,\n            show_label: this.showLabel,\n            show_filter: this.showFilter,\n            allow_custom_values: this.allowCustomValues,\n            custom_value_validation: this.customValueValidation,\n            custom_value_slugger: this.customValueSlugger,\n            min_terms: this.minTerms,\n            max_terms: this.maxTerms,\n        }, {\n            errorHandler: this.onerror.bind(this),\n        }).then(record => {\n            app.modal.close();\n\n            if (this.attrs.onsave) {\n                this.attrs.onsave(record);\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n}\n","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport {ComponentAttrs} from 'flarum/common/Component';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Page from 'flarum/common/components/Page';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Sortable from 'flamarkt/backoffice/common/components/Sortable';\nimport sortTaxonomies from '../../common/utils/sortTaxonomies';\nimport TaxonomyTermsList from './TaxonomyTermsList';\nimport EditTaxonomyModal from './EditTaxonomyModal';\nimport taxonomyIcon from '../../common/helpers/taxonomyIcon';\nimport Taxonomy from \"../../common/models/Taxonomy\";\n\nexport default class TaxonomiesPage extends Page {\n    tabIndex: number = 0;\n    taxonomies: Taxonomy[] | null = null;\n\n    oninit(vnode: Vnode<ComponentAttrs, this>) {\n        super.oninit(vnode);\n\n        app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + '/flamarkt/taxonomies',\n        }).then(result => {\n            this.taxonomies = app.store.pushPayload<Taxonomy[]>(result);\n            m.redraw();\n        });\n    }\n\n    view() {\n        return m('.TaxonomiesPage', m('.container', [\n            this.taxonomies === null ? LoadingIndicator.component({}) : this.viewTaxonomies(this.taxonomies),\n        ]));\n    }\n\n    viewTaxonomies(taxonomies: Taxonomy[]) {\n        return [\n            m('h2', app.translator.trans('flamarkt-taxonomies.admin.page.title')),\n            m(Sortable, {\n                className: 'TaxonomyTabs',\n                direction: 'horizontal',\n                handleClassName: null,\n                onsort: (origin: number, destination: number) => {\n                    taxonomies.splice(destination, 0, ...taxonomies.splice(origin, 1));\n\n                    app.request<ApiPayloadPlural>({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + '/flamarkt/taxonomies/order',\n                        body: {\n                            order: taxonomies.map(taxonomy => taxonomy.id()),\n                        },\n                    }).then(result => {\n                        this.taxonomies = app.store.pushPayload<Taxonomy[]>(result);\n                        this.tabIndex = 0;\n                    }).catch(e => {\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, [\n                ...taxonomies.map((taxonomy, index) => m('.TaxonomyTab', {\n                    draggable: true,\n                    key: taxonomy.id(),\n                    onclick: () => {\n                        this.tabIndex = index;\n                    },\n                    className: this.tabIndex === index ? 'active' : '',\n                    style: {\n                        color: taxonomy.color(),\n                    },\n                }, [\n                    taxonomyIcon(taxonomy),\n                    ' ',\n                    taxonomy.name(),\n                    ' ',\n                    Button.component({\n                        className: 'Button Button--link',\n                        icon: 'fas fa-pencil-alt',\n                        onclick: () => {\n                            app.modal.show(EditTaxonomyModal, {\n                                taxonomy,\n                                ondelete: () => {\n                                    taxonomies.splice(index, 1);\n                                    this.tabIndex = 0;\n                                },\n                            });\n                        },\n                    }),\n                ])),\n                Button.component({\n                    key: 'new',\n                    className: 'TaxonomyTab',\n                    icon: 'fas fa-plus',\n                    onclick: () => {\n                        app.modal.show(EditTaxonomyModal, {\n                            onsave: (taxonomy: Taxonomy) => {\n                                this.taxonomies = sortTaxonomies([...taxonomies, taxonomy]);\n                                this.tabIndex = this.taxonomies.findIndex(t => t === taxonomy);\n                            },\n                        });\n                    },\n                }, app.translator.trans('flamarkt-taxonomies.admin.page.create.taxonomy')),\n            ]),\n            // Nested DIVs to use key to force a redraw of the list\n            this.tabIndex < taxonomies.length ? m('div', m('div', {\n                key: taxonomies[this.tabIndex].id(),\n            }, TaxonomyTermsList.component({\n                taxonomy: taxonomies[this.tabIndex],\n            }))) : null,\n        ];\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Forum'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/User'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-core']||{})['common']||{})['models/Product'];","import Model from 'flarum/common/Model';\n\nexport default class Taxonomy extends Model {\n    type = Model.attribute<string>('type');\n    name = Model.attribute<string>('name');\n    slug = Model.attribute<string>('slug');\n    description = Model.attribute<string>('description');\n    color = Model.attribute<string>('color');\n    icon = Model.attribute<string>('icon');\n    order = Model.attribute<number>('order');\n    showLabel = Model.attribute<boolean>('showLabel');\n    showFilter = Model.attribute<boolean>('showFilter');\n    allowCustomValues = Model.attribute<boolean>('allowCustomValues');\n    customValueValidation = Model.attribute<string | null>('customValueValidation');\n    customValueSlugger = Model.attribute<string | null>('customValueSlugger');\n    minTerms = Model.attribute<number>('minTerms');\n    maxTerms = Model.attribute<number>('maxTerms');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n    canSearch = Model.attribute<boolean>('canSearch');\n\n    protected apiEndpoint(): string {\n        // @ts-ignore data.id not type-hinted\n        return '/flamarkt/taxonomies' + (this.exists ? '/' + this.data.id : '');\n    }\n\n    apiOrderEndpoint(): string {\n        return this.apiEndpoint() + '/terms/order';\n    }\n\n    apiTermsEndpoint(): string {\n        return this.apiEndpoint() + '/terms';\n    }\n}\n","import Model from 'flarum/common/Model';\nimport Taxonomy from './Taxonomy';\n\nexport default class Term extends Model {\n    name = Model.attribute<string>('name');\n    slug = Model.attribute<string>('slug');\n    description = Model.attribute<string>('description');\n    color = Model.attribute<string>('color');\n    icon = Model.attribute<string>('icon');\n    order = Model.attribute<number>('order');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n\n    taxonomy = Model.hasOne<Taxonomy>('taxonomy');\n\n    protected apiEndpoint(): string {\n        // @ts-ignore data.id not type-hinted\n        return '/flamarkt/taxonomy-terms' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/highlight'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['utils/KeyboardNavigatable'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extract'];","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import Model from 'flarum/common/Model';\nimport Term from '../models/Term';\n\n/**\n * Prepares a model for a relationship payload\n * We need to keep the name value for custom terms\n */\nexport default function (term: Term) {\n    if (term.id()) {\n        return Model.getIdentifier(term);\n    }\n\n    return {\n        ...Model.getIdentifier(term),\n        attributes: {\n            name: term.name(),\n        },\n    }\n}\n","import {Vnode, VnodeDOM} from 'mithril';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport icon from 'flarum/common/helpers/icon';\nimport ChooseTaxonomyTermsModal, {ChooseTaxonomyTermsModalAttrs} from './ChooseTaxonomyTermsModal';\nimport Term from '../models/Term';\n\nexport default class ChooseTaxonomyTermsDropdown extends ChooseTaxonomyTermsModal {\n    lastSaveState: 'success' | 'error' | 'neutral' = 'neutral'\n    dropdownIsFocused: boolean = false\n    onmousedown!: (event: Event) => void\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        this.navigator.when(event => {\n            // Same as the original when() in the modal\n            // (we are replacing the original since we can have a single callback)\n            if (event.key === ' ' && this.searchFilter === '') {\n                event.preventDefault();\n                this.select(event);\n\n                return false;\n            }\n\n            // We don't want Tab to act as select, as this prevent moving from field to field\n            return event.key !== 'Tab';\n        });\n    }\n\n    oncreate(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        // Not calling super because it just tries to do modal stuff\n        //super.oncreate(vnode);\n\n        // Since we are not calling the original Component.oncreate, we need to copy the dom reference manually\n        this.element = vnode.dom;\n\n        this.onmousedown = (event: Event) => {\n            const dropdown = vnode.dom.querySelector('.Dropdown-menu');\n\n            if (\n                dropdown &&\n                dropdown.contains(event.target as HTMLElement)\n            ) {\n                if (!this.dropdownIsFocused) {\n                    this.dropdownIsFocused = true;\n                    m.redraw();\n                }\n            } else {\n                if (this.dropdownIsFocused) {\n                    this.dropdownIsFocused = false;\n                    m.redraw();\n                }\n            }\n        };\n\n        document.addEventListener('mousedown', this.onmousedown);\n    }\n\n    onbeforeremove() {\n        // Do nothing. Prevent parent method from running because it will try to access this.attrs.state which isn't set\n    }\n\n    onremove(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.onremove(vnode);\n\n        document.removeEventListener('mousedown', this.onmousedown);\n    }\n\n    view() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.ChooseTaxonomyTermsDropdown', m('form', {\n            // The form element is only there to prevent any unwanted page POST submission\n            // It's also used so that onready() continues to focus the field when called\n            // Due to the jQuery selector in onready, the form cannot be the root element of view()\n            onsubmit(event: Event) {\n                event.preventDefault();\n            },\n        }, [\n            m('.ChooseTaxonomyTermsInput', [\n                m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n                // .ChooseTaxonomyTermsModal-list must be kept because it's used by the javascript of the keyboard navigation\n                this.listAvailableTerms(this.filteredAvailableTerms()),\n            ]),\n            description ? m('p', description) : null,\n        ]));\n    }\n\n    formItems() {\n        const items = super.formItems();\n\n        items.remove('submit');\n\n        let status = null;\n\n        if (this.saving) {\n            status = LoadingIndicator.component();\n        } else if (this.lastSaveState === 'success') {\n            status = icon('fas fa-check');\n        } else if (this.lastSaveState === 'error') {\n            status = icon('fas fa-times');\n        }\n\n        items.add('status', m('.ChooseTaxonomyTermsStatus', status));\n\n        return items;\n    }\n\n    listAvailableTerms(terms: Term[]) {\n        // We need two attributes to hold the dropdown open\n        // One is the input focus, managed by the modal\n        // The second one is needed because there's a short moment during a click where the focus is lost on the input\n        // mousedown triggers first, then the input blur, and only in mouseup can we put focus on the input again\n        if (!(this.inputIsFocused || this.dropdownIsFocused) || terms.length === 0) {\n            return null;\n        }\n\n        let content;\n\n        if (this.availableTerms === null) {\n            content = LoadingIndicator.component();\n        } else {\n            content = terms.map(this.listAvailableTerm.bind(this));\n        }\n\n        return m('ul.Dropdown-menu.ChooseTaxonomyTermsModal-list', content);\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li', super.listAvailableTerm(term, index));\n    }\n\n    toggleTerm(term: Term) {\n        super.toggleTerm(term);\n\n        // Auto-save\n        this.lastSaveState = 'neutral';\n        this.saveResource();\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case there's nothing to select\n        // We reset the typed value to force the user to enter something else and/or correctly reflect what is saved\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Same as original select(), but without the submission logic (because we auto-save)\n        // This now allows using Enter to remove a highlighted item as well\n        $element[0].dispatchEvent(new Event('click'));\n    }\n\n    onsaved() {\n        this.lastSaveState = 'success';\n        super.onsaved();\n    }\n\n    onerror() {\n        this.lastSaveState = 'error';\n        super.onerror();\n    }\n}\n","import {Children, Vnode} from 'mithril';\nimport app from 'flarum/common/app';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Modal, {IInternalModalAttrs} from 'flarum/common/components/Modal';\nimport Model from 'flarum/common/Model';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport highlight from 'flarum/common/helpers/highlight';\nimport classList from 'flarum/common/utils/classList';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport extractText from 'flarum/common/utils/extractText';\n\nimport KeyboardNavigatable from 'flamarkt/backoffice/common/utils/KeyboardNavigatable';\n\nimport termLabel from '../helpers/termLabel';\nimport taxonomyIcon from '../helpers/taxonomyIcon';\nimport termToIdentifier from '../utils/termToIdentifier';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\n/**\n * Comparing objects directly is unreliable because we will be creating some new records as well\n * So we use this method to do a proper deep check\n */\nfunction isSameTerm(a: Term, b: Term) {\n    if (a.data.type !== b.data.type) {\n        return false;\n    }\n\n    // If both have an ID and it's different\n    if (a.id() && b.id()) {\n        return a.id() === b.id();\n    }\n\n    // If only one has an ID, it's different\n    if (!a.id() !== !b.id()) {\n        return false;\n    }\n\n    // If both don't have an ID, it's a new value and we compare the name\n    return a.name() === b.name();\n}\n\nexport interface ChooseTaxonomyTermsModalAttrs extends IInternalModalAttrs {\n    resource: Model\n    taxonomy: Taxonomy\n    selectedTerms: Term[]\n    onsubmit?: (terms: Term[]) => void\n}\n\n/**\n * Based on Flarum's TagDiscussionModal\n */\nexport default class ChooseTaxonomyTermsModal extends Modal<ChooseTaxonomyTermsModalAttrs> {\n    availableTerms: Term[] | null = null;\n    selectedTerms: Term[] = [];\n    searchFilter: string = '';\n    activeListIndex: number = 0;\n    inputIsFocused: boolean = false;\n    saving: boolean = false;\n    navigator!: KeyboardNavigatable;\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        if (this.attrs.selectedTerms) {\n            this.attrs.selectedTerms.forEach(this.addTerm.bind(this));\n        } else if (this.attrs.resource) {\n            this.attrs.resource.taxonomyTerms().forEach((term: Term) => {\n                if (term.taxonomy().id() === this.attrs.taxonomy.id()) {\n                    this.addTerm(term);\n                }\n            });\n        }\n\n        app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiEndpoint() + '/terms',\n        }).then(result => {\n            this.availableTerms = app.store.pushPayload<Term[]>(result);\n\n            m.redraw();\n        });\n\n        this.navigator = new KeyboardNavigatable();\n        this.navigator\n            .onUp(() => this.setIndex(this.activeListIndex - 1, true))\n            .onDown(() => this.setIndex(this.activeListIndex + 1, true))\n            .onSelect(this.select.bind(this))\n            .onRemove(() => {\n                if (!this.selectedTerms.length) {\n                    return;\n                }\n\n                this.toggleTerm(this.selectedTerms[this.selectedTerms.length - 1]);\n            })\n            .when(event => {\n                // We want to allow selecting with space because it's a common way to select\n                // However this interferes with the ability to enter spaces\n                // So we will have space act as select, but only if nothing is typed yet\n                if (event.key === ' ' && this.searchFilter === '') {\n                    event.preventDefault();\n                    this.select(event);\n\n                    return false;\n                }\n\n                return true;\n            });\n    }\n\n    indexInSelectedTerms(term: Term) {\n        return this.selectedTerms.findIndex(t => isSameTerm(t, term));\n    }\n\n    addTerm(term: Term) {\n        this.selectedTerms.push(term);\n    }\n\n    removeTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.selectedTerms.splice(index, 1);\n        }\n    }\n\n    className() {\n        return 'ChooseTaxonomyTermsModal';\n    }\n\n    title() {\n        return this.attrs.resource\n            ? app.translator.trans('flamarkt-taxonomies.lib.modal.title.edit', {\n                taxonomy: this.attrs.taxonomy.name(),\n                title: m('em', this.attrs.resource.title ? this.attrs.resource.title() : this.attrs.resource.displayName()),\n            })\n            : app.translator.trans('flamarkt-taxonomies.lib.modal.title.new', {\n                taxonomy: this.attrs.taxonomy.name(),\n            });\n    }\n\n    getInstruction() {\n        const count = this.selectedTerms.length;\n\n        if (this.attrs.taxonomy.minTerms() && count < this.attrs.taxonomy.minTerms()) {\n            const remaining = this.attrs.taxonomy.minTerms() - count;\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholder', {\n                count: remaining,\n            });\n        } else if (count === 0) {\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholderOptional');\n        }\n\n        return '';\n    }\n\n    filteredAvailableTerms() {\n        let availableTerms = this.availableTerms === null ? [] : this.availableTerms;\n        const filter = this.searchFilter.toLowerCase();\n\n        if (filter) {\n            availableTerms = availableTerms.filter(term => term.name().substr(0, filter.length).toLowerCase() === filter);\n\n            if (\n                this.attrs.taxonomy.allowCustomValues() &&\n                !availableTerms.some(term => term.name().toLowerCase() === filter)\n            ) {\n                const validation = this.attrs.taxonomy.customValueValidation();\n                let regex: RegExp | null = null;\n\n                if (validation === 'alpha_num') {\n                    regex = /^[a-z0-9]$/i;\n                } else if (validation === 'alpha_dash') {\n                    regex = /^[a-z0-9_-]$/i;\n                } else if (validation.indexOf('/') === 0) {\n                    const parts = validation.split('/');\n                    if (parts.length === 3) {\n                        regex = new RegExp(parts[1], parts[2]);\n                    }\n                }\n\n                if (!regex || regex.test(this.searchFilter)) {\n                    availableTerms.push(app.store.createRecord('flamarkt-taxonomy-terms', {\n                        attributes: {\n                            name: this.searchFilter,\n                        },\n                    }));\n                }\n            }\n        }\n\n        if (this.attrs.taxonomy.maxTerms() && this.selectedTerms.length >= this.attrs.taxonomy.maxTerms()) {\n            availableTerms = [];\n        }\n\n        return availableTerms;\n    }\n\n    content() {\n        return [\n            this.viewForm(),\n            this.listAvailableTerms(this.filteredAvailableTerms()),\n        ];\n    }\n\n    viewForm() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.Modal-body', [\n            description ? m('p', description) : null,\n            m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n        ]);\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('input', m('.ChooseTaxonomyTermsModal-form-input', m('.TermsInput.FormControl', {\n            className: this.inputIsFocused ? 'focus' : '',\n        }, this.inputItems().toArray())), 20);\n\n        items.add('submit', m('.ChooseTaxonomyTermsModal-form-submit.App-primaryControl', Button.component({\n            type: 'submit',\n            className: 'Button Button--primary',\n            disabled: this.attrs.taxonomy.minTerms() && this.selectedTerms.length < this.attrs.taxonomy.minTerms(),\n            icon: 'fas fa-check',\n            loading: this.saving,\n        }, app.translator.trans('flamarkt-taxonomies.lib.modal.submit'))), 10);\n\n        return items;\n    }\n\n    inputItems() {\n        const items = new ItemList();\n\n        items.add('selected', this.selectedTerms.map(term => {\n            return m('span.TermsInput-term', {\n                onclick: () => {\n                    this.toggleTerm(term);\n                    this.onready();\n                },\n            }, termLabel(term));\n        }), 20);\n\n        items.add('control', m('input.FormControl', {\n            placeholder: extractText(this.getInstruction()),\n            value: this.searchFilter,\n            oninput: (event: Event) => {\n                this.searchFilter = (event.target as HTMLInputElement).value;\n                this.activeListIndex = 0;\n            },\n            onkeydown: this.navigator.navigate.bind(this.navigator),\n            // Use local methods so that other extensions can extend behaviour\n            onfocus: this.oninputfocus.bind(this),\n            onblur: this.oninputblur.bind(this),\n        }), 10);\n\n        return items;\n    }\n\n    oninputfocus() {\n        this.inputIsFocused = true;\n    }\n\n    oninputblur() {\n        this.inputIsFocused = false;\n    }\n\n    listAvailableTerms(terms: Term[]): Children {\n        return m('.Modal-footer', this.availableTerms === null ?\n            LoadingIndicator.component() :\n            m('ul.ChooseTaxonomyTermsModal-list.SelectTermList', {\n                className: terms.some(term => term.description()) ? 'SelectTermList--with-descriptions' : '',\n            }, terms.map(this.listAvailableTerm.bind(this)))\n        );\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li.SelectTermListItem', {\n            'data-index': index,\n            className: classList({\n                colored: !!term.color(),\n                selected: this.indexInSelectedTerms(term) !== -1,\n                active: this.activeListIndex === index,\n            }),\n            style: {color: term.color()},\n            onmouseover: () => this.activeListIndex = index,\n            onclick: this.toggleTerm.bind(this, term),\n        }, [\n            taxonomyIcon(term),\n            m('span.SelectTermListItem-name', term.exists ? highlight(term.name(), this.searchFilter) : app.translator.trans('flamarkt-taxonomies.lib.modal.custom', {\n                value: m('em', term.name()),\n            })),\n            term.description() ? m('span.SelectTermListItem-description', term.description()) : '',\n        ]);\n    }\n\n    toggleTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.removeTerm(term);\n        } else {\n            this.addTerm(term);\n        }\n\n        if (this.searchFilter) {\n            this.searchFilter = '';\n            this.activeListIndex = 0;\n        }\n\n        // Defer re-focusing to next browser draw\n        setTimeout(() => {\n            this.onready();\n        });\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case we don't want to submit just yet, but we will delete the text\n        // so that typing enter multiple times does end up submitting\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Ctrl + Enter submits the selection, just Enter completes the current entry\n        if (e.metaKey || e.ctrlKey || $element.is('.selected')) {\n            if (this.selectedTerms.length) {\n                // Calling .trigger() on the form with jQuery doesn't seem to trigger the onsubmit, so we'll just do that directly instead\n                this.onsubmit();\n            }\n        } else {\n            $element[0].dispatchEvent(new Event('click'));\n        }\n    }\n\n    getDomElement(index: number) {\n        return this.$(`.SelectTermListItem[data-index=\"${index}\"]`);\n    }\n\n    setIndex(index: number, scrollToItem: boolean) {\n        const $dropdown = this.$('.ChooseTaxonomyTermsModal-list');\n\n        const indexLength = this.$('.SelectTermListItem').length;\n\n        if (index < 0) {\n            index = indexLength - 1;\n        } else if (index >= indexLength) {\n            index = 0;\n        }\n\n        const $item = this.getDomElement(index);\n        this.activeListIndex = index;\n\n        m.redraw();\n\n        if (scrollToItem) {\n            const dropdownScroll = $dropdown.scrollTop() || 0;\n            const dropdownTop = $dropdown.offset()?.top || 0;\n            const dropdownBottom = dropdownTop + ($dropdown.outerHeight() || 0);\n            const itemTop = $item.offset()?.top || 0;\n            const itemBottom = itemTop + ($item.outerHeight() || 0);\n\n            let scrollTop;\n            if (itemTop < dropdownTop) {\n                scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n            } else if (itemBottom > dropdownBottom) {\n                scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n            }\n\n            if (typeof scrollTop !== 'undefined') {\n                $dropdown.stop(true).animate({scrollTop}, 100);\n            }\n        }\n    }\n\n    onsubmit(event?: Event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.attrs.resource) {\n            this.saveResource();\n\n            // Do not run the normal code - it might close the modal even if an error occurred\n            return;\n        }\n\n        if (this.attrs.onsubmit) this.attrs.onsubmit(this.selectedTerms);\n\n        app.modal.close();\n    }\n\n    saveResource() {\n        this.saving = true;\n\n        this.attrs.resource.save({\n            relationships: {\n                taxonomies: [\n                    {\n                        verbatim: true, // Flarum workaround, defined in flamarkt/core\n                        type: 'flamarkt-taxonomies',\n                        id: this.attrs.taxonomy.id(),\n                        relationships: {\n                            terms: {\n                                data: this.selectedTerms.map(termToIdentifier),\n                            },\n                        },\n                    },\n                ],\n            },\n        }).then(this.onsaved.bind(this), this.onerror.bind(this));\n    }\n\n    onsaved() {\n        // Need to check if DiscussionPage exists because in backoffice frontend the import will be undefined\n        if (DiscussionPage && app.current.matches(DiscussionPage)) {\n            app.current.get('stream').update();\n        }\n        this.saving = false;\n        m.redraw();\n\n        app.modal.close();\n    }\n\n    onerror() {\n        this.saving = false;\n        m.redraw();\n    }\n}\n","import {Attributes} from 'mithril';\nimport app from 'flarum/common/app';\nimport extract from 'flarum/common/utils/extract';\nimport Term from '../models/Term';\nimport taxonomyIcon from './taxonomyIcon';\nimport Taxonomy from '../models/Taxonomy';\n\nexport default function termLabel(term: Taxonomy | Term | null = null, attrs: Attributes = {}) {\n    attrs.style = attrs.style || {};\n    attrs.className = 'TaxonomyLabel ' + (attrs.className || '');\n\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n    const tagText = term ? term.name() : app.translator.trans('flarum-tags.lib.deleted_tag_text');\n    let tag = 'span';\n\n    if (term) {\n        const color = term.color();\n        if (color) {\n            attrs.style.backgroundColor = attrs.style.color = color;\n            attrs.className += ' colored';\n        }\n\n        // We need to check for instanceof because this method is also used with a taxonomy passed as a value\n        if (term instanceof Term && term.taxonomy() && term.taxonomy().showFilter()) {\n            if (discussionLink) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('index', {[term.taxonomy().slug()]: term.slug()});\n                attrs.config = m.route;\n                tag = 'a';\n            }\n\n            // Only generate user taxonomy links if fof/user-directory is enabled\n            if (userLink && app.routes.fof_user_directory) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('fof_user_directory', {q: 'taxonomy:' + term.taxonomy().slug() + ':' + term.slug()});\n                attrs.config = m.route;\n                tag = 'a';\n            }\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return m(tag, attrs, m('span.TaxonomyLabel-text', [\n        term && term.icon() && taxonomyIcon(term, {}, {useColor: false}),\n        ' ' + tagText,\n    ]));\n}\n","import app from 'flamarkt/backoffice/backoffice/app';\nimport BackofficeNav from 'flamarkt/backoffice/backoffice/components/BackofficeNav';\nimport ProductShowPage from 'flamarkt/core/backoffice/pages/ProductShowPage';\nimport {extend} from 'flarum/common/extend';\nimport LinkButton from 'flarum/common/components/LinkButton';\nimport TaxonomiesPage from './components/TaxonomiesPage';\nimport addModels from '../common/addModels';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport ChooseTaxonomyTermsDropdown from '../common/components/ChooseTaxonomyTermsDropdown';\n\napp.initializers.add('flamarkt-taxonomies', () => {\n    addModels();\n\n    app.routes.taxonomies = {\n        path: '/taxonomies',\n        component: TaxonomiesPage,\n    };\n\n    app.extensionData.for('flamarkt-taxonomies').registerSetting(() => {\n        return m('.Form-group', LinkButton.component({\n            className: 'Button',\n            href: app.route('taxonomies'),\n        }, app.translator.trans('flamarkt-taxonomies.admin.settings.goToPage')));\n    });\n\n    extend(BackofficeNav.prototype, 'items', function (items) {\n        items.add('taxonomies', LinkButton.component({\n            href: app.route('taxonomies'),\n            icon: 'fas fa-tags',\n        }, app.translator.trans('flamarkt-taxonomies.admin.menu.title')));\n    });\n\n    if (ProductShowPage) {\n        extend(ProductShowPage.prototype, 'fields', function (items) {\n            if (!this.product.exists || !this.product.attribute('canEditTaxonomies')) {\n                return;\n            }\n\n            sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n                if (taxonomy.type() !== 'products') {\n                    return;\n                }\n\n                items.add('taxonomy-' + taxonomy.slug(), m('.Form-group', [\n                    m('label', taxonomy.name()),\n                    m(ChooseTaxonomyTermsDropdown, {\n                        resource: this.product,\n                        taxonomy,\n                    }),\n                ]), -100);\n            });\n        });\n    }\n});\n","import app from 'flarum/common/app';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Forum from 'flarum/common/models/Forum';\nimport User from 'flarum/common/models/User';\nimport Model from 'flarum/common/Model';\nimport Product from 'flamarkt/core/common/models/Product';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\n\nexport default function () {\n    app.store.models['flamarkt-taxonomies'] = Taxonomy;\n    app.store.models['flamarkt-taxonomy-terms'] = Term;\n\n    Forum.prototype.taxonomies = Model.hasMany('taxonomies');\n    Discussion.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    User.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n\n    if (Product) {\n        Product.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","extensions","core","compat","_setPrototypeOf","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","create","constructor","taxonomies","slice","sort","b","order","name","AbstractEditModal","dirty","className","title","app","this","translationPrefix","isNew","content","m","form","Button","type","loading","disabled","onclick","ondelete","bind","Modal","EditTermModal","slug","description","color","icon","oninit","vnode","term","attrs","oninput","withAttr","href","tabindex","confirm","extractText","errorHandler","onerror","then","loaded","onsubmit","event","preventDefault","record","options","url","taxonomy","apiTermsEndpoint","save","onsave","taxonomyIcon","settings","hasIcon","useColor","classList","style","backgroundColor","TaxonomyTermsList","terms","method","result","redraw","view","LoadingIndicator","viewTerms","Sortable","containerTag","handleClassName","onsort","origin","destination","splice","apiOrderEndpoint","body","map","id","e","index","draggable","sortTerms","Component","EditTaxonomyModal","showLabel","showFilter","allowCustomValues","customValueValidation","customValueSlugger","minTerms","maxTerms","discussions","users","products","Select","onchange","checked","alpha_num","alpha_dash","regex","indexOf","split","random","transliterator","min","step","parseInt","show_label","show_filter","allow_custom_values","custom_value_validation","custom_value_slugger","min_terms","max_terms","TaxonomiesPage","tabIndex","viewTaxonomies","direction","sortTaxonomies","findIndex","t","length","component","Page","Taxonomy","Model","createdAt","canSearch","apiEndpoint","exists","data","Term","_extends","assign","target","i","arguments","source","apply","attributes","ChooseTaxonomyTermsDropdown","lastSaveState","dropdownIsFocused","onmousedown","navigator","when","searchFilter","select","oncreate","element","dom","dropdown","querySelector","contains","document","addEventListener","onbeforeremove","onremove","removeEventListener","formItems","toArray","listAvailableTerms","filteredAvailableTerms","items","remove","status","saving","add","inputIsFocused","availableTerms","listAvailableTerm","toggleTerm","saveResource","$element","getDomElement","activeListIndex","dispatchEvent","Event","onsaved","ChooseTaxonomyTermsModal","selectedTerms","forEach","addTerm","resource","taxonomyTerms","KeyboardNavigatable","onUp","setIndex","onDown","onSelect","onRemove","indexInSelectedTerms","push","removeTerm","displayName","getInstruction","count","remaining","filter","toLowerCase","substr","some","validation","parts","RegExp","test","viewForm","ItemList","inputItems","onready","discussionLink","extract","userLink","tagText","tag","config","route","q","termLabel","placeholder","onkeydown","navigate","onfocus","oninputfocus","onblur","oninputblur","colored","selected","active","onmouseover","highlight","setTimeout","metaKey","ctrlKey","is","$","scrollToItem","$dropdown","indexLength","$item","scrollTop","dropdownScroll","dropdownTop","offset","top","dropdownBottom","outerHeight","itemTop","itemBottom","css","stop","animate","relationships","verbatim","termToIdentifier","DiscussionPage","update","Forum","Discussion","User","Product","path","registerSetting","LinkButton","extend","BackofficeNav","ProductShowPage","product","attribute"],"sourceRoot":""}