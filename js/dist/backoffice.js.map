{"version":3,"sources":["webpack://@flamarkt/taxonomies/webpack/bootstrap","webpack://@flamarkt/taxonomies/external \"((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['app']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/Model']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/app']\"","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flamarkt/taxonomies/./src/common/utils/sortTaxonomies.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/extend']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/Button']\"","webpack://@flamarkt/taxonomies/./src/common/helpers/taxonomyIcon.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@flamarkt/taxonomies/./src/common/helpers/termLabel.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsModal.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/withAttr']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/extract']\"","webpack://@flamarkt/taxonomies/./src/common/models/Term.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/termsLabel.ts","webpack://@flamarkt/taxonomies/./src/common/utils/termToIdentifier.ts","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@flamarkt/taxonomies/./src/common/utils/sortTerms.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/helpers/icon']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/ItemList']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/classList']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/extractText']\"","webpack://@flamarkt/taxonomies/./src/common/models/Taxonomy.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/labelsFromMultipleTaxonomiesList.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsDropdown.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/Modal']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@flamarkt/taxonomies/external \"((flarum.extensions['flamarkt-core']||{})['common']||{})['models/Product']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/LinkButton']\"","webpack://@flamarkt/taxonomies/./src/common/compat.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/helpers/highlight']\"","webpack://@flamarkt/taxonomies/external \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['utils/KeyboardNavigatable']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/Component']\"","webpack://@flamarkt/taxonomies/./src/common/addModels.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/models/Discussion']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/models/Forum']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/models/User']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/string']\"","webpack://@flamarkt/taxonomies/external \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/Sortable']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/Select']\"","webpack://@flamarkt/taxonomies/external \"((flarum.extensions['flamarkt-core']||{})['backoffice']||{})['pages/ProductShowPage']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/Page']\"","webpack://@flamarkt/taxonomies/external \"((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['components/BackofficeNav']\"","webpack://@flamarkt/taxonomies/./src/backoffice/components/AbstractEditModal.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/EditTaxonomyModal.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/EditTermModal.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/TaxonomyTermsList.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/TaxonomiesPage.ts","webpack://@flamarkt/taxonomies/./src/backoffice/compat.ts","webpack://@flamarkt/taxonomies/./src/backoffice/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","extensions","core","compat","_setPrototypeOf","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","constructor","taxonomies","slice","sort","a","b","order","taxonomyIcon","term","attrs","settings","hasIcon","icon","useColor","className","classList","style","color","backgroundColor","termLabel","discussionLink","extract","userLink","tagText","app","translator","trans","tag","Term","taxonomy","showFilter","title","description","href","route","slug","config","routes","fof_user_directory","q","ChooseTaxonomyTermsModal","availableTerms","selectedTerms","searchFilter","activeListIndex","inputIsFocused","saving","navigator","oninit","vnode","this","forEach","addTerm","resource","taxonomyTerms","id","request","method","url","forum","attribute","apiEndpoint","then","result","store","pushPayload","redraw","KeyboardNavigatable","onUp","setIndex","onDown","onSelect","select","onRemove","length","toggleTerm","when","event","preventDefault","indexInSelectedTerms","findIndex","data","type","push","removeTerm","index","splice","displayName","getInstruction","count","minTerms","remaining","filteredAvailableTerms","filter","toLowerCase","substr","allowCustomValues","some","validation","customValueValidation","regex","indexOf","parts","split","RegExp","test","createRecord","attributes","maxTerms","content","viewForm","listAvailableTerms","formItems","toArray","items","ItemList","add","inputItems","Button","component","disabled","loading","map","onclick","onready","placeholder","extractText","oninput","target","onkeydown","navigate","onfocus","oninputfocus","onblur","oninputblur","terms","LoadingIndicator","listAvailableTerm","colored","selected","active","onmouseover","exists","highlight","setTimeout","e","$element","getDomElement","metaKey","ctrlKey","is","onsubmit","dispatchEvent","Event","$","scrollToItem","$dropdown","indexLength","$item","scrollTop","dropdownScroll","dropdownTop","offset","top","dropdownBottom","outerHeight","itemTop","itemBottom","parseInt","css","stop","animate","saveResource","modal","close","save","relationships","verbatim","termToIdentifier","onsaved","onerror","DiscussionPage","current","matches","update","Modal","Model","createdAt","transformDate","hasOne","termsLabel","children","showLabel","sortTerms","getIdentifier","_extends","assign","arguments","source","apply","Taxonomy","customValueSlugger","canSearch","apiOrderEndpoint","apiTermsEndpoint","sortTaxonomies","ChooseTaxonomyTermsDropdown","lastSaveState","dropdownIsFocused","onmousedown","oncreate","element","dom","dropdown","querySelector","contains","document","addEventListener","onbeforeremove","onremove","removeEventListener","view","remove","status","common","labelsFromMultipleTaxonomiesList","models","Forum","hasMany","Discussion","User","Product","AbstractEditModal","dirty","translationPrefix","isNew","form","ondelete","EditTaxonomyModal","options","discussions","users","products","Select","onchange","withAttr","tabindex","checked","alpha_num","alpha_dash","random","transliterator","min","step","confirm","errorHandler","loaded","show_label","show_filter","allow_custom_values","custom_value_validation","custom_value_slugger","min_terms","max_terms","record","onsave","EditTermModal","TaxonomyTermsList","viewTerms","Sortable","containerTag","handleClassName","onsort","origin","destination","body","draggable","show","Component","TaxonomiesPage","tabIndex","viewTaxonomies","direction","Page","backoffice","initializers","addModels","path","extensionData","registerSetting","LinkButton","extend","BackofficeNav","ProductShowPage","product"],"mappings":"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","file":"backoffice.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 59);\n","module.exports = ((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['app'];","module.exports = flarum.core.compat['common/Model'];","module.exports = flarum.core.compat['common/app'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import Taxonomy from '../models/Taxonomy';\n\nexport default function (taxonomies: Taxonomy[] | false): Taxonomy[] {\n    // Special case for when retrieving an empty relationship from the store\n    if (taxonomies === false) {\n        taxonomies = [];\n    }\n\n    return taxonomies.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['common/extend'];","module.exports = flarum.core.compat['common/components/Button'];","import {Attributes} from 'mithril';\nimport classList from 'flarum/common/utils/classList';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\ninterface Settings {\n    useColor?: boolean\n}\n\nexport default function taxonomyIcon(term: Taxonomy | Term, attrs: Attributes = {}, settings: Settings = {}) {\n    const hasIcon = term && term.icon();\n    const {useColor = true} = settings;\n\n    attrs.className = classList([\n        attrs.className,\n        'icon',\n        hasIcon ? term.icon() : 'TaxonomyIcon',\n    ]);\n\n    if (term) {\n        attrs.style = attrs.style || {};\n\n        if (hasIcon) {\n            attrs.style.color = useColor ? term.color() : '';\n        } else {\n            attrs.style.backgroundColor = term.color();\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return hasIcon ? m('i', attrs) : m('span', attrs);\n}\n","module.exports = flarum.core.compat['common/components/LoadingIndicator'];","import {Attributes} from 'mithril';\nimport app from 'flarum/common/app';\nimport extract from 'flarum/common/utils/extract';\nimport Term from '../models/Term';\nimport taxonomyIcon from './taxonomyIcon';\nimport Taxonomy from '../models/Taxonomy';\n\nexport default function termLabel(term: Taxonomy | Term | null = null, attrs: Attributes = {}) {\n    attrs.style = attrs.style || {};\n    attrs.className = 'TaxonomyLabel ' + (attrs.className || '');\n\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n    const tagText = term ? term.name() : app.translator.trans('flarum-tags.lib.deleted_tag_text');\n    let tag = 'span';\n\n    if (term) {\n        const color = term.color();\n        if (color) {\n            attrs.style.backgroundColor = attrs.style.color = color;\n            attrs.className += ' colored';\n        }\n\n        // We need to check for instanceof because this method is also used with a taxonomy passed as a value\n        if (term instanceof Term && term.taxonomy() && term.taxonomy().showFilter()) {\n            if (discussionLink) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('index', {[term.taxonomy().slug()]: term.slug()});\n                attrs.config = m.route;\n                tag = 'a';\n            }\n\n            // Only generate user taxonomy links if fof/user-directory is enabled\n            if (userLink && app.routes.fof_user_directory) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('fof_user_directory', {q: 'taxonomy:' + term.taxonomy().slug() + ':' + term.slug()});\n                attrs.config = m.route;\n                tag = 'a';\n            }\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return m(tag, attrs, m('span.TaxonomyLabel-text', [\n        term && term.icon() && taxonomyIcon(term, {}, {useColor: false}),\n        ' ' + tagText,\n    ]));\n}\n","import {Children, Vnode} from 'mithril';\nimport app from 'flarum/common/app';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Modal, {IInternalModalAttrs} from 'flarum/common/components/Modal';\nimport Model from 'flarum/common/Model';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport highlight from 'flarum/common/helpers/highlight';\nimport classList from 'flarum/common/utils/classList';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport extractText from 'flarum/common/utils/extractText';\n\nimport KeyboardNavigatable from 'flamarkt/backoffice/common/utils/KeyboardNavigatable';\n\nimport termLabel from '../helpers/termLabel';\nimport taxonomyIcon from '../helpers/taxonomyIcon';\nimport termToIdentifier from '../utils/termToIdentifier';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\n/**\n * Comparing objects directly is unreliable because we will be creating some new records as well\n * So we use this method to do a proper deep check\n */\nfunction isSameTerm(a: Term, b: Term) {\n    if (a.data.type !== b.data.type) {\n        return false;\n    }\n\n    // If both have an ID and it's different\n    if (a.id() && b.id()) {\n        return a.id() === b.id();\n    }\n\n    // If only one has an ID, it's different\n    if (!a.id() !== !b.id()) {\n        return false;\n    }\n\n    // If both don't have an ID, it's a new value and we compare the name\n    return a.name() === b.name();\n}\n\nexport interface ChooseTaxonomyTermsModalAttrs extends IInternalModalAttrs {\n    resource: Model\n    taxonomy: Taxonomy\n    selectedTerms: Term[]\n    onsubmit?: (terms: Term[]) => void\n}\n\n/**\n * Based on Flarum's TagDiscussionModal\n */\nexport default class ChooseTaxonomyTermsModal extends Modal<ChooseTaxonomyTermsModalAttrs> {\n    availableTerms: Term[] | null = null;\n    selectedTerms: Term[] = [];\n    searchFilter: string = '';\n    activeListIndex: number = 0;\n    inputIsFocused: boolean = false;\n    saving: boolean = false;\n    navigator!: KeyboardNavigatable;\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        if (this.attrs.selectedTerms) {\n            this.attrs.selectedTerms.forEach(this.addTerm.bind(this));\n        } else if (this.attrs.resource) {\n            this.attrs.resource.taxonomyTerms().forEach((term: Term) => {\n                if (term.taxonomy().id() === this.attrs.taxonomy.id()) {\n                    this.addTerm(term);\n                }\n            });\n        }\n\n        app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiEndpoint() + '/terms',\n        }).then(result => {\n            this.availableTerms = app.store.pushPayload<Term[]>(result);\n\n            m.redraw();\n        });\n\n        this.navigator = new KeyboardNavigatable();\n        this.navigator\n            .onUp(() => this.setIndex(this.activeListIndex - 1, true))\n            .onDown(() => this.setIndex(this.activeListIndex + 1, true))\n            .onSelect(this.select.bind(this))\n            .onRemove(() => {\n                if (!this.selectedTerms.length) {\n                    return;\n                }\n\n                this.toggleTerm(this.selectedTerms[this.selectedTerms.length - 1]);\n            })\n            .when(event => {\n                // We want to allow selecting with space because it's a common way to select\n                // However this interferes with the ability to enter spaces\n                // So we will have space act as select, but only if nothing is typed yet\n                if (event.key === ' ' && this.searchFilter === '') {\n                    event.preventDefault();\n                    this.select(event);\n\n                    return false;\n                }\n\n                return true;\n            });\n    }\n\n    indexInSelectedTerms(term: Term) {\n        return this.selectedTerms.findIndex(t => isSameTerm(t, term));\n    }\n\n    addTerm(term: Term) {\n        this.selectedTerms.push(term);\n    }\n\n    removeTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.selectedTerms.splice(index, 1);\n        }\n    }\n\n    className() {\n        return 'ChooseTaxonomyTermsModal';\n    }\n\n    title() {\n        return this.attrs.resource\n            ? app.translator.trans('flamarkt-taxonomies.lib.modal.title.edit', {\n                taxonomy: this.attrs.taxonomy.name(),\n                title: m('em', this.attrs.resource.title ? this.attrs.resource.title() : this.attrs.resource.displayName()),\n            })\n            : app.translator.trans('flamarkt-taxonomies.lib.modal.title.new', {\n                taxonomy: this.attrs.taxonomy.name(),\n            });\n    }\n\n    getInstruction() {\n        const count = this.selectedTerms.length;\n\n        if (this.attrs.taxonomy.minTerms() && count < this.attrs.taxonomy.minTerms()) {\n            const remaining = this.attrs.taxonomy.minTerms() - count;\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholder', {\n                count: remaining,\n            });\n        } else if (count === 0) {\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholderOptional');\n        }\n\n        return '';\n    }\n\n    filteredAvailableTerms() {\n        let availableTerms = this.availableTerms === null ? [] : this.availableTerms;\n        const filter = this.searchFilter.toLowerCase();\n\n        if (filter) {\n            availableTerms = availableTerms.filter(term => term.name().substr(0, filter.length).toLowerCase() === filter);\n\n            if (\n                this.attrs.taxonomy.allowCustomValues() &&\n                !availableTerms.some(term => term.name().toLowerCase() === filter)\n            ) {\n                const validation = this.attrs.taxonomy.customValueValidation();\n                let regex: RegExp | null = null;\n\n                if (validation === 'alpha_num') {\n                    regex = /^[a-z0-9]$/i;\n                } else if (validation === 'alpha_dash') {\n                    regex = /^[a-z0-9_-]$/i;\n                } else if (validation.indexOf('/') === 0) {\n                    const parts = validation.split('/');\n                    if (parts.length === 3) {\n                        regex = new RegExp(parts[1], parts[2]);\n                    }\n                }\n\n                if (!regex || regex.test(this.searchFilter)) {\n                    availableTerms.push(app.store.createRecord('flamarkt-taxonomy-terms', {\n                        attributes: {\n                            name: this.searchFilter,\n                        },\n                    }));\n                }\n            }\n        }\n\n        if (this.attrs.taxonomy.maxTerms() && this.selectedTerms.length >= this.attrs.taxonomy.maxTerms()) {\n            availableTerms = [];\n        }\n\n        return availableTerms;\n    }\n\n    content() {\n        return [\n            this.viewForm(),\n            this.listAvailableTerms(this.filteredAvailableTerms()),\n        ];\n    }\n\n    viewForm() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.Modal-body', [\n            description ? m('p', description) : null,\n            m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n        ]);\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('input', m('.ChooseTaxonomyTermsModal-form-input', m('.TermsInput.FormControl', {\n            className: this.inputIsFocused ? 'focus' : '',\n        }, this.inputItems().toArray())), 20);\n\n        items.add('submit', m('.ChooseTaxonomyTermsModal-form-submit.App-primaryControl', Button.component({\n            type: 'submit',\n            className: 'Button Button--primary',\n            disabled: this.attrs.taxonomy.minTerms() && this.selectedTerms.length < this.attrs.taxonomy.minTerms(),\n            icon: 'fas fa-check',\n            loading: this.saving,\n        }, app.translator.trans('flamarkt-taxonomies.lib.modal.submit'))), 10);\n\n        return items;\n    }\n\n    inputItems() {\n        const items = new ItemList();\n\n        items.add('selected', this.selectedTerms.map(term => {\n            return m('span.TermsInput-term', {\n                onclick: () => {\n                    this.toggleTerm(term);\n                    this.onready();\n                },\n            }, termLabel(term));\n        }), 20);\n\n        items.add('control', m('input.FormControl', {\n            placeholder: extractText(this.getInstruction()),\n            value: this.searchFilter,\n            oninput: (event: Event) => {\n                this.searchFilter = (event.target as HTMLInputElement).value;\n                this.activeListIndex = 0;\n            },\n            onkeydown: this.navigator.navigate.bind(this.navigator),\n            // Use local methods so that other extensions can extend behaviour\n            onfocus: this.oninputfocus.bind(this),\n            onblur: this.oninputblur.bind(this),\n        }), 10);\n\n        return items;\n    }\n\n    oninputfocus() {\n        this.inputIsFocused = true;\n    }\n\n    oninputblur() {\n        this.inputIsFocused = false;\n    }\n\n    listAvailableTerms(terms: Term[]): Children {\n        return m('.Modal-footer', this.availableTerms === null ?\n            LoadingIndicator.component() :\n            m('ul.ChooseTaxonomyTermsModal-list.SelectTermList', {\n                className: terms.some(term => term.description()) ? 'SelectTermList--with-descriptions' : '',\n            }, terms.map(this.listAvailableTerm.bind(this)))\n        );\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li.SelectTermListItem', {\n            'data-index': index,\n            className: classList({\n                colored: !!term.color(),\n                selected: this.indexInSelectedTerms(term) !== -1,\n                active: this.activeListIndex === index,\n            }),\n            style: {color: term.color()},\n            onmouseover: () => this.activeListIndex = index,\n            onclick: this.toggleTerm.bind(this, term),\n        }, [\n            taxonomyIcon(term),\n            m('span.SelectTermListItem-name', term.exists ? highlight(term.name(), this.searchFilter) : app.translator.trans('flamarkt-taxonomies.lib.modal.custom', {\n                value: m('em', term.name()),\n            })),\n            term.description() ? m('span.SelectTermListItem-description', term.description()) : '',\n        ]);\n    }\n\n    toggleTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.removeTerm(term);\n        } else {\n            this.addTerm(term);\n        }\n\n        if (this.searchFilter) {\n            this.searchFilter = '';\n            this.activeListIndex = 0;\n        }\n\n        // Defer re-focusing to next browser draw\n        setTimeout(() => {\n            this.onready();\n        });\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case we don't want to submit just yet, but we will delete the text\n        // so that typing enter multiple times does end up submitting\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Ctrl + Enter submits the selection, just Enter completes the current entry\n        if (e.metaKey || e.ctrlKey || $element.is('.selected')) {\n            if (this.selectedTerms.length) {\n                // Calling .trigger() on the form with jQuery doesn't seem to trigger the onsubmit, so we'll just do that directly instead\n                this.onsubmit();\n            }\n        } else {\n            $element[0].dispatchEvent(new Event('click'));\n        }\n    }\n\n    getDomElement(index: number) {\n        return this.$(`.SelectTermListItem[data-index=\"${index}\"]`);\n    }\n\n    setIndex(index: number, scrollToItem: boolean) {\n        const $dropdown = this.$('.ChooseTaxonomyTermsModal-list');\n\n        const indexLength = this.$('.SelectTermListItem').length;\n\n        if (index < 0) {\n            index = indexLength - 1;\n        } else if (index >= indexLength) {\n            index = 0;\n        }\n\n        const $item = this.getDomElement(index);\n        this.activeListIndex = index;\n\n        m.redraw();\n\n        if (scrollToItem) {\n            const dropdownScroll = $dropdown.scrollTop() || 0;\n            const dropdownTop = $dropdown.offset()?.top || 0;\n            const dropdownBottom = dropdownTop + ($dropdown.outerHeight() || 0);\n            const itemTop = $item.offset()?.top || 0;\n            const itemBottom = itemTop + ($item.outerHeight() || 0);\n\n            let scrollTop;\n            if (itemTop < dropdownTop) {\n                scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n            } else if (itemBottom > dropdownBottom) {\n                scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n            }\n\n            if (typeof scrollTop !== 'undefined') {\n                $dropdown.stop(true).animate({scrollTop}, 100);\n            }\n        }\n    }\n\n    onsubmit(event?: Event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.attrs.resource) {\n            this.saveResource();\n\n            // Do not run the normal code - it might close the modal even if an error occurred\n            return;\n        }\n\n        if (this.attrs.onsubmit) this.attrs.onsubmit(this.selectedTerms);\n\n        app.modal.close();\n    }\n\n    saveResource() {\n        this.saving = true;\n\n        this.attrs.resource.save({\n            relationships: {\n                taxonomies: [\n                    {\n                        verbatim: true, // Flarum workaround, defined in flamarkt/core\n                        type: 'flamarkt-taxonomies',\n                        id: this.attrs.taxonomy.id(),\n                        relationships: {\n                            terms: {\n                                data: this.selectedTerms.map(termToIdentifier),\n                            },\n                        },\n                    },\n                ],\n            },\n        }).then(this.onsaved.bind(this), this.onerror.bind(this));\n    }\n\n    onsaved() {\n        // Need to check if DiscussionPage exists because in backoffice frontend the import will be undefined\n        if (DiscussionPage && app.current.matches(DiscussionPage)) {\n            app.current.get('stream').update();\n        }\n        this.saving = false;\n        m.redraw();\n\n        app.modal.close();\n    }\n\n    onerror() {\n        this.saving = false;\n        m.redraw();\n    }\n}\n","module.exports = flarum.core.compat['common/utils/withAttr'];","module.exports = flarum.core.compat['common/utils/extract'];","import Model from 'flarum/common/Model';\nimport Taxonomy from './Taxonomy';\n\nexport default class Term extends Model {\n    name = Model.attribute<string>('name');\n    slug = Model.attribute<string>('slug');\n    description = Model.attribute<string>('description');\n    color = Model.attribute<string>('color');\n    icon = Model.attribute<string>('icon');\n    order = Model.attribute<number>('order');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n\n    taxonomy = Model.hasOne<Taxonomy>('taxonomy');\n\n    protected apiEndpoint(): string {\n        // @ts-ignore data.id not type-hinted\n        return '/flamarkt/taxonomy-terms' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","import {Attributes, Vnode} from 'mithril';\nimport extract from 'flarum/common/utils/extract';\nimport termLabel from './termLabel';\nimport sortTerms from '../utils/sortTerms';\nimport Term from '../models/Term';\n\nexport default function termsLabel(terms: Term[], attrs: Attributes = {}) {\n    const children: Vnode[] = [];\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n\n    attrs.className = 'TaxonomiesLabel ' + (attrs.className || '');\n\n    if (terms) {\n        let taxonomy = extract(attrs, 'taxonomy');\n\n        if (!taxonomy) {\n            taxonomy = terms[0].taxonomy();\n        }\n\n        if (taxonomy) {\n            attrs['data-slug'] = taxonomy.slug();\n\n            if (taxonomy.showLabel()) {\n                children.push(termLabel(taxonomy, {\n                    className: 'TaxonomyParentLabel',\n                }));\n            }\n        }\n\n        sortTerms(terms).forEach(tag => {\n            if (tag || terms.length === 1) {\n                children.push(termLabel(tag, {discussionLink, userLink}));\n            }\n        });\n    } else {\n        children.push(termLabel());\n    }\n\n    return m('span', attrs, children);\n}\n","import Model from 'flarum/common/Model';\nimport Term from '../models/Term';\n\n/**\n * Prepares a model for a relationship payload\n * We need to keep the name value for custom terms\n */\nexport default function (term: Term) {\n    if (term.id()) {\n        return Model.getIdentifier(term);\n    }\n\n    return {\n        ...Model.getIdentifier(term),\n        attributes: {\n            name: term.name(),\n        },\n    }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import Term from '../models/Term';\n\nexport default function (terms: Term[]): Term[] {\n    return terms.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['common/helpers/icon'];","module.exports = flarum.core.compat['common/utils/ItemList'];","module.exports = flarum.core.compat['common/utils/classList'];","module.exports = flarum.core.compat['common/utils/extractText'];","import Model from 'flarum/common/Model';\n\nexport default class Taxonomy extends Model {\n    type = Model.attribute<string>('type');\n    name = Model.attribute<string>('name');\n    slug = Model.attribute<string>('slug');\n    description = Model.attribute<string>('description');\n    color = Model.attribute<string>('color');\n    icon = Model.attribute<string>('icon');\n    order = Model.attribute<number>('order');\n    showLabel = Model.attribute<boolean>('showLabel');\n    showFilter = Model.attribute<boolean>('showFilter');\n    allowCustomValues = Model.attribute<boolean>('allowCustomValues');\n    customValueValidation = Model.attribute<string | null>('customValueValidation');\n    customValueSlugger = Model.attribute<string | null>('customValueSlugger');\n    minTerms = Model.attribute<number>('minTerms');\n    maxTerms = Model.attribute<number>('maxTerms');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n    canSearch = Model.attribute<boolean>('canSearch');\n\n    protected apiEndpoint(): string {\n        // @ts-ignore data.id not type-hinted\n        return '/flamarkt/taxonomies' + (this.exists ? '/' + this.data.id : '');\n    }\n\n    apiOrderEndpoint(): string {\n        return this.apiEndpoint() + '/terms/order';\n    }\n\n    apiTermsEndpoint(): string {\n        return this.apiEndpoint() + '/terms';\n    }\n}\n","import {Attributes} from 'mithril';\nimport sortTaxonomies from '../utils/sortTaxonomies';\nimport termsLabel from './termsLabel';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\nexport default function (terms: Term[], attrs: Attributes = {}) {\n    const taxonomies: Taxonomy[] = [];\n\n    terms.forEach(term => {\n        const taxonomy = term.taxonomy();\n\n        if (taxonomy && taxonomies.indexOf(taxonomy) === -1) {\n            taxonomies.push(taxonomy);\n        }\n    });\n\n    return sortTaxonomies(taxonomies).map(taxonomy => {\n        return termsLabel(terms.filter(term => term.taxonomy() === taxonomy), {...attrs});\n    });\n}\n","import {Vnode, VnodeDOM} from 'mithril';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport icon from 'flarum/common/helpers/icon';\nimport ChooseTaxonomyTermsModal, {ChooseTaxonomyTermsModalAttrs} from './ChooseTaxonomyTermsModal';\nimport Term from '../models/Term';\n\nexport default class ChooseTaxonomyTermsDropdown extends ChooseTaxonomyTermsModal {\n    lastSaveState: 'success' | 'error' | 'neutral' = 'neutral'\n    dropdownIsFocused: boolean = false\n    onmousedown!: (event: Event) => void\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        this.navigator.when(event => {\n            // Same as the original when() in the modal\n            // (we are replacing the original since we can have a single callback)\n            if (event.key === ' ' && this.searchFilter === '') {\n                event.preventDefault();\n                this.select(event);\n\n                return false;\n            }\n\n            // We don't want Tab to act as select, as this prevent moving from field to field\n            return event.key !== 'Tab';\n        });\n    }\n\n    oncreate(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        // Not calling super because it just tries to do modal stuff\n        //super.oncreate(vnode);\n\n        // Since we are not calling the original Component.oncreate, we need to copy the dom reference manually\n        this.element = vnode.dom;\n\n        this.onmousedown = (event: Event) => {\n            const dropdown = vnode.dom.querySelector('.Dropdown-menu');\n\n            if (\n                dropdown &&\n                dropdown.contains(event.target as HTMLElement)\n            ) {\n                if (!this.dropdownIsFocused) {\n                    this.dropdownIsFocused = true;\n                    m.redraw();\n                }\n            } else {\n                if (this.dropdownIsFocused) {\n                    this.dropdownIsFocused = false;\n                    m.redraw();\n                }\n            }\n        };\n\n        document.addEventListener('mousedown', this.onmousedown);\n    }\n\n    onbeforeremove() {\n        // Do nothing. Prevent parent method from running because it will try to access this.attrs.state which isn't set\n    }\n\n    onremove(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.onremove(vnode);\n\n        document.removeEventListener('mousedown', this.onmousedown);\n    }\n\n    view() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.ChooseTaxonomyTermsDropdown', m('form', {\n            // The form element is only there to prevent any unwanted page POST submission\n            // It's also used so that onready() continues to focus the field when called\n            // Due to the jQuery selector in onready, the form cannot be the root element of view()\n            onsubmit(event: Event) {\n                event.preventDefault();\n            },\n        }, [\n            m('.ChooseTaxonomyTermsInput', [\n                m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n                // .ChooseTaxonomyTermsModal-list must be kept because it's used by the javascript of the keyboard navigation\n                this.listAvailableTerms(this.filteredAvailableTerms()),\n            ]),\n            description ? m('p', description) : null,\n        ]));\n    }\n\n    formItems() {\n        const items = super.formItems();\n\n        items.remove('submit');\n\n        let status = null;\n\n        if (this.saving) {\n            status = LoadingIndicator.component();\n        } else if (this.lastSaveState === 'success') {\n            status = icon('fas fa-check');\n        } else if (this.lastSaveState === 'error') {\n            status = icon('fas fa-times');\n        }\n\n        items.add('status', m('.ChooseTaxonomyTermsStatus', status));\n\n        return items;\n    }\n\n    listAvailableTerms(terms: Term[]) {\n        // We need two attributes to hold the dropdown open\n        // One is the input focus, managed by the modal\n        // The second one is needed because there's a short moment during a click where the focus is lost on the input\n        // mousedown triggers first, then the input blur, and only in mouseup can we put focus on the input again\n        if (!(this.inputIsFocused || this.dropdownIsFocused) || terms.length === 0) {\n            return null;\n        }\n\n        let content;\n\n        if (this.availableTerms === null) {\n            content = LoadingIndicator.component();\n        } else {\n            content = terms.map(this.listAvailableTerm.bind(this));\n        }\n\n        return m('ul.Dropdown-menu.ChooseTaxonomyTermsModal-list', content);\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li', super.listAvailableTerm(term, index));\n    }\n\n    toggleTerm(term: Term) {\n        super.toggleTerm(term);\n\n        // Auto-save\n        this.lastSaveState = 'neutral';\n        this.saveResource();\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case there's nothing to select\n        // We reset the typed value to force the user to enter something else and/or correctly reflect what is saved\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Same as original select(), but without the submission logic (because we auto-save)\n        // This now allows using Enter to remove a highlighted item as well\n        $element[0].dispatchEvent(new Event('click'));\n    }\n\n    onsaved() {\n        this.lastSaveState = 'success';\n        super.onsaved();\n    }\n\n    onerror() {\n        this.lastSaveState = 'error';\n        super.onerror();\n    }\n}\n","module.exports = flarum.core.compat['common/components/Modal'];","module.exports = flarum.core.compat['forum/components/DiscussionPage'];","module.exports = ((flarum.extensions['flamarkt-core']||{})['common']||{})['models/Product'];","module.exports = flarum.core.compat['common/components/LinkButton'];","import ChooseTaxonomyTermsDropdown from './components/ChooseTaxonomyTermsDropdown';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport labelsFromMultipleTaxonomiesList from './helpers/labelsFromMultipleTaxonomiesList';\nimport taxonomyIcon from './helpers/taxonomyIcon';\nimport termLabel from './helpers/termLabel';\nimport termsLabel from './helpers/termsLabel';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\nimport sortTaxonomies from './utils/sortTaxonomies';\nimport sortTerms from './utils/sortTerms';\nimport termToIdentifier from './utils/termToIdentifier';\n\nexport const common = {\n    'components/ChooseTaxonomyTermsDropdown': ChooseTaxonomyTermsDropdown,\n    'components/ChooseTaxonomyTermsModal': ChooseTaxonomyTermsModal,\n    'helpers/labelsFromMultipleTaxonomiesList': labelsFromMultipleTaxonomiesList,\n    'helpers/taxonomyIcon': taxonomyIcon,\n    'helpers/termLabel': termLabel,\n    'helpers/termsLabel': termsLabel,\n    'models/Taxonomy': Taxonomy,\n    'models/Term': Term,\n    'utils/sortTaxonomies': sortTaxonomies,\n    'utils/sortTerms': sortTerms,\n    'utils/termToIdentifier': termToIdentifier,\n}\n","module.exports = flarum.core.compat['common/helpers/highlight'];","module.exports = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['utils/KeyboardNavigatable'];","module.exports = flarum.core.compat['common/Component'];","import app from 'flarum/common/app';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Forum from 'flarum/common/models/Forum';\nimport User from 'flarum/common/models/User';\nimport Model from 'flarum/common/Model';\nimport Product from 'flamarkt/core/common/models/Product';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\n\nexport default function () {\n    app.store.models['flamarkt-taxonomies'] = Taxonomy;\n    app.store.models['flamarkt-taxonomy-terms'] = Term;\n\n    Forum.prototype.taxonomies = Model.hasMany('taxonomies');\n    Discussion.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    User.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n\n    if (Product) {\n        Product.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    }\n}\n","module.exports = flarum.core.compat['common/models/Discussion'];","module.exports = flarum.core.compat['common/models/Forum'];","module.exports = flarum.core.compat['common/models/User'];","module.exports = flarum.core.compat['common/utils/string'];","module.exports = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/Sortable'];","module.exports = flarum.core.compat['common/components/Select'];","module.exports = ((flarum.extensions['flamarkt-core']||{})['backoffice']||{})['pages/ProductShowPage'];","module.exports = flarum.core.compat['common/components/Page'];","module.exports = ((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['components/BackofficeNav'];","import {Children} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport Modal, {IInternalModalAttrs} from 'flarum/common/components/Modal';\nimport Button from 'flarum/common/components/Button';\n\nexport interface AbstractEditModalAttrs extends IInternalModalAttrs {\n    // nothing special, but it's easier to import a parent class from here from the sub classes\n}\n\nexport default abstract class AbstractEditModal<ModalAttrs extends AbstractEditModalAttrs = AbstractEditModalAttrs> extends Modal<ModalAttrs> {\n    dirty: boolean = false;\n\n    className() {\n        return 'Modal--small TaxonomyEditModal';\n    }\n\n    abstract translationPrefix(): string\n\n    abstract isNew(): boolean\n\n    title() {\n        return app.translator.trans(this.translationPrefix() + 'title.' + (this.isNew() ? 'new' : 'edit'));\n    }\n\n    abstract form(): Children;\n\n    content() {\n        return m('.Modal-body', [\n            this.form(),\n            m('.FormGroup', [\n                Button.component({\n                    type: 'submit',\n                    className: 'Button Button--primary',\n                    loading: this.loading,\n                    disabled: !this.dirty,\n                }, app.translator.trans(this.translationPrefix() + 'submit.' + (this.isNew() ? 'new' : 'edit'))),\n                ' ',\n                this.isNew() ? null : Button.component({\n                    className: 'Button Button--link TaxonomyEditModal-delete',\n                    loading: this.loading,\n                    onclick: this.ondelete.bind(this),\n                }, app.translator.trans(this.translationPrefix() + 'delete')),\n            ]),\n        ]);\n    }\n\n    abstract ondelete(): void;\n}\n","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport AbstractEditModal, {AbstractEditModalAttrs} from './AbstractEditModal';\nimport Taxonomy from '../../common/models/Taxonomy';\nimport Select from 'flarum/common/components/Select';\nimport {slug} from 'flarum/common/utils/string';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport extractText from 'flarum/common/utils/extractText';\nimport ItemList from 'flarum/common/utils/ItemList';\n\nexport interface EditTaxonomyModalAttrs extends AbstractEditModalAttrs {\n    taxonomy: Taxonomy\n    onsave?: (taxonomy: Taxonomy) => void\n    ondelete?: () => void\n}\n\nexport default class EditTaxonomyModal extends AbstractEditModal<EditTaxonomyModalAttrs> {\n    type!: string\n    name!: string\n    slug!: string\n    description!: string\n    color!: string\n    icon!: string\n    showLabel!: boolean\n    showFilter!: boolean\n    allowCustomValues!: boolean\n    customValueValidation!: string\n    customValueSlugger!: string\n    minTerms!: number | string // Needs string because we leave the field empty for null\n    maxTerms!: number | string\n\n    oninit(vnode: Vnode<EditTaxonomyModalAttrs, this>) {\n        super.oninit(vnode);\n\n        const {taxonomy} = this.attrs;\n\n        this.type = taxonomy ? taxonomy.type() : 'discussions';\n        this.name = taxonomy ? taxonomy.name() : '';\n        this.slug = taxonomy ? taxonomy.slug() : '';\n        this.description = taxonomy ? taxonomy.description() : '';\n        this.color = taxonomy ? taxonomy.color() : '';\n        this.icon = taxonomy ? taxonomy.icon() : '';\n        this.showLabel = taxonomy ? taxonomy.showLabel() : false;\n        this.showFilter = taxonomy ? taxonomy.showFilter() : false;\n        this.allowCustomValues = taxonomy ? taxonomy.allowCustomValues() : false;\n        this.customValueValidation = (taxonomy ? taxonomy.customValueValidation() : null) || '';\n        this.customValueSlugger = (taxonomy ? taxonomy.customValueSlugger() : null) || 'random';\n        this.minTerms = taxonomy ? taxonomy.minTerms() : '';\n        this.maxTerms = taxonomy ? taxonomy.maxTerms() : '';\n    }\n\n    translationPrefix() {\n        return 'flamarkt-taxonomies.admin.edit-taxonomy.';\n    }\n\n    isNew() {\n        return !this.attrs.taxonomy;\n    }\n\n    form(): any {\n        return this.formItems().toArray();\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        const options: any = {\n            discussions: app.translator.trans(this.translationPrefix() + 'type-options.discussions'),\n            users: app.translator.trans(this.translationPrefix() + 'type-options.users'),\n        };\n\n        if ('flamarkt-core' in flarum.extensions || this.type === 'products') {\n            options.products = app.translator.trans(this.translationPrefix() + 'type-options.products');\n        }\n\n        items.add('type', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.type')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.typeDescription')),\n            Select.component({\n                options,\n                value: this.type,\n                onchange: (value: string) => {\n                    this.type = value;\n                    this.dirty = true;\n                },\n                disabled: !this.isNew(),\n            }),\n        ]));\n\n        items.add('name', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.name')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.name,\n                oninput: withAttr('value', (value: string) => {\n                    this.name = value;\n                    this.slug = slug(value);\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('slug', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.slug')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.slug,\n                oninput: withAttr('value', (value: string) => {\n                    this.slug = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('description', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.description')),\n            m('textarea.FormControl', {\n                value: this.description,\n                oninput: withAttr('value', (value: string) => {\n                    this.description = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('color', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.color')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.color,\n                oninput: withAttr('value', (value: string) => {\n                    this.color = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('icon', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.icon')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.iconDescription', {\n                a: m('a', {\n                    href: 'https://fontawesome.com/icons?m=free',\n                    tabindex: -1,\n                }),\n            })),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.icon,\n                oninput: withAttr('value', (value: string) => {\n                    this.icon = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('show-label', m('.Form-group', [\n            m('label', [\n                m('input', {\n                    type: 'checkbox',\n                    checked: this.showLabel,\n                    onchange: () => {\n                        this.showLabel = !this.showLabel;\n                        this.dirty = true;\n                    },\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.showLabel'),\n            ]),\n        ]));\n\n        items.add('show-filter', m('.Form-group', [\n            m('label', [\n                m('input', {\n                    type: 'checkbox',\n                    checked: this.showFilter,\n                    onchange: () => {\n                        this.showFilter = !this.showFilter;\n                        this.dirty = true;\n                    },\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.showFilter'),\n            ]),\n        ]));\n\n        items.add('allow-custom', m('.Form-group', [\n            m('label', [\n                m('input', {\n                    type: 'checkbox',\n                    checked: this.allowCustomValues,\n                    onchange: () => {\n                        this.allowCustomValues = !this.allowCustomValues;\n                        this.dirty = true;\n                    },\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.allowCustomValues'),\n            ]),\n        ]));\n\n        items.add('validation', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.customValueValidation')),\n            Select.component({\n                options: {\n                    '': app.translator.trans(this.translationPrefix() + 'validation-options.default'),\n                    alpha_num: app.translator.trans(this.translationPrefix() + 'validation-options.alpha_num'),\n                    alpha_dash: app.translator.trans(this.translationPrefix() + 'validation-options.alpha_dash'),\n                    regex: app.translator.trans(this.translationPrefix() + 'validation-options.regex'),\n                },\n                value: this.customValueValidation.indexOf('/') === 0 ? 'regex' : this.customValueValidation,\n                onchange: (value: string) => {\n                    this.customValueValidation = value === 'regex' ? '//' : value;\n                    this.dirty = true;\n                },\n                disabled: !this.allowCustomValues,\n            }),\n            this.customValueValidation.indexOf('/') === 0 ? m('.TaxonomyRegexInput', [\n                m('span', '/'),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.customValueValidation.split('/')[1],\n                    oninput: withAttr('value', (value: string) => {\n                        this.customValueValidation = '/' + value + '/' + this.customValueValidation.split('/')[2];\n                        this.dirty = true;\n                    }),\n                    disabled: !this.allowCustomValues,\n                }),\n                m('span', '/'),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.customValueValidation.split('/')[2],\n                    oninput: withAttr('value', (value: string) => {\n                        this.customValueValidation = '/' + this.customValueValidation.split('/')[1] + '/' + value;\n                        this.dirty = true;\n                    }),\n                    disabled: !this.allowCustomValues,\n                }),\n            ]) : null,\n        ]));\n\n        items.add('slugger', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.customValueSlugger')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.customValueSluggerDescription')),\n            Select.component({\n                options: {\n                    random: app.translator.trans(this.translationPrefix() + 'slugger-options.random'),\n                    alpha_dash: app.translator.trans(this.translationPrefix() + 'slugger-options.alpha_dash'),\n                    transliterator: app.translator.trans(this.translationPrefix() + 'slugger-options.transliterator'),\n                },\n                value: this.customValueSlugger,\n                onchange: (value: string) => {\n                    this.customValueSlugger = value;\n                    this.dirty = true;\n                },\n                disabled: !this.allowCustomValues,\n            }),\n        ]));\n\n        items.add('field-counts', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.countRequired')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.countRequiredDescription')),\n            m('.TaxonomyModal-rangeInput', [\n                m('input.FormControl', {\n                    type: 'number',\n                    min: 0,\n                    step: 1,\n                    value: this.minTerms,\n                    oninput: withAttr('value', (value: string) => {\n                        this.minTerms = parseInt(value) || '';\n                        this.dirty = true;\n                    }),\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.rangeSeparatorText'),\n                ' ',\n                m('input.FormControl', {\n                    type: 'number',\n                    min: 0,\n                    step: 1,\n                    value: this.maxTerms,\n                    oninput: withAttr('value', (value: string) => {\n                        this.maxTerms = parseInt(value) || '';\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n        ]));\n\n        return items;\n    }\n\n    ondelete() {\n        if (!confirm(extractText(app.translator.trans(this.translationPrefix() + 'deleteConfirmation', {\n            name: this.attrs.taxonomy.name(),\n        })))) {\n            return;\n        }\n\n        this.loading = true;\n\n        this.attrs.taxonomy.delete({\n            errorHandler: this.onerror.bind(this),\n        }).then(() => {\n            app.modal.close();\n\n            if (this.attrs.ondelete) {\n                this.attrs.ondelete();\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n\n    // @ts-ignore wrong Modal.obsubmit typings in Flarum\n    onsubmit(event: Event) {\n        event.preventDefault();\n\n        this.loading = true;\n\n        const record: Taxonomy = this.attrs.taxonomy || app.store.createRecord('flamarkt-taxonomies');\n\n        record.save({\n            type: this.type,\n            name: this.name,\n            slug: this.slug,\n            description: this.description,\n            color: this.color,\n            icon: this.icon,\n            show_label: this.showLabel,\n            show_filter: this.showFilter,\n            allow_custom_values: this.allowCustomValues,\n            custom_value_validation: this.customValueValidation,\n            custom_value_slugger: this.customValueSlugger,\n            min_terms: this.minTerms,\n            max_terms: this.maxTerms,\n        }, {\n            errorHandler: this.onerror.bind(this),\n        }).then(record => {\n            app.modal.close();\n\n            if (this.attrs.onsave) {\n                this.attrs.onsave(record);\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n}\n","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport extractText from 'flarum/common/utils/extractText';\nimport {slug} from 'flarum/common/utils/string';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport AbstractEditModal, {AbstractEditModalAttrs} from './AbstractEditModal';\nimport Term from '../../common/models/Term';\nimport Taxonomy from '../../common/models/Taxonomy';\n\ninterface EditTermModalAttrs extends AbstractEditModalAttrs {\n    term: Term\n    taxonomy: Taxonomy\n    onsave?: (term: Term) => void\n    ondelete?: () => void\n}\n\nexport default class EditTermModal extends AbstractEditModal<EditTermModalAttrs> {\n    name!: string\n    slug!: string\n    description!: string\n    color!: string\n    icon!: string\n\n    oninit(vnode: Vnode<EditTermModalAttrs, this>) {\n        super.oninit(vnode);\n\n        const {term} = this.attrs;\n\n        this.name = term ? term.name() : '';\n        this.slug = term ? term.slug() : '';\n        this.description = term ? term.description() : '';\n        this.color = term ? term.color() : '';\n        this.icon = term ? term.icon() : '';\n    }\n\n    translationPrefix() {\n        return 'flamarkt-taxonomies.admin.edit-term.';\n    }\n\n    isNew() {\n        return !this.attrs.term;\n    }\n\n    form(): any {\n        return this.formItems().toArray();\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('name', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.name')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.name,\n                oninput: withAttr('value', (value: string) => {\n                    this.name = value;\n                    this.slug = slug(value);\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('slug', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.slug')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.slug,\n                oninput: withAttr('value', (value: string) => {\n                    this.slug = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('description', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.description')),\n            m('textarea.FormControl', {\n                value: this.description,\n                oninput: withAttr('value', (value: string) => {\n                    this.description = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('color', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.color')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.color,\n                oninput: withAttr('value', (value: string) => {\n                    this.color = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('icon', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.icon')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.iconDescription', {\n                a: m('a', {\n                    href: 'https://fontawesome.com/icons?m=free',\n                    tabindex: -1,\n                }),\n            })),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.icon,\n                oninput: withAttr('value', (value: string) => {\n                    this.icon = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        return items;\n    }\n\n    ondelete() {\n        if (!confirm(extractText(app.translator.trans(this.translationPrefix() + 'deleteConfirmation', {\n            name: this.attrs.term.name(),\n        })))) {\n            return;\n        }\n\n        this.loading = true;\n\n        this.attrs.term.delete({\n            errorHandler: this.onerror.bind(this),\n        }).then(() => {\n            app.modal.close();\n\n            if (this.attrs.ondelete) {\n                this.attrs.ondelete();\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n\n    // @ts-ignore wrong Modal.obsubmit typings in Flarum\n    onsubmit(event: Event) {\n        event.preventDefault();\n\n        this.loading = true;\n\n        const record: Term = this.attrs.term || app.store.createRecord('flamarkt-taxonomy-terms');\n\n        const options: any = {\n            errorHandler: this.onerror.bind(this),\n        };\n\n        if (this.isNew()) {\n            options.url = app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiTermsEndpoint();\n        }\n\n        record.save({\n            name: this.name,\n            slug: this.slug,\n            description: this.description,\n            color: this.color,\n            icon: this.icon,\n        }, options).then(record => {\n            app.modal.close();\n\n            if (this.attrs.onsave) {\n                this.attrs.onsave(record);\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n}\n","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport Component, {ComponentAttrs} from 'flarum/common/Component';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Sortable from 'flamarkt/backoffice/common/components/Sortable';\nimport sortTerms from '../../common/utils/sortTerms';\nimport EditTermModal from './EditTermModal';\nimport taxonomyIcon from '../../common/helpers/taxonomyIcon';\nimport Term from '../../common/models/Term';\nimport Taxonomy from '../../common/models/Taxonomy';\n\ninterface TaxonomyTermsListAttrs extends ComponentAttrs {\n    taxonomy: Taxonomy\n}\n\nexport default class TaxonomyTermsList extends Component<TaxonomyTermsListAttrs> {\n    terms: Term[] | null = null\n\n    oninit(vnode: Vnode<TaxonomyTermsListAttrs, this>) {\n        super.oninit(vnode);\n\n        app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiTermsEndpoint(),\n        }).then(result => {\n            this.terms = app.store.pushPayload<Term[]>(result);\n            m.redraw();\n        });\n    }\n\n    view() {\n        return m('.TaxonomyTermEdit', [\n            this.terms === null ? LoadingIndicator.component({}) : this.viewTerms(this.terms),\n        ]);\n    }\n\n    viewTerms(terms: Term[]) {\n        return [\n            m(Sortable, {\n                containerTag: 'ol',\n                className: 'TaxonomyTermList',\n                handleClassName: null,\n                onsort: (origin: number, destination: number) => {\n                    terms.splice(destination, 0, ...terms.splice(origin, 1));\n\n                    app.request<ApiPayloadPlural>({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiOrderEndpoint(),\n                        body: {\n                            order: terms.map(term => term.id()),\n                        },\n                    }).then(result => {\n                        // If there's no error, we save the new order so it can be used in case a redraw is triggered\n                        app.store.pushPayload(result);\n                    }).catch(e => {\n                        // If there's an error, we force a full redraw to make sure the user sees what is saved\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, terms.map((term, index) => m('li.TaxonomyTermListItem', {\n                draggable: true,\n                key: term.id(),\n                style: {\n                    color: term.color(),\n                },\n            }, [\n                taxonomyIcon(term),\n                m('span.TaxonomyTermListItem-name', term.name()),\n                Button.component({\n                    className: 'Button Button--link',\n                    icon: 'fas fa-pencil-alt',\n                    onclick: () => {\n                        app.modal.show(EditTermModal, {\n                            term,\n                            ondelete: () => {\n                                terms.splice(index, 1);\n                            },\n                        });\n                    },\n                }),\n            ]))),\n            Button.component({\n                className: 'Button',\n                onclick: () => {\n                    app.modal.show(EditTermModal, {\n                        taxonomy: this.attrs.taxonomy,\n                        onsave: (term: Term) => {\n                            this.terms = sortTerms([...terms, term]);\n                        },\n                    });\n                },\n            }, app.translator.trans('flamarkt-taxonomies.admin.page.create.term')),\n            ' ',\n            Button.component({\n                className: 'Button',\n                onclick: () => {\n                    app.request<ApiPayloadPlural>({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiOrderEndpoint(),\n                        body: {\n                            order: [],\n                        },\n                    }).then(result => {\n                        this.terms = app.store.pushPayload<Term[]>(result);\n                        m.redraw();\n                    }).catch(e => {\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, app.translator.trans('flamarkt-taxonomies.admin.page.reset-term-order')),\n        ];\n    }\n}\n","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport {ComponentAttrs} from 'flarum/common/Component';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Page from 'flarum/common/components/Page';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Sortable from 'flamarkt/backoffice/common/components/Sortable';\nimport sortTaxonomies from '../../common/utils/sortTaxonomies';\nimport TaxonomyTermsList from './TaxonomyTermsList';\nimport EditTaxonomyModal from './EditTaxonomyModal';\nimport taxonomyIcon from '../../common/helpers/taxonomyIcon';\nimport Taxonomy from \"../../common/models/Taxonomy\";\n\nexport default class TaxonomiesPage extends Page {\n    tabIndex: number = 0;\n    taxonomies: Taxonomy[] | null = null;\n\n    oninit(vnode: Vnode<ComponentAttrs, this>) {\n        super.oninit(vnode);\n\n        app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + '/flamarkt/taxonomies',\n        }).then(result => {\n            this.taxonomies = app.store.pushPayload<Taxonomy[]>(result);\n            m.redraw();\n        });\n    }\n\n    view() {\n        return m('.TaxonomiesPage', m('.container', [\n            this.taxonomies === null ? LoadingIndicator.component({}) : this.viewTaxonomies(this.taxonomies),\n        ]));\n    }\n\n    viewTaxonomies(taxonomies: Taxonomy[]) {\n        return [\n            m('h2', app.translator.trans('flamarkt-taxonomies.admin.page.title')),\n            m(Sortable, {\n                className: 'TaxonomyTabs',\n                direction: 'horizontal',\n                handleClassName: null,\n                onsort: (origin: number, destination: number) => {\n                    taxonomies.splice(destination, 0, ...taxonomies.splice(origin, 1));\n\n                    app.request<ApiPayloadPlural>({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + '/flamarkt/taxonomies/order',\n                        body: {\n                            order: taxonomies.map(taxonomy => taxonomy.id()),\n                        },\n                    }).then(result => {\n                        this.taxonomies = app.store.pushPayload<Taxonomy[]>(result);\n                        this.tabIndex = 0;\n                    }).catch(e => {\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, [\n                ...taxonomies.map((taxonomy, index) => m('.TaxonomyTab', {\n                    draggable: true,\n                    key: taxonomy.id(),\n                    onclick: () => {\n                        this.tabIndex = index;\n                    },\n                    className: this.tabIndex === index ? 'active' : '',\n                    style: {\n                        color: taxonomy.color(),\n                    },\n                }, [\n                    taxonomyIcon(taxonomy),\n                    ' ',\n                    taxonomy.name(),\n                    ' ',\n                    Button.component({\n                        className: 'Button Button--link',\n                        icon: 'fas fa-pencil-alt',\n                        onclick: () => {\n                            app.modal.show(EditTaxonomyModal, {\n                                taxonomy,\n                                ondelete: () => {\n                                    taxonomies.splice(index, 1);\n                                    this.tabIndex = 0;\n                                },\n                            });\n                        },\n                    }),\n                ])),\n                Button.component({\n                    key: 'new',\n                    className: 'TaxonomyTab',\n                    icon: 'fas fa-plus',\n                    onclick: () => {\n                        app.modal.show(EditTaxonomyModal, {\n                            onsave: (taxonomy: Taxonomy) => {\n                                this.taxonomies = sortTaxonomies([...taxonomies, taxonomy]);\n                                this.tabIndex = this.taxonomies.findIndex(t => t === taxonomy);\n                            },\n                        });\n                    },\n                }, app.translator.trans('flamarkt-taxonomies.admin.page.create.taxonomy')),\n            ]),\n            // Nested DIVs to use key to force a redraw of the list\n            this.tabIndex < taxonomies.length ? m('div', m('div', {\n                key: taxonomies[this.tabIndex].id(),\n            }, TaxonomyTermsList.component({\n                taxonomy: taxonomies[this.tabIndex],\n            }))) : null,\n        ];\n    }\n}\n","import AbstractEditModal from './components/AbstractEditModal';\nimport EditTaxonomyModal from './components/EditTaxonomyModal';\nimport EditTermModal from './components/EditTermModal';\nimport TaxonomiesPage from './components/TaxonomiesPage';\nimport TaxonomyTermsList from './components/TaxonomyTermsList';\n\nexport const backoffice = {\n    'components/AbstractEditModal': AbstractEditModal,\n    'components/EditTaxonomyModal': EditTaxonomyModal,\n    'components/EditTermModal': EditTermModal,\n    'components/TaxonomiesPage': TaxonomiesPage,\n    'components/TaxonomyTermsList': TaxonomyTermsList,\n}\n","import app from 'flamarkt/backoffice/backoffice/app';\nimport {common} from '../common/compat';\nimport {backoffice} from './compat';\nimport BackofficeNav from 'flamarkt/backoffice/backoffice/components/BackofficeNav';\nimport ProductShowPage from 'flamarkt/core/backoffice/pages/ProductShowPage';\nimport {extend} from 'flarum/common/extend';\nimport LinkButton from 'flarum/common/components/LinkButton';\nimport TaxonomiesPage from './components/TaxonomiesPage';\nimport addModels from '../common/addModels';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport ChooseTaxonomyTermsDropdown from '../common/components/ChooseTaxonomyTermsDropdown';\n\nexport {\n    common,\n    backoffice,\n};\n\napp.initializers.add('flamarkt-taxonomies', () => {\n    addModels();\n\n    app.routes.taxonomies = {\n        path: '/taxonomies',\n        component: TaxonomiesPage,\n    };\n\n    app.extensionData.for('flamarkt-taxonomies').registerSetting(() => {\n        return m('.Form-group', LinkButton.component({\n            className: 'Button',\n            href: app.route('taxonomies'),\n        }, app.translator.trans('flamarkt-taxonomies.admin.settings.goToPage')));\n    });\n\n    extend(BackofficeNav.prototype, 'items', function (items) {\n        items.add('taxonomies', LinkButton.component({\n            href: app.route('taxonomies'),\n            icon: 'fas fa-tags',\n        }, app.translator.trans('flamarkt-taxonomies.admin.menu.title')));\n    });\n\n    if (ProductShowPage) {\n        extend(ProductShowPage.prototype, 'fields', function (items) {\n            if (!this.product.exists || !this.product.attribute('canEditTaxonomies')) {\n                return;\n            }\n\n            sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n                if (taxonomy.type() !== 'products') {\n                    return;\n                }\n\n                items.add('taxonomy-' + taxonomy.slug(), m('.Form-group', [\n                    m('label', taxonomy.name()),\n                    m(ChooseTaxonomyTermsDropdown, {\n                        resource: this.product,\n                        taxonomy,\n                    }),\n                ]), -100);\n            });\n        });\n    }\n});\n"],"sourceRoot":""}