{"version":3,"sources":["webpack://@flamarkt/taxonomies/webpack/bootstrap","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/Model']\"","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/extend']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/Button']\"","webpack://@flamarkt/taxonomies/./src/common/utils/sortTaxonomies.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/withAttr']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@flamarkt/taxonomies/./src/common/helpers/taxonomyIcon.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/extract']\"","webpack://@flamarkt/taxonomies/./src/common/utils/KeyboardNavigatable.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsModal.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/extractText']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/classList']\"","webpack://@flamarkt/taxonomies/./src/common/models/Term.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/termLabel.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/helpers/icon']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/Modal']\"","webpack://@flamarkt/taxonomies/./src/common/utils/termToIdentifier.ts","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/ItemList']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/LinkButton']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/Component']\"","webpack://@flamarkt/taxonomies/./src/common/utils/sortTerms.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/models/Discussion']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/models/Forum']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/models/User']\"","webpack://@flamarkt/taxonomies/external \"flarum.extensions['flamarkt-core']['common']['models/Product']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/helpers/highlight']\"","webpack://@flamarkt/taxonomies/./src/common/models/Taxonomy.ts","webpack://@flamarkt/taxonomies/./src/common/addModels.ts","webpack://@flamarkt/taxonomies/external \"flarum.extensions['flamarkt-core']['common']['components/Sortable']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/string']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/Select']\"","webpack://@flamarkt/taxonomies/external \"flarum.extensions['flamarkt-core']['backoffice']['components/BackofficeNav']\"","webpack://@flamarkt/taxonomies/external \"flarum.extensions['flamarkt-core']['backoffice']['pages/ProductShowPage']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/Page']\"","webpack://@flamarkt/taxonomies/./src/backoffice/components/AbstractEditModal.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/EditTermModal.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/TaxonomyTermsList.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/EditTaxonomyModal.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/TaxonomiesPage.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsDropdown.ts","webpack://@flamarkt/taxonomies/./src/backoffice/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_setPrototypeOf","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","constructor","taxonomies","slice","sort","a","b","order","taxonomyIcon","term","attrs","settings","hasIcon","icon","useColor","className","classList","style","color","backgroundColor","KeyboardNavigatable","callbacks","Map","whenCallback","event","onUp","callback","this","set","e","preventDefault","onDown","onSelect","handler","onCancel","stopPropagation","onRemove","target","selectionStart","selectionEnd","when","bindTo","$element","on","navigate","keyCallback","which","ChooseTaxonomyTermsModal","availableTerms","selectedTerms","searchFilter","activeListIndex","inputIsFocused","saving","navigator","oninit","vnode","forEach","addTerm","resource","taxonomyTerms","taxonomy","id","app","request","method","url","forum","attribute","apiEndpoint","then","result","store","pushPayload","redraw","setIndex","select","length","toggleTerm","indexInSelectedTerms","findIndex","data","type","push","removeTerm","index","splice","title","translator","trans","displayName","getInstruction","count","minTerms","remaining","filteredAvailableTerms","filter","toLowerCase","substr","allowCustomValues","some","validation","customValueValidation","regex","indexOf","parts","split","RegExp","test","createRecord","attributes","maxTerms","content","viewForm","listAvailableTerms","description","formItems","toArray","items","ItemList","add","inputItems","Button","component","disabled","loading","map","onclick","onready","termLabel","placeholder","extractText","oninput","onkeydown","onfocus","oninputfocus","onblur","oninputblur","terms","LoadingIndicator","listAvailableTerm","colored","selected","active","onmouseover","exists","highlight","setTimeout","getDomElement","metaKey","ctrlKey","is","onsubmit","dispatchEvent","Event","$","scrollToItem","$dropdown","indexLength","$item","scrollTop","dropdownScroll","dropdownTop","offset","top","dropdownBottom","outerHeight","itemTop","itemBottom","parseInt","css","stop","animate","saveResource","modal","close","save","relationships","verbatim","termToIdentifier","onsaved","onerror","DiscussionPage","current","matches","update","Modal","Term","Model","slug","createdAt","transformDate","hasOne","discussionLink","extract","userLink","tagText","tag","showFilter","href","route","config","routes","fof_user_directory","q","getIdentifier","_extends","assign","arguments","source","apply","extensions","Taxonomy","showLabel","customValueSlugger","canSearch","apiOrderEndpoint","apiTermsEndpoint","models","Forum","hasMany","Discussion","User","Product","AbstractEditModal","dirty","translationPrefix","isNew","form","ondelete","EditTermModal","withAttr","tabindex","confirm","errorHandler","loaded","record","options","onsave","TaxonomyTermsList","view","viewTerms","Sortable","containerTag","handleClassName","onsort","origin","destination","body","draggable","show","sortTerms","Component","EditTaxonomyModal","Select","products","discussions","users","onchange","checked","alpha_num","alpha_dash","random","transliterator","min","step","show_label","show_filter","allow_custom_values","custom_value_validation","custom_value_slugger","min_terms","max_terms","TaxonomiesPage","tabIndex","viewTaxonomies","direction","sortTaxonomies","Page","ChooseTaxonomyTermsDropdown","lastSaveState","dropdownIsFocused","onmousedown","oncreate","element","dom","dropdown","querySelector","contains","document","addEventListener","onbeforeremove","onremove","removeEventListener","remove","status","initializers","addModels","path","extend","BackofficeNav","LinkButton","ProductShowPage","product"],"mappings":"2BACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,I,gBClFrDhC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,iB,6BCArB,SAASC,EAAgB1B,EAAGqB,GAMzC,OALAK,EAAkBzB,OAAO0B,gBAAkB,SAAyB3B,EAAGqB,GAErE,OADArB,EAAE4B,UAAYP,EACPrB,IAGcA,EAAGqB,GCLb,SAASQ,EAAeC,EAAUC,GAC/CD,EAASX,UAAYlB,OAAOY,OAAOkB,EAAWZ,WAC9CW,EAASX,UAAUa,YAAcF,EACjCH,EAAeG,EAAUC,G,iDCJ3BzC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,kB,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,6B,6BCErB,aAAUQ,GAMrB,OAJmB,IAAfA,IACAA,EAAa,IAGVA,EAAWC,MAAM,GAAGC,MAAK,SAACC,EAAGC,GAChC,IAAMC,EAAQF,EAAEE,QAAUD,EAAEC,QAE5B,OAAc,IAAVA,EACOA,EAGPF,EAAEtC,OAASuC,EAAEvC,OACN,EAGPsC,EAAEtC,OAASuC,EAAEvC,QACL,EAGL,O,cCvBfR,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,0B,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,uC,6BCApC,uDASe,SAASc,EAAaC,EAAuBC,EAAwBC,QAAyB,IAAjDD,MAAoB,SAA6B,IAAzBC,MAAqB,IACrG,IAAMC,EAAUH,GAAQA,EAAKI,OAC7B,EAA0BF,EAAnBG,gBAAP,SAoBA,OAlBAJ,EAAMK,UAAYC,IAAU,CACxBN,EAAMK,UACN,OACAH,EAAUH,EAAKI,OAAS,iBAGxBJ,GACAC,EAAMO,MAAQP,EAAMO,OAAS,GAEzBL,EACAF,EAAMO,MAAMC,MAAQJ,EAAWL,EAAKS,QAAU,GAE9CR,EAAMO,MAAME,gBAAkBV,EAAKS,SAGvCR,EAAMK,WAAa,YAGhBH,EAAUhD,EAAE,IAAK8C,GAAS9C,EAAE,OAAQ8C,K,cC/B/CnD,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,yB,uOCMf0B,E,6BAIPC,UAAY,IAAIC,I,KAMhBC,aAA6B,SAACC,GAAD,OAA0B,G,2BAOjEC,KAAA,SAAKC,GAMD,OALAC,KAAKN,UAAUO,IAAI,IAAI,SAACC,GACpBA,EAAEC,iBACFJ,EAASG,MAGNF,M,EAQXI,OAAA,SAAOL,GAMH,OALAC,KAAKN,UAAUO,IAAI,IAAI,SAACC,GACpBA,EAAEC,iBACFJ,EAASG,MAGNF,M,EAQXK,SAAA,SAASN,GACL,IAAMO,EAAgC,SAACJ,GACnCA,EAAEC,iBACFJ,EAASG,IAMb,OAHAF,KAAKN,UAAUO,IAAI,EAAGK,GACtBN,KAAKN,UAAUO,IAAI,GAAIK,GAEhBN,M,EAQXO,SAAA,SAASR,GAOL,OANAC,KAAKN,UAAUO,IAAI,IAAI,SAACC,GACpBA,EAAEM,kBACFN,EAAEC,iBACFJ,EAASG,MAGNF,M,EAYXS,SAAA,SAASV,GAQL,OAPAC,KAAKN,UAAUO,IAAI,GAAG,SAACC,GACa,IAA5BA,EAAEQ,OAAOC,gBAAkD,IAA1BT,EAAEQ,OAAOE,eAC1Cb,EAASG,GACTA,EAAEC,qBAIHH,M,EAMXa,KAAA,SAAKd,GAGD,OAFAC,KAAKJ,aAAeG,EAEbC,M,EAMXc,OAAA,SAAOC,GAEHA,EAASC,GAAG,UAAWhB,KAAKiB,SAAS5D,KAAK2C,Q,EAM9CiB,SAAA,SAASpB,GAEL,GAAKG,KAAKJ,aAAaC,GAAvB,CAEA,IAAMqB,EAAclB,KAAKN,UAAUhD,IAAImD,EAAMsB,OACzCD,GACAA,EAAYrB,K,SCxEHuB,E,oJACjBC,eAAgC,K,EAChCC,cAAwB,G,EACxBC,aAAuB,G,EACvBC,gBAA0B,E,EAC1BC,gBAA0B,E,EAC1BC,QAAkB,E,EAClBC,e,IAEA5C,W,gDAEA6C,OAAA,SAAOC,GAAmD,WACtD,YAAMD,OAAN,UAAaC,GAET7B,KAAKjB,MAAMuC,cACXtB,KAAKjB,MAAMuC,cAAcQ,QAAQ9B,KAAK+B,QAAQ1E,KAAK2C,OAC5CA,KAAKjB,MAAMiD,UAClBhC,KAAKjB,MAAMiD,SAASC,gBAAgBH,SAAQ,SAAChD,GACrCA,EAAKoD,WAAWC,OAAS,EAAKpD,MAAMmD,SAASC,MAC7C,EAAKJ,QAAQjD,MAKzBsD,IAAIC,QAAQ,CACRC,OAAQ,MACRC,IAAKH,IAAII,MAAMC,UAAU,UAAYzC,KAAKjB,MAAMmD,SAASQ,cAAgB,WAC1EC,MAAK,SAAAC,GACJ,EAAKvB,eAAiBe,IAAIS,MAAMC,YAAYF,GAE5C3G,EAAE8G,YAGN/C,KAAK2B,UAAY,IAAIlC,EACrBO,KAAK2B,UACA7B,MAAK,kBAAM,EAAKkD,SAAS,EAAKxB,gBAAkB,GAAG,MACnDpB,QAAO,kBAAM,EAAK4C,SAAS,EAAKxB,gBAAkB,GAAG,MACrDnB,SAASL,KAAKiD,OAAO5F,KAAK2C,OAC1BS,UAAS,WACD,EAAKa,cAAc4B,QAIxB,EAAKC,WAAW,EAAK7B,cAAc,EAAKA,cAAc4B,OAAS,OAElErC,MAAK,SAAAhB,GAIF,MAAkB,MAAdA,EAAMzC,KAAqC,KAAtB,EAAKmE,eAC1B1B,EAAMM,iBACN,EAAK8C,OAAOpD,IAEL,O,EAOvBuD,qBAAA,SAAqBtE,GACjB,OAAOkB,KAAKsB,cAAc+B,WAAU,SAAAtG,GAAC,OA1FhB4B,EA0FkCG,GA1F3CJ,EA0FwC3B,GAzFlDuG,KAAKC,OAAS5E,EAAE2E,KAAKC,OAKvB7E,EAAEyD,MAAQxD,EAAEwD,KACLzD,EAAEyD,OAASxD,EAAEwD,MAInBzD,EAAEyD,OAAUxD,EAAEwD,MAKZzD,EAAEtC,SAAWuC,EAAEvC,QAhB1B,IAAoBsC,EAASC,M,EA6FzBoD,QAAA,SAAQjD,GACJkB,KAAKsB,cAAckC,KAAK1E,I,EAG5B2E,WAAA,SAAW3E,GACP,IAAM4E,EAAQ1D,KAAKoD,qBAAqBtE,IAEzB,IAAX4E,GACA1D,KAAKsB,cAAcqC,OAAOD,EAAO,I,EAIzCtE,UAAA,WACI,MAAO,4B,EAGXwE,MAAA,WACI,OAAO5D,KAAKjB,MAAMiD,SACZI,IAAIyB,WAAWC,MAAM,2CAA4C,CAC/D5B,SAAUlC,KAAKjB,MAAMmD,SAAS9F,OAC9BwH,MAAO3H,EAAE,KAAM+D,KAAKjB,MAAMiD,SAAS4B,MAAQ5D,KAAKjB,MAAMiD,SAAS4B,QAAU5D,KAAKjB,MAAMiD,SAAS+B,iBAE/F3B,IAAIyB,WAAWC,MAAM,0CAA2C,CAC9D5B,SAAUlC,KAAKjB,MAAMmD,SAAS9F,U,EAI1C4H,eAAA,WACI,IAAMC,EAAQjE,KAAKsB,cAAc4B,OAEjC,GAAIlD,KAAKjB,MAAMmD,SAASgC,YAAcD,EAAQjE,KAAKjB,MAAMmD,SAASgC,WAAY,CAC1E,IAAMC,EAAYnE,KAAKjB,MAAMmD,SAASgC,WAAaD,EACnD,OAAO7B,IAAIyB,WAAWC,MAAM,4CAA6C,CACrEG,MAAOE,IAER,OAAc,IAAVF,EACA7B,IAAIyB,WAAWC,MAAM,qDAGzB,I,EAGXM,uBAAA,WACI,IAAI/C,EAAyC,OAAxBrB,KAAKqB,eAA0B,GAAKrB,KAAKqB,eACxDgD,EAASrE,KAAKuB,aAAa+C,cAEjC,GAAID,IACAhD,EAAiBA,EAAegD,QAAO,SAAAvF,GAAI,OAAIA,EAAK1C,OAAOmI,OAAO,EAAGF,EAAOnB,QAAQoB,gBAAkBD,KAGlGrE,KAAKjB,MAAMmD,SAASsC,sBACnBnD,EAAeoD,MAAK,SAAA3F,GAAI,OAAIA,EAAK1C,OAAOkI,gBAAkBD,MAC7D,CACE,IAAMK,EAAa1E,KAAKjB,MAAMmD,SAASyC,wBACnCC,EAAuB,KAE3B,GAAmB,cAAfF,EACAE,EAAQ,mBACL,GAAmB,eAAfF,EACPE,EAAQ,qBACL,GAAgC,IAA5BF,EAAWG,QAAQ,KAAY,CACtC,IAAMC,EAAQJ,EAAWK,MAAM,KACV,IAAjBD,EAAM5B,SACN0B,EAAQ,IAAII,OAAOF,EAAM,GAAIA,EAAM,KAItCF,IAASA,EAAMK,KAAKjF,KAAKuB,eAC1BF,EAAemC,KAAKpB,IAAIS,MAAMqC,aAAa,0BAA2B,CAClEC,WAAY,CACR/I,KAAM4D,KAAKuB,iBAW/B,OAJIvB,KAAKjB,MAAMmD,SAASkD,YAAcpF,KAAKsB,cAAc4B,QAAUlD,KAAKjB,MAAMmD,SAASkD,aACnF/D,EAAiB,IAGdA,G,EAGXgE,QAAA,WACI,MAAO,CACHrF,KAAKsF,WACLtF,KAAKuF,mBAAmBvF,KAAKoE,4B,EAIrCkB,SAAA,WACI,IAAME,EAAcxF,KAAKjB,MAAMmD,SAASsD,cAExC,OAAOvJ,EAAE,cAAe,CACpBuJ,EAAcvJ,EAAE,IAAKuJ,GAAe,KACpCvJ,EAAE,iCAAkC+D,KAAKyF,YAAYC,c,EAI7DD,UAAA,WACI,IAAME,EAAQ,IAAIC,IAclB,OAZAD,EAAME,IAAI,QAAS5J,EAAE,uCAAwCA,EAAE,0BAA2B,CACtFmD,UAAWY,KAAKyB,eAAiB,QAAU,IAC5CzB,KAAK8F,aAAaJ,YAAa,IAElCC,EAAME,IAAI,SAAU5J,EAAE,2DAA4D8J,IAAOC,UAAU,CAC/FzC,KAAM,SACNnE,UAAW,yBACX6G,SAAUjG,KAAKjB,MAAMmD,SAASgC,YAAclE,KAAKsB,cAAc4B,OAASlD,KAAKjB,MAAMmD,SAASgC,WAC5FhF,KAAM,eACNgH,QAASlG,KAAK0B,QACfU,IAAIyB,WAAWC,MAAM,0CAA2C,IAE5D6B,G,EAGXG,WAAA,WAAa,WACHH,EAAQ,IAAIC,IAwBlB,OAtBAD,EAAME,IAAI,WAAY7F,KAAKsB,cAAc6E,KAAI,SAAArH,GACzC,OAAO7C,EAAE,uBAAwB,CAC7BmK,QAAS,WACL,EAAKjD,WAAWrE,GAChB,EAAKuH,YAEVC,YAAUxH,OACb,IAEJ6G,EAAME,IAAI,UAAW5J,EAAE,oBAAqB,CACxCsK,YAAaC,IAAYxG,KAAKgE,kBAC9BlH,MAAOkD,KAAKuB,aACZkF,QAAS,SAAC5G,GACN,EAAK0B,aAAgB1B,EAAMa,OAA4B5D,MACvD,EAAK0E,gBAAkB,GAE3BkF,UAAW1G,KAAK2B,UAAUV,SAAS5D,KAAK2C,KAAK2B,WAE7CgF,QAAS3G,KAAK4G,aAAavJ,KAAK2C,MAChC6G,OAAQ7G,KAAK8G,YAAYzJ,KAAK2C,QAC9B,IAEG2F,G,EAGXiB,aAAA,WACI5G,KAAKyB,gBAAiB,G,EAG1BqF,YAAA,WACI9G,KAAKyB,gBAAiB,G,EAG1B8D,mBAAA,SAAmBwB,GACf,OAAO9K,EAAE,gBAAyC,OAAxB+D,KAAKqB,eAC3B2F,IAAiBhB,YACjB/J,EAAE,kDAAmD,CACjDmD,UAAW2H,EAAMtC,MAAK,SAAA3F,GAAI,OAAIA,EAAK0G,iBAAiB,oCAAsC,IAC3FuB,EAAMZ,IAAInG,KAAKiH,kBAAkB5J,KAAK2C,U,EAIjDiH,kBAAA,SAAkBnI,EAAY4E,GAAe,WACzC,OAAOzH,EAAE,wBAAyB,CAC9B,aAAcyH,EACdtE,UAAWC,IAAU,CACjB6H,UAAWpI,EAAKS,QAChB4H,UAA+C,IAArCnH,KAAKoD,qBAAqBtE,GACpCsI,OAAQpH,KAAKwB,kBAAoBkC,IAErCpE,MAAO,CAACC,MAAOT,EAAKS,SACpB8H,YAAa,kBAAM,EAAK7F,gBAAkBkC,GAC1C0C,QAASpG,KAAKmD,WAAW9F,KAAK2C,KAAMlB,IACrC,CACCD,YAAaC,GACb7C,EAAE,+BAAgC6C,EAAKwI,OAASC,IAAUzI,EAAK1C,OAAQ4D,KAAKuB,cAAgBa,IAAIyB,WAAWC,MAAM,uCAAwC,CACrJhH,MAAOb,EAAE,KAAM6C,EAAK1C,WAExB0C,EAAK0G,cAAgBvJ,EAAE,sCAAuC6C,EAAK0G,eAAiB,M,EAI5FrC,WAAA,SAAWrE,GAAY,YAGJ,IAFDkB,KAAKoD,qBAAqBtE,GAGpCkB,KAAKyD,WAAW3E,GAEhBkB,KAAK+B,QAAQjD,GAGbkB,KAAKuB,eACLvB,KAAKuB,aAAe,GACpBvB,KAAKwB,gBAAkB,GAI3BgG,YAAW,WACP,EAAKnB,c,EAIbpD,OAAA,SAAO/C,GACH,IAAMa,EAAWf,KAAKyH,cAAczH,KAAKwB,iBAKpCT,EAASmC,OAMVhD,EAAEwH,SAAWxH,EAAEyH,SAAW5G,EAAS6G,GAAG,aAClC5H,KAAKsB,cAAc4B,QAEnBlD,KAAK6H,WAGT9G,EAAS,GAAG+G,cAAc,IAAIC,MAAM,UAXpC/H,KAAKuB,aAAe,I,EAe5BkG,cAAA,SAAc/D,GACV,OAAO1D,KAAKgI,EAAL,mCAA0CtE,EAA1C,O,EAGXV,SAAA,SAASU,EAAeuE,GACpB,IAAMC,EAAYlI,KAAKgI,EAAE,kCAEnBG,EAAcnI,KAAKgI,EAAE,uBAAuB9E,OAE9CQ,EAAQ,EACRA,EAAQyE,EAAc,EACfzE,GAASyE,IAChBzE,EAAQ,GAGZ,IAAM0E,EAAQpI,KAAKyH,cAAc/D,GAKjC,GAJA1D,KAAKwB,gBAAkBkC,EAEvBzH,EAAE8G,SAEEkF,EAAc,SAOVI,EANEC,EAAiBJ,EAAUG,aAAe,EAC1CE,GAAc,SAAAL,EAAUM,eAAV,IAAoBC,MAAO,EACzCC,EAAiBH,GAAeL,EAAUS,eAAiB,GAC3DC,GAAU,SAAAR,EAAMI,eAAN,IAAgBC,MAAO,EACjCI,EAAaD,GAAWR,EAAMO,eAAiB,GAGjDC,EAAUL,EACVF,EAAYC,EAAiBC,EAAcK,EAAUE,SAASZ,EAAUa,IAAI,eAAgB,IACrFF,EAAaH,IACpBL,EAAYC,EAAiBI,EAAiBG,EAAaC,SAASZ,EAAUa,IAAI,kBAAmB,UAGhF,IAAdV,GACPH,EAAUc,MAAK,GAAMC,QAAQ,CAACZ,aAAY,O,EAKtDR,SAAA,SAAShI,GACDA,GACAA,EAAMM,iBAGNH,KAAKjB,MAAMiD,SACXhC,KAAKkJ,gBAMLlJ,KAAKjB,MAAM8I,UAAU7H,KAAKjB,MAAM8I,SAAS7H,KAAKsB,eAElDc,IAAI+G,MAAMC,U,EAGdF,aAAA,WACIlJ,KAAK0B,QAAS,EAEd1B,KAAKjB,MAAMiD,SAASqH,KAAK,CACrBC,cAAe,CACX/K,WAAY,CACR,CACIgL,UAAU,EACVhG,KAAM,sBACNpB,GAAInC,KAAKjB,MAAMmD,SAASC,KACxBmH,cAAe,CACXvC,MAAO,CACHzD,KAAMtD,KAAKsB,cAAc6E,IAAIqD,YAMlD7G,KAAK3C,KAAKyJ,QAAQpM,KAAK2C,MAAOA,KAAK0J,QAAQrM,KAAK2C,Q,EAGvDyJ,QAAA,WAEQE,KAAkBvH,IAAIwH,QAAQC,QAAQF,MACtCvH,IAAIwH,QAAQlN,IAAI,UAAUoN,SAE9B9J,KAAK0B,QAAS,EACdzF,EAAE8G,SAEFX,IAAI+G,MAAMC,S,EAGdM,QAAA,WACI1J,KAAK0B,QAAS,EACdzF,EAAE8G,U,GA5X4CgH,M,cCpDtDnO,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,6B,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,2B,0FCGfiM,E,oJACjB5N,KAAO6N,IAAMxH,UAAU,Q,EACvByH,KAAOD,IAAMxH,UAAU,Q,EACvB+C,YAAcyE,IAAMxH,UAAU,e,EAC9BlD,MAAQ0K,IAAMxH,UAAU,S,EACxBvD,KAAO+K,IAAMxH,UAAU,Q,EACvB7D,MAAQqL,IAAMxH,UAAU,S,EACxB0H,UAAYF,IAAMxH,UAAU,YAAawH,IAAMG,e,EAE/ClI,SAAmC+H,IAAMI,OAAO,Y,sCAEtC3H,YAAV,WACI,MAAO,4BAA8B1C,KAAKsH,OAAS,IAAMtH,KAAKsD,KAAKnB,GAAK,K,GAZ9C8H,M,6BCHlC,qEAMe,SAAS3D,EAAUxH,EAAqCC,QAAwB,IAA7DD,MAA+B,WAA8B,IAAxBC,MAAoB,IACvFA,EAAMO,MAAQP,EAAMO,OAAS,GAC7BP,EAAMK,UAAY,kBAAoBL,EAAMK,WAAa,IAEzD,IAAMkL,EAAiBC,IAAQxL,EAAO,kBAChCyL,EAAWD,IAAQxL,EAAO,YAC1B0L,EAAU3L,EAAOA,EAAK1C,OAASgG,IAAIyB,WAAWC,MAAM,oCACtD4G,EAAM,OAEV,GAAI5L,EAAM,CACN,IAAMS,EAAQT,EAAKS,QAOnB,GANIA,IACAR,EAAMO,MAAME,gBAAkBT,EAAMO,MAAMC,MAAQA,EAClDR,EAAMK,WAAa,YAInBN,aAAgBkL,KAAQlL,EAAKoD,YAAcpD,EAAKoD,WAAWyI,aAAc,CACrD,MAApB,GAAIL,EACAvL,EAAM6E,MAAQ9E,EAAK0G,eAAiB,GACpCzG,EAAM6L,KAAOxI,IAAIyI,MAAM,UAAV,MAAqB/L,EAAKoD,WAAWgI,QAASpL,EAAKoL,OAAnD,IACbnL,EAAM+L,OAAS7O,EAAE4O,MACjBH,EAAM,IAINF,GAAYpI,IAAI2I,OAAOC,qBACvBjM,EAAM6E,MAAQ9E,EAAK0G,eAAiB,GACpCzG,EAAM6L,KAAOxI,IAAIyI,MAAM,qBAAsB,CAACI,EAAG,YAAcnM,EAAKoD,WAAWgI,OAAS,IAAMpL,EAAKoL,SACnGnL,EAAM+L,OAAS7O,EAAE4O,MACjBH,EAAM,WAId3L,EAAMK,WAAa,YAGvB,OAAOnD,EAAEyO,EAAK3L,EAAO9C,EAAE,0BAA2B,CAC9C6C,GAAQA,EAAKI,QAAUL,YAAaC,EAAM,GAAI,CAACK,UAAU,IACzD,IAAMsL,O,cC7Cd7O,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,wB,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,4B,yDCOrB,aAAUe,GACrB,OAAIA,EAAKqD,KACE8H,IAAMiB,cAAcpM,GAG/B,eACOmL,IAAMiB,cAAcpM,GAD3B,CAEIqG,WAAY,CACR/I,KAAM0C,EAAK1C,Y,6BCfR,SAAS+O,IAetB,OAdAA,EAAW5O,OAAO6O,QAAU,SAAU1K,GACpC,IAAK,IAAI7E,EAAI,EAAGA,EAAIwP,UAAUnI,OAAQrH,IAAK,CACzC,IAAIyP,EAASD,UAAUxP,GAEvB,IAAK,IAAIuB,KAAOkO,EACV/O,OAAOkB,UAAUC,eAAe1B,KAAKsP,EAAQlO,KAC/CsD,EAAOtD,GAAOkO,EAAOlO,IAK3B,OAAOsD,IAGO6K,MAAMvL,KAAMqL,WAf9B,mC,cCAAzP,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,oC,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,0B,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,iC,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,qB,6BCErB,aAAUgJ,GACrB,OAAOA,EAAMvI,MAAM,GAAGC,MAAK,SAACC,EAAGC,GAC3B,IAAMC,EAAQF,EAAEE,QAAUD,EAAEC,QAE5B,OAAc,IAAVA,EACOA,EAGPF,EAAEtC,OAASuC,EAAEvC,OACN,EAGPsC,EAAEtC,OAASuC,EAAEvC,QACL,EAGL,O,cClBfR,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,6B,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,wB,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,uB,cCApCnC,EAAOD,QAAUkC,OAAO2N,WAAW,iBAAyB,OAAE,mB,cCA9D5P,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,6B,4HCEf0N,E,oJACjBlI,KAAO0G,IAAMxH,UAAU,Q,EACvBrG,KAAO6N,IAAMxH,UAAU,Q,EACvByH,KAAOD,IAAMxH,UAAU,Q,EACvB+C,YAAcyE,IAAMxH,UAAU,e,EAC9BlD,MAAQ0K,IAAMxH,UAAU,S,EACxBvD,KAAO+K,IAAMxH,UAAU,Q,EACvB7D,MAAQqL,IAAMxH,UAAU,S,EACxBiJ,UAAYzB,IAAMxH,UAAU,a,EAC5BkI,WAAaV,IAAMxH,UAAU,c,EAC7B+B,kBAAoByF,IAAMxH,UAAU,qB,EACpCkC,sBAAwBsF,IAAMxH,UAAU,yB,EACxCkJ,mBAAqB1B,IAAMxH,UAAU,sB,EACrCyB,SAAW+F,IAAMxH,UAAU,Y,EAC3B2C,SAAW6E,IAAMxH,UAAU,Y,EAC3B0H,UAAYF,IAAMxH,UAAU,YAAawH,IAAMG,e,EAC/CwB,UAAY3B,IAAMxH,UAAU,a,8CAElBC,YAAV,WACI,MAAO,wBAA0B1C,KAAKsH,OAAS,IAAMtH,KAAKsD,KAAKnB,GAAK,K,EAGxE0J,iBAAA,WACI,OAAO7L,KAAK0C,cAAgB,gB,EAGhCoJ,iBAAA,WACI,OAAO9L,KAAK0C,cAAgB,U,GA3BEuH,K,QCMvB,eACX7H,IAAIS,MAAMkJ,OAAO,uBAAyBN,EAC1CrJ,IAAIS,MAAMkJ,OAAO,2BAA6B/B,IAE9CgC,IAAMvO,UAAUc,WAAa0L,IAAMgC,QAAQ,cAC3CC,IAAWzO,UAAUwE,cAAgBgI,IAAMgC,QAAQ,iBACnDE,IAAK1O,UAAUwE,cAAgBgI,IAAMgC,QAAQ,iBAC7CG,IAAQ3O,UAAUwE,cAAgBgI,IAAMgC,QAAQ,mB,eCfpDrQ,EAAOD,QAAUkC,OAAO2N,WAAW,iBAAyB,OAAE,wB,cCA9D5P,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,wB,eCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,6B,eCApCnC,EAAOD,QAAUkC,OAAO2N,WAAW,iBAA6B,WAAE,6B,cCAlE5P,EAAOD,QAAUkC,OAAO2N,WAAW,iBAA6B,WAAE,0B,cCAlE5P,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,2B,uQCINsO,E,oJAC1BC,OAAiB,E,8CAEjBlN,UAAA,WACI,MAAO,kC,EAOXwE,MAAA,WACI,OAAOxB,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,UAAYvM,KAAKwM,QAAU,MAAQ,U,EAK9FnH,QAAA,WACI,OAAOpJ,EAAE,cAAe,CACpB+D,KAAKyM,OACLxQ,EAAE,aAAc,CACZ8J,IAAOC,UAAU,CACbzC,KAAM,SACNnE,UAAW,yBACX8G,QAASlG,KAAKkG,QACdD,UAAWjG,KAAKsM,OACjBlK,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,WAAavM,KAAKwM,QAAU,MAAQ,UACvF,IACAxM,KAAKwM,QAAU,KAAOzG,IAAOC,UAAU,CACnC5G,UAAW,+CACX8G,QAASlG,KAAKkG,QACdE,QAASpG,KAAK0M,SAASrP,KAAK2C,OAC7BoC,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,gB,UAhCXxC,GCanC4C,E,oJACjBvQ,U,IACA8N,U,IACA1E,iB,IACAjG,W,IACAL,U,IAEAH,W,gDAEA6C,OAAA,SAAOC,GACH,YAAMD,OAAN,UAAaC,GAEb,IAAO/C,EAAQkB,KAAKjB,MAAbD,KAEPkB,KAAK5D,KAAO0C,EAAOA,EAAK1C,OAAS,GACjC4D,KAAKkK,KAAOpL,EAAOA,EAAKoL,OAAS,GACjClK,KAAKwF,YAAc1G,EAAOA,EAAK0G,cAAgB,GAC/CxF,KAAKT,MAAQT,EAAOA,EAAKS,QAAU,GACnCS,KAAKd,KAAOJ,EAAOA,EAAKI,OAAS,I,EAGrCqN,kBAAA,WACI,MAAO,wC,EAGXC,MAAA,WACI,OAAQxM,KAAKjB,MAAMD,M,EAGvB2N,KAAA,WAAO,WACH,MAAO,CACHxQ,EAAE,cAAe,CACbA,EAAE,QAASmG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,eAC3DtQ,EAAE,oBAAqB,CACnBsH,KAAM,OACNzG,MAAOkD,KAAK5D,KACZqK,QAASmG,IAAS,SAAS,SAAC9P,GACxB,EAAKV,KAAOU,EACZ,EAAKoN,KAAOA,eAAKpN,GACjB,EAAKwP,OAAQ,SAIzBrQ,EAAE,cAAe,CACbA,EAAE,QAASmG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,eAC3DtQ,EAAE,oBAAqB,CACnBsH,KAAM,OACNzG,MAAOkD,KAAKkK,KACZzD,QAASmG,IAAS,SAAS,SAAC9P,GACxB,EAAKoN,KAAOpN,EACZ,EAAKwP,OAAQ,SAIzBrQ,EAAE,cAAe,CACbA,EAAE,QAASmG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,sBAC3DtQ,EAAE,uBAAwB,CACtBa,MAAOkD,KAAKwF,YACZiB,QAASmG,IAAS,SAAS,SAAC9P,GACxB,EAAK0I,YAAc1I,EACnB,EAAKwP,OAAQ,SAIzBrQ,EAAE,cAAe,CACbA,EAAE,QAASmG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,gBAC3DtQ,EAAE,oBAAqB,CACnBsH,KAAM,OACNzG,MAAOkD,KAAKT,MACZkH,QAASmG,IAAS,SAAS,SAAC9P,GACxB,EAAKyC,MAAQzC,EACb,EAAKwP,OAAQ,SAIzBrQ,EAAE,cAAe,CACbA,EAAE,QAASmG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,eAC3DtQ,EAAE,YAAamG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,wBAAyB,CACpF7N,EAAGzC,EAAE,IAAK,CACN2O,KAAM,uCACNiC,UAAW,OAGnB5Q,EAAE,oBAAqB,CACnBsH,KAAM,OACNzG,MAAOkD,KAAKd,KACZuH,QAASmG,IAAS,SAAS,SAAC9P,GACxB,EAAKoC,KAAOpC,EACZ,EAAKwP,OAAQ,W,EAOjCI,SAAA,WAAW,WACFI,QAAQtG,IAAYpE,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,qBAAsB,CAC3FnQ,KAAM4D,KAAKjB,MAAMD,KAAK1C,aAK1B4D,KAAKkG,SAAU,EAEflG,KAAKjB,MAAMD,KAAX,OAAuB,CACnBiO,aAAc/M,KAAK0J,QAAQrM,KAAK2C,QACjC2C,MAAK,WACJP,IAAI+G,MAAMC,QAEN,EAAKrK,MAAM2N,UACX,EAAK3N,MAAM2N,cAEhB,WACC,EAAKM,c,EAKbnF,SAAA,SAAShI,GAAc,WACnBA,EAAMM,iBAENH,KAAKkG,SAAU,EAEf,IAAM+G,EAAejN,KAAKjB,MAAMD,MAAQsD,IAAIS,MAAMqC,aAAa,2BAEzDgI,EAAe,CACjBH,aAAc/M,KAAK0J,QAAQrM,KAAK2C,OAGhCA,KAAKwM,UACLU,EAAQ3K,IAAMH,IAAII,MAAMC,UAAU,UAAYzC,KAAKjB,MAAMmD,SAAS4J,oBAGtEmB,EAAO5D,KAAK,CACRjN,KAAM4D,KAAK5D,KACX8N,KAAMlK,KAAKkK,KACX1E,YAAaxF,KAAKwF,YAClBjG,MAAOS,KAAKT,MACZL,KAAMc,KAAKd,MACZgO,GAASvK,MAAK,WACbP,IAAI+G,MAAMC,QAEN,EAAKrK,MAAMoO,QACX,EAAKpO,MAAMoO,OAAOF,MAEvB,WACC,EAAKD,a,GAlJ0BX,G,OCFtBe,E,oJACjBrG,MAAuB,K,8CAEvBnF,OAAA,SAAOC,GAA4C,WAC/C,YAAMD,OAAN,UAAaC,GAEbO,IAAIC,QAAQ,CACRC,OAAQ,MACRC,IAAKH,IAAII,MAAMC,UAAU,UAAYzC,KAAKjB,MAAMmD,SAAS4J,qBAC1DnJ,MAAK,SAAAC,GACJ,EAAKmE,MAAQ3E,IAAIS,MAAMC,YAAYF,GACnC3G,EAAE8G,a,EAIVsK,KAAA,WACI,OAAOpR,EAAE,oBAAqB,CACX,OAAf+D,KAAK+G,MAAiBC,IAAiBhB,UAAU,IAAMhG,KAAKsN,UAAUtN,KAAK+G,U,EAInFuG,UAAA,SAAUvG,GAAe,WACrB,MAAO,CACH9K,EAAEsR,IAAU,CACRC,aAAc,KACdpO,UAAW,mBACXqO,gBAAiB,KACjBC,OAAQ,SAACC,EAAgBC,GACrB7G,EAAMpD,OAAN,MAAAoD,EAAK,CAAQ6G,EAAa,GAArB,OAA2B7G,EAAMpD,OAAOgK,EAAQ,KAErDvL,IAAIC,QAAQ,CACRC,OAAQ,OACRC,IAAKH,IAAII,MAAMC,UAAU,UAAY,EAAK1D,MAAMmD,SAAS2J,mBACzDgC,KAAM,CACFjP,MAAOmI,EAAMZ,KAAI,SAAArH,GAAI,OAAIA,EAAKqD,WAEnCQ,MAAK,SAAAC,GAEJR,IAAIS,MAAMC,YAAYF,MAR1B,OASS,SAAA1C,GAGL,MADAjE,EAAE8G,SACI7C,OAGf6G,EAAMZ,KAAI,SAACrH,EAAM4E,GAAP,OAAiBzH,EAAE,0BAA2B,CACvD6R,WAAW,EACX1Q,IAAK0B,EAAKqD,KACV7C,MAAO,CACHC,MAAOT,EAAKS,UAEjB,CACCV,YAAaC,GACb7C,EAAE,iCAAkC6C,EAAK1C,QACzC2J,IAAOC,UAAU,CACb5G,UAAW,sBACXF,KAAM,oBACNkH,QAAS,WACLhE,IAAI+G,MAAM4E,KAAKpB,EAAe,CAC1B7N,OACA4N,SAAU,WACN3F,EAAMpD,OAAOD,EAAO,eAMxCqC,IAAOC,UAAU,CACb5G,UAAW,SACXgH,QAAS,WACLhE,IAAI+G,MAAM4E,KAAKpB,EAAe,CAC1BzK,SAAU,EAAKnD,MAAMmD,SACrBiL,OAAQ,SAACrO,GACL,EAAKiI,MAAQiH,YAAU,GAAD,OAAKjH,EAAL,CAAYjI,UAI/CsD,IAAIyB,WAAWC,MAAM,+CACxB,IACAiC,IAAOC,UAAU,CACb5G,UAAW,SACXgH,QAAS,WACLhE,IAAIC,QAAQ,CACRC,OAAQ,OACRC,IAAKH,IAAII,MAAMC,UAAU,UAAY,EAAK1D,MAAMmD,SAAS2J,mBACzDgC,KAAM,CACFjP,MAAO,MAEZ+D,MAAK,SAAAC,GACJ,EAAKmE,MAAQ3E,IAAIS,MAAMC,YAAYF,GACnC3G,EAAE8G,YARN,OASS,SAAA7C,GAEL,MADAjE,EAAE8G,SACI7C,OAGfkC,IAAIyB,WAAWC,MAAM,sD,GAhGWmK,K,iBCC1BC,E,oJACjB3K,U,IACAnH,U,IACA8N,U,IACA1E,iB,IACAjG,W,IACAL,U,IACAwM,e,IACAf,gB,IACAnG,uB,IACAG,2B,IACAgH,wB,IACAzH,c,IACAkB,c,IAEArG,W,gDAEA6C,OAAA,SAAOC,GACH,YAAMD,OAAN,UAAaC,GAEb,IAAOK,EAAYlC,KAAKjB,MAAjBmD,SAEPlC,KAAKuD,KAAOrB,EAAWA,EAASqB,OAAS,WACzCvD,KAAK5D,KAAO8F,EAAWA,EAAS9F,OAAS,GACzC4D,KAAKkK,KAAOhI,EAAWA,EAASgI,OAAS,GACzClK,KAAKwF,YAActD,EAAWA,EAASsD,cAAgB,GACvDxF,KAAKT,MAAQ2C,EAAWA,EAAS3C,QAAU,GAC3CS,KAAKd,KAAOgD,EAAWA,EAAShD,OAAS,GACzCc,KAAK0L,YAAYxJ,GAAWA,EAASwJ,YACrC1L,KAAK2K,aAAazI,GAAWA,EAASyI,aACtC3K,KAAKwE,oBAAoBtC,GAAWA,EAASsC,oBAC7CxE,KAAK2E,uBAAyBzC,EAAWA,EAASyC,wBAA0B,OAAS,GACrF3E,KAAK2L,oBAAsBzJ,EAAWA,EAASyJ,qBAAuB,OAAS,SAC/E3L,KAAKkE,SAAWhC,EAAWA,EAASgC,WAAa,GACjDlE,KAAKoF,SAAWlD,EAAWA,EAASkD,WAAa,I,EAGrDmH,kBAAA,WACI,MAAO,4C,EAGXC,MAAA,WACI,OAAQxM,KAAKjB,MAAMmD,U,EAGvBuK,KAAA,WAAO,WACH,MAAO,CACHxQ,EAAE,cAAe,CACbA,EAAE,QAASmG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,eAC3DtQ,EAAE,YAAamG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,0BAC/D4B,IAAOnI,UAAU,CACbkH,QAAS,CACLkB,SAAUhM,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,yBAC1D8B,YAAajM,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,4BAC7D+B,MAAOlM,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,uBAE3DzP,MAAOkD,KAAKuD,KACZgL,SAAU,SAACzR,GACP,EAAKyG,KAAOzG,EACZ,EAAKwP,OAAQ,GAEjBrG,UAAWjG,KAAKwM,YAGxBvQ,EAAE,cAAe,CACbA,EAAE,QAASmG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,eAC3DtQ,EAAE,oBAAqB,CACnBsH,KAAM,OACNzG,MAAOkD,KAAK5D,KACZqK,QAASmG,IAAS,SAAS,SAAC9P,GACxB,EAAKV,KAAOU,EACZ,EAAKoN,KAAOA,eAAKpN,GACjB,EAAKwP,OAAQ,SAIzBrQ,EAAE,cAAe,CACbA,EAAE,QAASmG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,eAC3DtQ,EAAE,oBAAqB,CACnBsH,KAAM,OACNzG,MAAOkD,KAAKkK,KACZzD,QAASmG,IAAS,SAAS,SAAC9P,GACxB,EAAKoN,KAAOpN,EACZ,EAAKwP,OAAQ,SAIzBrQ,EAAE,cAAe,CACbA,EAAE,QAASmG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,sBAC3DtQ,EAAE,uBAAwB,CACtBa,MAAOkD,KAAKwF,YACZiB,QAASmG,IAAS,SAAS,SAAC9P,GACxB,EAAK0I,YAAc1I,EACnB,EAAKwP,OAAQ,SAIzBrQ,EAAE,cAAe,CACbA,EAAE,QAASmG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,gBAC3DtQ,EAAE,oBAAqB,CACnBsH,KAAM,OACNzG,MAAOkD,KAAKT,MACZkH,QAASmG,IAAS,SAAS,SAAC9P,GACxB,EAAKyC,MAAQzC,EACb,EAAKwP,OAAQ,SAIzBrQ,EAAE,cAAe,CACbA,EAAE,QAASmG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,eAC3DtQ,EAAE,YAAamG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,wBAAyB,CACpF7N,EAAGzC,EAAE,IAAK,CACN2O,KAAM,uCACNiC,UAAW,OAGnB5Q,EAAE,oBAAqB,CACnBsH,KAAM,OACNzG,MAAOkD,KAAKd,KACZuH,QAASmG,IAAS,SAAS,SAAC9P,GACxB,EAAKoC,KAAOpC,EACZ,EAAKwP,OAAQ,SAIzBrQ,EAAE,cAAe,CACbA,EAAE,QAAS,CACPA,EAAE,QAAS,CACPsH,KAAM,WACNiL,QAASxO,KAAK0L,UACd6C,SAAU,WACN,EAAK7C,WAAa,EAAKA,UACvB,EAAKY,OAAQ,KAGrB,IACAlK,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,uBAGxDtQ,EAAE,cAAe,CACbA,EAAE,QAAS,CACPA,EAAE,QAAS,CACPsH,KAAM,WACNiL,QAASxO,KAAK2K,WACd4D,SAAU,WACN,EAAK5D,YAAc,EAAKA,WACxB,EAAK2B,OAAQ,KAGrB,IACAlK,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,wBAGxDtQ,EAAE,cAAe,CACbA,EAAE,QAAS,CACPA,EAAE,QAAS,CACPsH,KAAM,WACNiL,QAASxO,KAAKwE,kBACd+J,SAAU,WACN,EAAK/J,mBAAqB,EAAKA,kBAC/B,EAAK8H,OAAQ,KAGrB,IACAlK,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,+BAGxDtQ,EAAE,cAAe,CACbA,EAAE,QAASmG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,gCAC3D4B,IAAOnI,UAAU,CACbkH,QAAS,CACL,GAAI9K,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,8BACpDkC,UAAWrM,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,gCAC3DmC,WAAYtM,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,iCAC5D3H,MAAOxC,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,6BAE3DzP,MAAmD,IAA5CkD,KAAK2E,sBAAsBE,QAAQ,KAAa,QAAU7E,KAAK2E,sBACtE4J,SAAU,SAACzR,GACP,EAAK6H,sBAAkC,UAAV7H,EAAoB,KAAOA,EACxD,EAAKwP,OAAQ,GAEjBrG,UAAWjG,KAAKwE,oBAEwB,IAA5CxE,KAAK2E,sBAAsBE,QAAQ,KAAa5I,EAAE,sBAAuB,CACrEA,EAAE,OAAQ,KACVA,EAAE,oBAAqB,CACnBsH,KAAM,OACNzG,MAAOkD,KAAK2E,sBAAsBI,MAAM,KAAK,GAC7C0B,QAASmG,IAAS,SAAS,SAAC9P,GACxB,EAAK6H,sBAAwB,IAAM7H,EAAQ,IAAM,EAAK6H,sBAAsBI,MAAM,KAAK,GACvF,EAAKuH,OAAQ,KAEjBrG,UAAWjG,KAAKwE,oBAEpBvI,EAAE,OAAQ,KACVA,EAAE,oBAAqB,CACnBsH,KAAM,OACNzG,MAAOkD,KAAK2E,sBAAsBI,MAAM,KAAK,GAC7C0B,QAASmG,IAAS,SAAS,SAAC9P,GACxB,EAAK6H,sBAAwB,IAAM,EAAKA,sBAAsBI,MAAM,KAAK,GAAK,IAAMjI,EACpF,EAAKwP,OAAQ,KAEjBrG,UAAWjG,KAAKwE,sBAEnB,OAETvI,EAAE,cAAe,CACbA,EAAE,QAASmG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,6BAC3DtQ,EAAE,YAAamG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,wCAC/D4B,IAAOnI,UAAU,CACbkH,QAAS,CACLyB,OAAQvM,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,0BACxDmC,WAAYtM,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,8BAC5DqC,eAAgBxM,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,mCAEpEzP,MAAOkD,KAAK2L,mBACZ4C,SAAU,SAACzR,GACP,EAAK6O,mBAAqB7O,EAC1B,EAAKwP,OAAQ,GAEjBrG,UAAWjG,KAAKwE,sBAGxBvI,EAAE,cAAe,CACbA,EAAE,QAASmG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,wBAC3DtQ,EAAE,YAAamG,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,mCAC/DtQ,EAAE,4BAA6B,CAC3BA,EAAE,oBAAqB,CACnBsH,KAAM,SACNsL,IAAK,EACLC,KAAM,EACNhS,MAAOkD,KAAKkE,SACZuC,QAASmG,IAAS,SAAS,SAAC9P,GACxB,EAAKoH,SAAW4E,SAAShM,IAAU,GACnC,EAAKwP,OAAQ,OAGrB,IACAlK,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,4BAChD,IACAtQ,EAAE,oBAAqB,CACnBsH,KAAM,SACNsL,IAAK,EACLC,KAAM,EACNhS,MAAOkD,KAAKoF,SACZqB,QAASmG,IAAS,SAAS,SAAC9P,GACxB,EAAKsI,SAAW0D,SAAShM,IAAU,GACnC,EAAKwP,OAAQ,a,EAQrCI,SAAA,WAAW,WACFI,QAAQtG,IAAYpE,IAAIyB,WAAWC,MAAM9D,KAAKuM,oBAAsB,qBAAsB,CAC3FnQ,KAAM4D,KAAKjB,MAAMmD,SAAS9F,aAK9B4D,KAAKkG,SAAU,EAEflG,KAAKjB,MAAMmD,SAAX,OAA2B,CACvB6K,aAAc/M,KAAK0J,QAAQrM,KAAK2C,QACjC2C,MAAK,WACJP,IAAI+G,MAAMC,QAEN,EAAKrK,MAAM2N,UACX,EAAK3N,MAAM2N,cAEhB,WACC,EAAKM,c,EAKbnF,SAAA,SAAShI,GAAc,WACnBA,EAAMM,iBAENH,KAAKkG,SAAU,EAEf,IAAM+G,EAAmBjN,KAAKjB,MAAMmD,UAAYE,IAAIS,MAAMqC,aAAa,uBAEvE+H,EAAO5D,KAAK,CACR9F,KAAMvD,KAAKuD,KACXnH,KAAM4D,KAAK5D,KACX8N,KAAMlK,KAAKkK,KACX1E,YAAaxF,KAAKwF,YAClBjG,MAAOS,KAAKT,MACZL,KAAMc,KAAKd,KACX6P,WAAY/O,KAAK0L,UACjBsD,YAAahP,KAAK2K,WAClBsE,oBAAqBjP,KAAKwE,kBAC1B0K,wBAAyBlP,KAAK2E,sBAC9BwK,qBAAsBnP,KAAK2L,mBAC3ByD,UAAWpP,KAAKkE,SAChBmL,UAAWrP,KAAKoF,UACjB,CACC2H,aAAc/M,KAAK0J,QAAQrM,KAAK2C,QACjC2C,MAAK,WACJP,IAAI+G,MAAMC,QAEN,EAAKrK,MAAMoO,QACX,EAAKpO,MAAMoO,OAAOF,MAEvB,WACC,EAAKD,a,GApT8BX,GCJ1BiD,E,oJACjBC,SAAmB,E,EACnBhR,WAAgC,K,8CAEhCqD,OAAA,SAAOC,GAAoC,WACvC,YAAMD,OAAN,UAAaC,GAEbO,IAAIC,QAAQ,CACRC,OAAQ,MACRC,IAAKH,IAAII,MAAMC,UAAU,UAAY,yBACtCE,MAAK,SAAAC,GACJ,EAAKrE,WAAa6D,IAAIS,MAAMC,YAAYF,GACxC3G,EAAE8G,a,EAIVsK,KAAA,WACI,OAAOpR,EAAE,kBAAmBA,EAAE,aAAc,CACpB,OAApB+D,KAAKzB,WAAsByI,IAAiBhB,UAAU,IAAMhG,KAAKwP,eAAexP,KAAKzB,gB,EAI7FiR,eAAA,SAAejR,GAAwB,WACnC,MAAO,CACHtC,EAAE,KAAMmG,IAAIyB,WAAWC,MAAM,yCAC7B7H,EAAEsR,IAAU,CACRnO,UAAW,eACXqQ,UAAW,aACXhC,gBAAiB,KACjBC,OAAQ,SAACC,EAAgBC,GACrBrP,EAAWoF,OAAX,MAAApF,EAAU,CAAQqP,EAAa,GAArB,OAA2BrP,EAAWoF,OAAOgK,EAAQ,KAE/DvL,IAAIC,QAAQ,CACRC,OAAQ,OACRC,IAAKH,IAAII,MAAMC,UAAU,UAAY,6BACrCoL,KAAM,CACFjP,MAAOL,EAAW4H,KAAI,SAAAjE,GAAQ,OAAIA,EAASC,WAEhDQ,MAAK,SAAAC,GACJ,EAAKrE,WAAa6D,IAAIS,MAAMC,YAAYF,GACxC,EAAK2M,SAAW,KARpB,OASS,SAAArP,GAEL,MADAjE,EAAE8G,SACI7C,OAlBjB,UAsBM3B,EAAW4H,KAAI,SAACjE,EAAUwB,GAAX,OAAqBzH,EAAE,eAAgB,CACrD6R,WAAW,EACX1Q,IAAK8E,EAASC,KACdiE,QAAS,WACL,EAAKmJ,SAAW7L,GAEpBtE,UAAW,EAAKmQ,WAAa7L,EAAQ,SAAW,GAChDpE,MAAO,CACHC,MAAO2C,EAAS3C,UAErB,CACCV,YAAaqD,GACb,IACAA,EAAS9F,OACT,IACA2J,IAAOC,UAAU,CACb5G,UAAW,sBACXF,KAAM,oBACNkH,QAAS,WACLhE,IAAI+G,MAAM4E,KAAKG,EAAmB,CAC9BhM,WACAwK,SAAU,WACNnO,EAAWoF,OAAOD,EAAO,GACzB,EAAK6L,SAAW,aA7CvC,CAmDGxJ,IAAOC,UAAU,CACb5I,IAAK,MACLgC,UAAW,cACXF,KAAM,cACNkH,QAAS,WACLhE,IAAI+G,MAAM4E,KAAKG,EAAmB,CAC9Bf,OAAQ,SAACjL,GACL,EAAK3D,WAAamR,YAAe,GAAD,OAAKnR,EAAL,CAAiB2D,KACjD,EAAKqN,SAAW,EAAKhR,WAAW8E,WAAU,SAAAtG,GAAC,OAAIA,IAAMmF,UAIlEE,IAAIyB,WAAWC,MAAM,sDAG5B9D,KAAKuP,SAAWhR,EAAW2E,OAASjH,EAAE,MAAOA,EAAE,MAAO,CAClDmB,IAAKmB,EAAWyB,KAAKuP,UAAUpN,MAChCiL,EAAkBpH,UAAU,CAC3B9D,SAAU3D,EAAWyB,KAAKuP,cACvB,O,GA/FyBI,K,yBCNvBC,E,oJACjBC,cAAiD,U,EACjDC,mBAA6B,E,EAC7BC,iB,gDAEAnO,OAAA,SAAOC,GAAmD,WACtD,YAAMD,OAAN,UAAaC,GAEb7B,KAAK2B,UAAUd,MAAK,SAAAhB,GAGhB,MAAkB,MAAdA,EAAMzC,KAAqC,KAAtB,EAAKmE,cAC1B1B,EAAMM,iBACN,EAAK8C,OAAOpD,IAEL,GAIU,QAAdA,EAAMzC,Q,EAIrB4S,SAAA,SAASnO,GAAsD,WAK3D7B,KAAKiQ,QAAUpO,EAAMqO,IAErBlQ,KAAK+P,YAAc,SAAClQ,GAChB,IAAMsQ,EAAWtO,EAAMqO,IAAIE,cAAc,kBAGrCD,GACAA,EAASE,SAASxQ,EAAMa,QAEnB,EAAKoP,oBACN,EAAKA,mBAAoB,EACzB7T,EAAE8G,UAGF,EAAK+M,oBACL,EAAKA,mBAAoB,EACzB7T,EAAE8G,WAKduN,SAASC,iBAAiB,YAAavQ,KAAK+P,c,EAGhDS,eAAA,a,EAIAC,SAAA,SAAS5O,GACL,YAAM4O,SAAN,UAAe5O,GAEfyO,SAASI,oBAAoB,YAAa1Q,KAAK+P,c,EAGnD1C,KAAA,WACI,IAAM7H,EAAcxF,KAAKjB,MAAMmD,SAASsD,cAExC,OAAOvJ,EAAE,+BAAgCA,EAAE,OAAQ,CAI/C4L,SAJ+C,SAItChI,GACLA,EAAMM,mBAEX,CACClE,EAAE,4BAA6B,CAC3BA,EAAE,iCAAkC+D,KAAKyF,YAAYC,WAErD1F,KAAKuF,mBAAmBvF,KAAKoE,4BAEjCoB,EAAcvJ,EAAE,IAAKuJ,GAAe,S,EAI5CC,UAAA,WACI,IAAME,EAAQ,EAAH,UAASF,UAAT,WAEXE,EAAMgL,OAAO,UAEb,IAAIC,EAAS,KAYb,OAVI5Q,KAAK0B,OACLkP,EAAS5J,IAAiBhB,YACI,YAAvBhG,KAAK6P,cACZe,EAAS1R,IAAK,gBACgB,UAAvBc,KAAK6P,gBACZe,EAAS1R,IAAK,iBAGlByG,EAAME,IAAI,SAAU5J,EAAE,6BAA8B2U,IAE7CjL,G,EAGXJ,mBAAA,SAAmBwB,GAKf,OAAM/G,KAAKyB,iBAAkBzB,KAAK8P,mBAAuC,IAAjB/I,EAAM7D,OACnD,MAMPmC,EADwB,OAAxBrF,KAAKqB,eACK2F,IAAiBhB,YAEjBe,EAAMZ,IAAInG,KAAKiH,kBAAkB5J,KAAK2C,OAG7C/D,EAAE,iDAAkDoJ,IAR3D,IAAIA,G,EAWR4B,kBAAA,SAAkBnI,EAAY4E,GAC1B,OAAOzH,EAAE,KAAD,YAAagL,kBAAb,UAA+BnI,EAAM4E,K,EAGjDP,WAAA,SAAWrE,GACP,YAAMqE,WAAN,UAAiBrE,GAGjBkB,KAAK6P,cAAgB,UACrB7P,KAAKkJ,gB,EAGTjG,OAAA,SAAO/C,GACH,IAAMa,EAAWf,KAAKyH,cAAczH,KAAKwB,iBAKpCT,EAASmC,OAOdnC,EAAS,GAAG+G,cAAc,IAAIC,MAAM,UANhC/H,KAAKuB,aAAe,I,EAS5BkI,QAAA,WACIzJ,KAAK6P,cAAgB,UACrB,YAAMpG,QAAN,Y,EAGJC,QAAA,WACI1J,KAAK6P,cAAgB,QACrB,YAAMnG,QAAN,Y,QA7JiDtI,GCIzDgB,IAAIyO,aAAahL,IAAI,uBAAuB,WACxCiL,cAEA1O,IAAI2I,OAAOxM,WAAa,CACpBwS,KAAM,cACN/K,UAAWsJ,GAGf0B,iBAAOC,IAAcxT,UAAW,SAAS,SAAUkI,GAC/CA,EAAME,IAAI,aAAcqL,IAAWlL,UAAU,CACzC4E,KAAMxI,IAAIyI,MAAM,cAChB3L,KAAM,eACPkD,IAAIyB,WAAWC,MAAM,6CAG5BkN,iBAAOG,IAAgB1T,UAAW,UAAU,SAAUkI,GAAiB,WAC9D3F,KAAKoR,QAAQ9J,QAAWtH,KAAKoR,QAAQ3O,UAAU,sBAIpDiN,YAAetN,IAAII,MAAMjE,cAAcuD,SAAQ,SAAAI,GACnB,aAApBA,EAASqB,QAIboC,EAAME,IAAI,YAAc3D,EAASgI,OAAQjO,EAAE,cAAe,CACtDA,EAAE,QAASiG,EAAS9F,QACpBH,EAAE2T,EAA6B,CAC3B5N,SAAU,EAAKoP,QACflP,gBAEH","file":"backoffice.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 49);\n","module.exports = flarum.core.compat['common/Model'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","module.exports = flarum.core.compat['common/extend'];","module.exports = flarum.core.compat['common/components/Button'];","import Taxonomy from '../models/Taxonomy';\n\nexport default function (taxonomies: Taxonomy[] | false): Taxonomy[] {\n    // Special case for when retrieving an empty relationship from the store\n    if (taxonomies === false) {\n        taxonomies = [];\n    }\n\n    return taxonomies.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['common/utils/withAttr'];","module.exports = flarum.core.compat['common/components/LoadingIndicator'];","import classList from 'flarum/common/utils/classList';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\nimport {Attributes} from 'mithril';\n\ninterface Settings {\n    useColor?: boolean\n}\n\nexport default function taxonomyIcon(term: Taxonomy | Term, attrs: Attributes = {}, settings: Settings = {}) {\n    const hasIcon = term && term.icon();\n    const {useColor = true} = settings;\n\n    attrs.className = classList([\n        attrs.className,\n        'icon',\n        hasIcon ? term.icon() : 'TaxonomyIcon',\n    ]);\n\n    if (term) {\n        attrs.style = attrs.style || {};\n\n        if (hasIcon) {\n            attrs.style.color = useColor ? term.color() : '';\n        } else {\n            attrs.style.backgroundColor = term.color();\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return hasIcon ? m('i', attrs) : m('span', attrs);\n}\n","module.exports = flarum.core.compat['common/utils/extract'];","type KeyboardEventHandler = (event: KeyboardEvent) => void;\ntype ShouldHandle = (event: KeyboardEvent) => boolean;\n\n/**\n * Same as Flarum's, but in common namespace so we can use it in backoffice as wel\n */\nexport default class KeyboardNavigatable {\n    /**\n     * Callback to be executed for a specified input.\n     */\n    protected callbacks = new Map<number, KeyboardEventHandler>();\n\n    /**\n     * Callback that determines whether keyboard input should be handled.\n     * By default, always handle keyboard navigation.\n     */\n    protected whenCallback: ShouldHandle = (event: KeyboardEvent) => true;\n\n    /**\n     * Provide a callback to be executed when navigating upwards.\n     *\n     * This will be triggered by the Up key.\n     */\n    onUp(callback: KeyboardEventHandler): KeyboardNavigatable {\n        this.callbacks.set(38, (e) => {\n            e.preventDefault();\n            callback(e);\n        });\n\n        return this;\n    }\n\n    /**\n     * Provide a callback to be executed when navigating downwards.\n     *\n     * This will be triggered by the Down key.\n     */\n    onDown(callback: KeyboardEventHandler): KeyboardNavigatable {\n        this.callbacks.set(40, (e) => {\n            e.preventDefault();\n            callback(e);\n        });\n\n        return this;\n    }\n\n    /**\n     * Provide a callback to be executed when the current item is selected..\n     *\n     * This will be triggered by the Return and Tab keys..\n     */\n    onSelect(callback: KeyboardEventHandler): KeyboardNavigatable {\n        const handler: KeyboardEventHandler = (e) => {\n            e.preventDefault();\n            callback(e);\n        };\n\n        this.callbacks.set(9, handler);\n        this.callbacks.set(13, handler);\n\n        return this;\n    }\n\n    /**\n     * Provide a callback to be executed when the navigation is canceled.\n     *\n     * This will be triggered by the Escape key.\n     */\n    onCancel(callback: KeyboardEventHandler): KeyboardNavigatable {\n        this.callbacks.set(27, (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            callback(e);\n        });\n\n        return this;\n    }\n\n    /**\n     * Provide a callback to be executed when previous input is removed.\n     *\n     * This will be triggered by the Backspace key.\n     *\n     * @public\n     * @param {KeyboardNavigatable~keyCallback} callback\n     * @return {KeyboardNavigatable}\n     */\n    onRemove(callback: KeyboardEventHandler): KeyboardNavigatable {\n        this.callbacks.set(8, (e) => {\n            if (e.target.selectionStart === 0 && e.target.selectionEnd === 0) {\n                callback(e);\n                e.preventDefault();\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Provide a callback that determines whether keyboard input should be handled.\n     */\n    when(callback: ShouldHandle): KeyboardNavigatable {\n        this.whenCallback = callback;\n\n        return this;\n    }\n\n    /**\n     * Set up the navigation key bindings on the given jQuery element.\n     */\n    bindTo($element: JQuery) {\n        // Handle navigation key events on the navigatable element.\n        $element.on('keydown', this.navigate.bind(this));\n    }\n\n    /**\n     * Interpret the given keyboard event as navigation commands.\n     */\n    navigate(event: KeyboardEvent) {\n        // This callback determines whether keyboard should be handled or ignored.\n        if (!this.whenCallback(event)) return;\n\n        const keyCallback = this.callbacks.get(event.which);\n        if (keyCallback) {\n            keyCallback(event);\n        }\n    }\n}\n","import {Children, Vnode} from 'mithril';\nimport {ComponentAttrs} from 'flarum/common/Component';\nimport Modal from 'flarum/common/components/Modal';\nimport Model from 'flarum/common/Model';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport highlight from 'flarum/common/helpers/highlight';\nimport classList from 'flarum/common/utils/classList';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport extractText from 'flarum/common/utils/extractText';\n\nimport termLabel from '../helpers/termLabel';\nimport taxonomyIcon from '../helpers/taxonomyIcon';\nimport termToIdentifier from '../utils/termToIdentifier';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\nimport KeyboardNavigatable from '../utils/KeyboardNavigatable';\n\n/**\n * Comparing objects directly is unreliable because we will be creating some new records as well\n * So we use this method to do a proper deep check\n */\nfunction isSameTerm(a: Term, b: Term) {\n    if (a.data.type !== b.data.type) {\n        return false;\n    }\n\n    // If both have an ID and it's different\n    if (a.id() && b.id()) {\n        return a.id() === b.id();\n    }\n\n    // If only one has an ID, it's different\n    if (!a.id() !== !b.id()) {\n        return false;\n    }\n\n    // If both don't have an ID, it's a new value and we compare the name\n    return a.name() === b.name();\n}\n\nexport interface ChooseTaxonomyTermsModalAttrs extends ComponentAttrs {\n    resource: Model\n    taxonomy: Taxonomy\n    selectedTerms: Term[]\n    onsubmit?: (terms: Term[]) => void\n}\n\n/**\n * Based on Flarum's TagDiscussionModal\n */\nexport default class ChooseTaxonomyTermsModal extends Modal {\n    availableTerms: Term[] | null = null;\n    selectedTerms: Term[] = [];\n    searchFilter: string = '';\n    activeListIndex: number = 0;\n    inputIsFocused: boolean = false;\n    saving: boolean = false;\n    navigator!: KeyboardNavigatable;\n\n    attrs!: ChooseTaxonomyTermsModalAttrs\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        if (this.attrs.selectedTerms) {\n            this.attrs.selectedTerms.forEach(this.addTerm.bind(this));\n        } else if (this.attrs.resource) {\n            this.attrs.resource.taxonomyTerms().forEach((term: Term) => {\n                if (term.taxonomy().id() === this.attrs.taxonomy.id()) {\n                    this.addTerm(term);\n                }\n            });\n        }\n\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiEndpoint() + '/terms',\n        }).then(result => {\n            this.availableTerms = app.store.pushPayload(result);\n\n            m.redraw();\n        });\n\n        this.navigator = new KeyboardNavigatable();\n        this.navigator\n            .onUp(() => this.setIndex(this.activeListIndex - 1, true))\n            .onDown(() => this.setIndex(this.activeListIndex + 1, true))\n            .onSelect(this.select.bind(this))\n            .onRemove(() => {\n                if (!this.selectedTerms.length) {\n                    return;\n                }\n\n                this.toggleTerm(this.selectedTerms[this.selectedTerms.length - 1]);\n            })\n            .when(event => {\n                // We want to allow selecting with space because it's a common way to select\n                // However this interferes with the ability to enter spaces\n                // So we will have space act as select, but only if nothing is typed yet\n                if (event.key === ' ' && this.searchFilter === '') {\n                    event.preventDefault();\n                    this.select(event);\n\n                    return false;\n                }\n\n                return true;\n            });\n    }\n\n    indexInSelectedTerms(term: Term) {\n        return this.selectedTerms.findIndex(t => isSameTerm(t, term));\n    }\n\n    addTerm(term: Term) {\n        this.selectedTerms.push(term);\n    }\n\n    removeTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.selectedTerms.splice(index, 1);\n        }\n    }\n\n    className() {\n        return 'ChooseTaxonomyTermsModal';\n    }\n\n    title() {\n        return this.attrs.resource\n            ? app.translator.trans('flamarkt-taxonomies.lib.modal.title.edit', {\n                taxonomy: this.attrs.taxonomy.name(),\n                title: m('em', this.attrs.resource.title ? this.attrs.resource.title() : this.attrs.resource.displayName()),\n            })\n            : app.translator.trans('flamarkt-taxonomies.lib.modal.title.new', {\n                taxonomy: this.attrs.taxonomy.name(),\n            });\n    }\n\n    getInstruction() {\n        const count = this.selectedTerms.length;\n\n        if (this.attrs.taxonomy.minTerms() && count < this.attrs.taxonomy.minTerms()) {\n            const remaining = this.attrs.taxonomy.minTerms() - count;\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholder', {\n                count: remaining,\n            });\n        } else if (count === 0) {\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholderOptional');\n        }\n\n        return '';\n    }\n\n    filteredAvailableTerms() {\n        let availableTerms = this.availableTerms === null ? [] : this.availableTerms;\n        const filter = this.searchFilter.toLowerCase();\n\n        if (filter) {\n            availableTerms = availableTerms.filter(term => term.name().substr(0, filter.length).toLowerCase() === filter);\n\n            if (\n                this.attrs.taxonomy.allowCustomValues() &&\n                !availableTerms.some(term => term.name().toLowerCase() === filter)\n            ) {\n                const validation = this.attrs.taxonomy.customValueValidation();\n                let regex: RegExp | null = null;\n\n                if (validation === 'alpha_num') {\n                    regex = /^[a-z0-9]$/i;\n                } else if (validation === 'alpha_dash') {\n                    regex = /^[a-z0-9_-]$/i;\n                } else if (validation.indexOf('/') === 0) {\n                    const parts = validation.split('/');\n                    if (parts.length === 3) {\n                        regex = new RegExp(parts[1], parts[2]);\n                    }\n                }\n\n                if (!regex || regex.test(this.searchFilter)) {\n                    availableTerms.push(app.store.createRecord('flamarkt-taxonomy-terms', {\n                        attributes: {\n                            name: this.searchFilter,\n                        },\n                    }));\n                }\n            }\n        }\n\n        if (this.attrs.taxonomy.maxTerms() && this.selectedTerms.length >= this.attrs.taxonomy.maxTerms()) {\n            availableTerms = [];\n        }\n\n        return availableTerms;\n    }\n\n    content() {\n        return [\n            this.viewForm(),\n            this.listAvailableTerms(this.filteredAvailableTerms()),\n        ];\n    }\n\n    viewForm() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.Modal-body', [\n            description ? m('p', description) : null,\n            m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n        ]);\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('input', m('.ChooseTaxonomyTermsModal-form-input', m('.TermsInput.FormControl', {\n            className: this.inputIsFocused ? 'focus' : '',\n        }, this.inputItems().toArray())), 20);\n\n        items.add('submit', m('.ChooseTaxonomyTermsModal-form-submit.App-primaryControl', Button.component({\n            type: 'submit',\n            className: 'Button Button--primary',\n            disabled: this.attrs.taxonomy.minTerms() && this.selectedTerms.length < this.attrs.taxonomy.minTerms(),\n            icon: 'fas fa-check',\n            loading: this.saving,\n        }, app.translator.trans('flamarkt-taxonomies.lib.modal.submit'))), 10);\n\n        return items;\n    }\n\n    inputItems() {\n        const items = new ItemList();\n\n        items.add('selected', this.selectedTerms.map(term => {\n            return m('span.TermsInput-term', {\n                onclick: () => {\n                    this.toggleTerm(term);\n                    this.onready();\n                },\n            }, termLabel(term));\n        }), 20);\n\n        items.add('control', m('input.FormControl', {\n            placeholder: extractText(this.getInstruction()),\n            value: this.searchFilter,\n            oninput: (event: Event) => {\n                this.searchFilter = (event.target as HTMLInputElement).value;\n                this.activeListIndex = 0;\n            },\n            onkeydown: this.navigator.navigate.bind(this.navigator),\n            // Use local methods so that other extensions can extend behaviour\n            onfocus: this.oninputfocus.bind(this),\n            onblur: this.oninputblur.bind(this),\n        }), 10);\n\n        return items;\n    }\n\n    oninputfocus() {\n        this.inputIsFocused = true;\n    }\n\n    oninputblur() {\n        this.inputIsFocused = false;\n    }\n\n    listAvailableTerms(terms: Term[]): Children {\n        return m('.Modal-footer', this.availableTerms === null ?\n            LoadingIndicator.component() :\n            m('ul.ChooseTaxonomyTermsModal-list.SelectTermList', {\n                className: terms.some(term => term.description()) ? 'SelectTermList--with-descriptions' : '',\n            }, terms.map(this.listAvailableTerm.bind(this)))\n        );\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li.SelectTermListItem', {\n            'data-index': index,\n            className: classList({\n                colored: !!term.color(),\n                selected: this.indexInSelectedTerms(term) !== -1,\n                active: this.activeListIndex === index,\n            }),\n            style: {color: term.color()},\n            onmouseover: () => this.activeListIndex = index,\n            onclick: this.toggleTerm.bind(this, term),\n        }, [\n            taxonomyIcon(term),\n            m('span.SelectTermListItem-name', term.exists ? highlight(term.name(), this.searchFilter) : app.translator.trans('flamarkt-taxonomies.lib.modal.custom', {\n                value: m('em', term.name()),\n            })),\n            term.description() ? m('span.SelectTermListItem-description', term.description()) : '',\n        ]);\n    }\n\n    toggleTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.removeTerm(term);\n        } else {\n            this.addTerm(term);\n        }\n\n        if (this.searchFilter) {\n            this.searchFilter = '';\n            this.activeListIndex = 0;\n        }\n\n        // Defer re-focusing to next browser draw\n        setTimeout(() => {\n            this.onready();\n        });\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case we don't want to submit just yet, but we will delete the text\n        // so that typing enter multiple times does end up submitting\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Ctrl + Enter submits the selection, just Enter completes the current entry\n        if (e.metaKey || e.ctrlKey || $element.is('.selected')) {\n            if (this.selectedTerms.length) {\n                // Calling .trigger() on the form with jQuery doesn't seem to trigger the onsubmit, so we'll just do that directly instead\n                this.onsubmit();\n            }\n        } else {\n            $element[0].dispatchEvent(new Event('click'));\n        }\n    }\n\n    getDomElement(index: number) {\n        return this.$(`.SelectTermListItem[data-index=\"${index}\"]`);\n    }\n\n    setIndex(index: number, scrollToItem: boolean) {\n        const $dropdown = this.$('.ChooseTaxonomyTermsModal-list');\n\n        const indexLength = this.$('.SelectTermListItem').length;\n\n        if (index < 0) {\n            index = indexLength - 1;\n        } else if (index >= indexLength) {\n            index = 0;\n        }\n\n        const $item = this.getDomElement(index);\n        this.activeListIndex = index;\n\n        m.redraw();\n\n        if (scrollToItem) {\n            const dropdownScroll = $dropdown.scrollTop() || 0;\n            const dropdownTop = $dropdown.offset()?.top || 0;\n            const dropdownBottom = dropdownTop + ($dropdown.outerHeight() || 0);\n            const itemTop = $item.offset()?.top || 0;\n            const itemBottom = itemTop + ($item.outerHeight() || 0);\n\n            let scrollTop;\n            if (itemTop < dropdownTop) {\n                scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n            } else if (itemBottom > dropdownBottom) {\n                scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n            }\n\n            if (typeof scrollTop !== 'undefined') {\n                $dropdown.stop(true).animate({scrollTop}, 100);\n            }\n        }\n    }\n\n    onsubmit(event?: Event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.attrs.resource) {\n            this.saveResource();\n\n            // Do not run the normal code - it might close the modal even if an error occurred\n            return;\n        }\n\n        if (this.attrs.onsubmit) this.attrs.onsubmit(this.selectedTerms);\n\n        app.modal.close();\n    }\n\n    saveResource() {\n        this.saving = true;\n\n        this.attrs.resource.save({\n            relationships: {\n                taxonomies: [\n                    {\n                        verbatim: true, // Flarum workaround, defined in flamarkt/core\n                        type: 'flamarkt-taxonomies',\n                        id: this.attrs.taxonomy.id(),\n                        relationships: {\n                            terms: {\n                                data: this.selectedTerms.map(termToIdentifier),\n                            },\n                        },\n                    },\n                ],\n            },\n        }).then(this.onsaved.bind(this), this.onerror.bind(this));\n    }\n\n    onsaved() {\n        // Need to check if DiscussionPage exists because in backoffice frontend the import will be undefined\n        if (DiscussionPage && app.current.matches(DiscussionPage)) {\n            app.current.get('stream').update();\n        }\n        this.saving = false;\n        m.redraw();\n\n        app.modal.close();\n    }\n\n    onerror() {\n        this.saving = false;\n        m.redraw();\n    }\n}\n","module.exports = flarum.core.compat['common/utils/extractText'];","module.exports = flarum.core.compat['common/utils/classList'];","import Model from 'flarum/common/Model';\nimport Taxonomy from './Taxonomy';\n\nexport default class Term extends Model {\n    name = Model.attribute('name');\n    slug = Model.attribute('slug');\n    description = Model.attribute('description');\n    color = Model.attribute('color');\n    icon = Model.attribute('icon');\n    order = Model.attribute('order');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n\n    taxonomy: () => Taxonomy | false = Model.hasOne('taxonomy');\n\n    protected apiEndpoint(): string {\n        return '/flamarkt/taxonomy-terms' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","import extract from 'flarum/common/utils/extract';\nimport Term from '../models/Term';\nimport taxonomyIcon from './taxonomyIcon';\nimport Taxonomy from '../models/Taxonomy';\nimport {Attributes} from 'mithril';\n\nexport default function termLabel(term: Taxonomy | Term | null = null, attrs: Attributes = {}) {\n    attrs.style = attrs.style || {};\n    attrs.className = 'TaxonomyLabel ' + (attrs.className || '');\n\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n    const tagText = term ? term.name() : app.translator.trans('flarum-tags.lib.deleted_tag_text');\n    let tag = 'span';\n\n    if (term) {\n        const color = term.color();\n        if (color) {\n            attrs.style.backgroundColor = attrs.style.color = color;\n            attrs.className += ' colored';\n        }\n\n        // We need to check for instanceof because this method is also used with a taxonomy passed as a value\n        if (term instanceof Term && term.taxonomy() && term.taxonomy().showFilter()) {\n            if (discussionLink) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('index', {[term.taxonomy().slug()]: term.slug()});\n                attrs.config = m.route;\n                tag = 'a';\n            }\n\n            // Only generate user taxonomy links if fof/user-directory is enabled\n            if (userLink && app.routes.fof_user_directory) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('fof_user_directory', {q: 'taxonomy:' + term.taxonomy().slug() + ':' + term.slug()});\n                attrs.config = m.route;\n                tag = 'a';\n            }\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return m(tag, attrs, m('span.TaxonomyLabel-text', [\n        term && term.icon() && taxonomyIcon(term, {}, {useColor: false}),\n        ' ' + tagText,\n    ]));\n}\n","module.exports = flarum.core.compat['common/helpers/icon'];","module.exports = flarum.core.compat['common/components/Modal'];","import Model from 'flarum/common/Model';\nimport Term from '../models/Term';\n\n/**\n * Prepares a model for a relationship payload\n * We need to keep the name value for custom terms\n */\nexport default function (term: Term) {\n    if (term.id()) {\n        return Model.getIdentifier(term);\n    }\n\n    return {\n        ...Model.getIdentifier(term),\n        attributes: {\n            name: term.name(),\n        },\n    }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","module.exports = flarum.core.compat['forum/components/DiscussionPage'];","module.exports = flarum.core.compat['common/utils/ItemList'];","module.exports = flarum.core.compat['common/components/LinkButton'];","module.exports = flarum.core.compat['common/Component'];","import Term from '../models/Term';\n\nexport default function (terms: Term[]): Term[] {\n    return terms.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['common/models/Discussion'];","module.exports = flarum.core.compat['common/models/Forum'];","module.exports = flarum.core.compat['common/models/User'];","module.exports = flarum.extensions['flamarkt-core']['common']['models/Product'];","module.exports = flarum.core.compat['common/helpers/highlight'];","import Model from 'flarum/common/Model';\n\nexport default class Taxonomy extends Model {\n    type = Model.attribute('type');\n    name = Model.attribute('name');\n    slug = Model.attribute('slug');\n    description = Model.attribute('description');\n    color = Model.attribute('color');\n    icon = Model.attribute('icon');\n    order = Model.attribute('order');\n    showLabel = Model.attribute('showLabel');\n    showFilter = Model.attribute('showFilter');\n    allowCustomValues = Model.attribute('allowCustomValues');\n    customValueValidation = Model.attribute('customValueValidation');\n    customValueSlugger = Model.attribute('customValueSlugger');\n    minTerms = Model.attribute('minTerms');\n    maxTerms = Model.attribute('maxTerms');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n    canSearch = Model.attribute('canSearch');\n\n    protected apiEndpoint(): string {\n        return '/flamarkt/taxonomies' + (this.exists ? '/' + this.data.id : '');\n    }\n\n    apiOrderEndpoint(): string {\n        return this.apiEndpoint() + '/terms/order';\n    }\n\n    apiTermsEndpoint(): string {\n        return this.apiEndpoint() + '/terms';\n    }\n}\n","import Discussion from 'flarum/common/models/Discussion';\nimport Forum from 'flarum/common/models/Forum';\nimport User from 'flarum/common/models/User';\nimport Model from 'flarum/common/Model';\nimport Product from 'flamarkt/core/common/models/Product';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\n\nexport default function () {\n    app.store.models['flamarkt-taxonomies'] = Taxonomy;\n    app.store.models['flamarkt-taxonomy-terms'] = Term;\n\n    Forum.prototype.taxonomies = Model.hasMany('taxonomies');\n    Discussion.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    User.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    Product.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n}\n","module.exports = flarum.extensions['flamarkt-core']['common']['components/Sortable'];","module.exports = flarum.core.compat['common/utils/string'];","module.exports = flarum.core.compat['common/components/Select'];","module.exports = flarum.extensions['flamarkt-core']['backoffice']['components/BackofficeNav'];","module.exports = flarum.extensions['flamarkt-core']['backoffice']['pages/ProductShowPage'];","module.exports = flarum.core.compat['common/components/Page'];","import {Children} from 'mithril';\nimport Modal from 'flarum/common/components/Modal';\nimport Button from 'flarum/common/components/Button';\n\nexport default abstract class AbstractEditModal extends Modal {\n    dirty: boolean = false;\n\n    className() {\n        return 'Modal--small TaxonomyEditModal';\n    }\n\n    abstract translationPrefix(): string\n\n    abstract isNew(): boolean\n\n    title() {\n        return app.translator.trans(this.translationPrefix() + 'title.' + (this.isNew() ? 'new' : 'edit'));\n    }\n\n    abstract form(): Children;\n\n    content() {\n        return m('.Modal-body', [\n            this.form(),\n            m('.FormGroup', [\n                Button.component({\n                    type: 'submit',\n                    className: 'Button Button--primary',\n                    loading: this.loading,\n                    disabled: !this.dirty,\n                }, app.translator.trans(this.translationPrefix() + 'submit.' + (this.isNew() ? 'new' : 'edit'))),\n                ' ',\n                this.isNew() ? null : Button.component({\n                    className: 'Button Button--link TaxonomyEditModal-delete',\n                    loading: this.loading,\n                    onclick: this.ondelete.bind(this),\n                }, app.translator.trans(this.translationPrefix() + 'delete')),\n            ]),\n        ]);\n    }\n\n    abstract ondelete(): void;\n}\n","import {Vnode} from 'mithril';\nimport extractText from 'flarum/common/utils/extractText';\nimport {slug} from 'flarum/common/utils/string';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport AbstractEditModal from './AbstractEditModal';\nimport {ComponentAttrs} from 'flarum/common/Component';\nimport Term from '../../common/models/Term';\nimport Taxonomy from '../../common/models/Taxonomy';\n\ninterface EditTermModalAttrs extends ComponentAttrs {\n    term: Term\n    taxonomy: Taxonomy\n    onsave?: (term: Term) => void\n    ondelete?: () => void\n}\n\n// @ts-ignore Modal.view not type-hinted\nexport default class EditTermModal extends AbstractEditModal {\n    name!: string\n    slug!: string\n    description!: string\n    color!: string\n    icon!: string\n\n    attrs!: EditTermModalAttrs\n\n    oninit(vnode: Vnode<EditTermModalAttrs, this>) {\n        super.oninit(vnode);\n\n        const {term} = this.attrs;\n\n        this.name = term ? term.name() : '';\n        this.slug = term ? term.slug() : '';\n        this.description = term ? term.description() : '';\n        this.color = term ? term.color() : '';\n        this.icon = term ? term.icon() : '';\n    }\n\n    translationPrefix() {\n        return 'flamarkt-taxonomies.admin.edit-term.';\n    }\n\n    isNew() {\n        return !this.attrs.term;\n    }\n\n    form() {\n        return [\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.name')),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.name,\n                    oninput: withAttr('value', (value: string) => {\n                        this.name = value;\n                        this.slug = slug(value);\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.slug')),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.slug,\n                    oninput: withAttr('value', (value: string) => {\n                        this.slug = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.description')),\n                m('textarea.FormControl', {\n                    value: this.description,\n                    oninput: withAttr('value', (value: string) => {\n                        this.description = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.color')),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.color,\n                    oninput: withAttr('value', (value: string) => {\n                        this.color = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.icon')),\n                m('.helpText', app.translator.trans(this.translationPrefix() + 'field.iconDescription', {\n                    a: m('a', {\n                        href: 'https://fontawesome.com/icons?m=free',\n                        tabindex: -1,\n                    }),\n                })),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.icon,\n                    oninput: withAttr('value', (value: string) => {\n                        this.icon = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n        ];\n    }\n\n    ondelete() {\n        if (!confirm(extractText(app.translator.trans(this.translationPrefix() + 'deleteConfirmation', {\n            name: this.attrs.term.name(),\n        })))) {\n            return;\n        }\n\n        this.loading = true;\n\n        this.attrs.term.delete({\n            errorHandler: this.onerror.bind(this),\n        }).then(() => {\n            app.modal.close();\n\n            if (this.attrs.ondelete) {\n                this.attrs.ondelete();\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n\n    // @ts-ignore wrong Modal.obsubmit typings in Flarum\n    onsubmit(event: Event) {\n        event.preventDefault();\n\n        this.loading = true;\n\n        const record: Term = this.attrs.term || app.store.createRecord('flamarkt-taxonomy-terms');\n\n        const options: any = {\n            errorHandler: this.onerror.bind(this),\n        };\n\n        if (this.isNew()) {\n            options.url = app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiTermsEndpoint();\n        }\n\n        record.save({\n            name: this.name,\n            slug: this.slug,\n            description: this.description,\n            color: this.color,\n            icon: this.icon,\n        }, options).then(() => {\n            app.modal.close();\n\n            if (this.attrs.onsave) {\n                this.attrs.onsave(record);\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n}\n","import {Vnode} from 'mithril';\nimport Component, {ComponentAttrs} from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Sortable from 'flamarkt/core/common/components/Sortable';\nimport sortTerms from '../../common/utils/sortTerms';\nimport EditTermModal from './EditTermModal';\nimport taxonomyIcon from '../../common/helpers/taxonomyIcon';\nimport Term from \"../../common/models/Term\";\nimport Taxonomy from \"../../common/models/Taxonomy\";\n\ninterface TaxonomyTermsListAttrs extends ComponentAttrs {\n    taxonomy: Taxonomy\n}\n\nexport default class TaxonomyTermsList extends Component<TaxonomyTermsListAttrs> {\n    terms: Term[] | null = null\n\n    oninit(vnode: Vnode<TaxonomyTermsListAttrs, this>) {\n        super.oninit(vnode);\n\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiTermsEndpoint(),\n        }).then(result => {\n            this.terms = app.store.pushPayload(result);\n            m.redraw();\n        });\n    }\n\n    view() {\n        return m('.TaxonomyTermEdit', [\n            this.terms === null ? LoadingIndicator.component({}) : this.viewTerms(this.terms),\n        ]);\n    }\n\n    viewTerms(terms: Term[]) {\n        return [\n            m(Sortable, {\n                containerTag: 'ol',\n                className: 'TaxonomyTermList',\n                handleClassName: null,\n                onsort: (origin: number, destination: number) => {\n                    terms.splice(destination, 0, ...terms.splice(origin, 1));\n\n                    app.request({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiOrderEndpoint(),\n                        body: {\n                            order: terms.map(term => term.id()),\n                        },\n                    }).then(result => {\n                        // If there's no error, we save the new order so it can be used in case a redraw is triggered\n                        app.store.pushPayload(result);\n                    }).catch(e => {\n                        // If there's an error, we force a full redraw to make sure the user sees what is saved\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, terms.map((term, index) => m('li.TaxonomyTermListItem', {\n                draggable: true,\n                key: term.id(),\n                style: {\n                    color: term.color(),\n                },\n            }, [\n                taxonomyIcon(term),\n                m('span.TaxonomyTermListItem-name', term.name()),\n                Button.component({\n                    className: 'Button Button--link',\n                    icon: 'fas fa-pencil-alt',\n                    onclick: () => {\n                        app.modal.show(EditTermModal, {\n                            term,\n                            ondelete: () => {\n                                terms.splice(index, 1);\n                            },\n                        });\n                    },\n                }),\n            ]))),\n            Button.component({\n                className: 'Button',\n                onclick: () => {\n                    app.modal.show(EditTermModal, {\n                        taxonomy: this.attrs.taxonomy,\n                        onsave: (term: Term) => {\n                            this.terms = sortTerms([...terms, term]);\n                        },\n                    });\n                },\n            }, app.translator.trans('flamarkt-taxonomies.admin.page.create.term')),\n            ' ',\n            Button.component({\n                className: 'Button',\n                onclick: () => {\n                    app.request({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiOrderEndpoint(),\n                        body: {\n                            order: [],\n                        },\n                    }).then(result => {\n                        this.terms = app.store.pushPayload(result);\n                        m.redraw();\n                    }).catch(e => {\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, app.translator.trans('flamarkt-taxonomies.admin.page.reset-term-order')),\n        ];\n    }\n}\n","import {Vnode} from 'mithril';\nimport AbstractEditModal from './AbstractEditModal';\nimport Taxonomy from '../../common/models/Taxonomy';\nimport {ComponentAttrs} from 'flarum/common/Component';\nimport Select from 'flarum/common/components/Select';\nimport {slug} from 'flarum/common/utils/string';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport extractText from 'flarum/common/utils/extractText';\n\ninterface EditTaxonomyModalAttrs extends ComponentAttrs {\n    taxonomy: Taxonomy\n    onsave?: (taxonomy: Taxonomy) => void\n    ondelete?: () => void\n}\n\n// @ts-ignore Modal.view not type-hinted\nexport default class EditTaxonomyModal extends AbstractEditModal {\n    type!: string\n    name!: string\n    slug!: string\n    description!: string\n    color!: string\n    icon!: string\n    showLabel!: boolean\n    showFilter!: boolean\n    allowCustomValues!: boolean\n    customValueValidation!: string\n    customValueSlugger!: string\n    minTerms!: number | string // Needs string because we leave the field empty for null\n    maxTerms!: number | string\n\n    attrs!: EditTaxonomyModalAttrs\n\n    oninit(vnode: Vnode<EditTaxonomyModalAttrs, this>) {\n        super.oninit(vnode);\n\n        const {taxonomy} = this.attrs;\n\n        this.type = taxonomy ? taxonomy.type() : 'products';\n        this.name = taxonomy ? taxonomy.name() : '';\n        this.slug = taxonomy ? taxonomy.slug() : '';\n        this.description = taxonomy ? taxonomy.description() : '';\n        this.color = taxonomy ? taxonomy.color() : '';\n        this.icon = taxonomy ? taxonomy.icon() : '';\n        this.showLabel = taxonomy ? taxonomy.showLabel() : false;\n        this.showFilter = taxonomy ? taxonomy.showFilter() : false;\n        this.allowCustomValues = taxonomy ? taxonomy.allowCustomValues() : false;\n        this.customValueValidation = (taxonomy ? taxonomy.customValueValidation() : null) || '';\n        this.customValueSlugger = (taxonomy ? taxonomy.customValueSlugger() : null) || 'random';\n        this.minTerms = taxonomy ? taxonomy.minTerms() : '';\n        this.maxTerms = taxonomy ? taxonomy.maxTerms() : '';\n    }\n\n    translationPrefix() {\n        return 'flamarkt-taxonomies.admin.edit-taxonomy.';\n    }\n\n    isNew() {\n        return !this.attrs.taxonomy;\n    }\n\n    form() {\n        return [\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.type')),\n                m('.helpText', app.translator.trans(this.translationPrefix() + 'field.typeDescription')),\n                Select.component({\n                    options: {\n                        products: app.translator.trans(this.translationPrefix() + 'type-options.products'),\n                        discussions: app.translator.trans(this.translationPrefix() + 'type-options.discussions'),\n                        users: app.translator.trans(this.translationPrefix() + 'type-options.users'),\n                    },\n                    value: this.type,\n                    onchange: (value: string) => {\n                        this.type = value;\n                        this.dirty = true;\n                    },\n                    disabled: !this.isNew(),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.name')),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.name,\n                    oninput: withAttr('value', (value: string) => {\n                        this.name = value;\n                        this.slug = slug(value);\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.slug')),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.slug,\n                    oninput: withAttr('value', (value: string) => {\n                        this.slug = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.description')),\n                m('textarea.FormControl', {\n                    value: this.description,\n                    oninput: withAttr('value', (value: string) => {\n                        this.description = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.color')),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.color,\n                    oninput: withAttr('value', (value: string) => {\n                        this.color = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.icon')),\n                m('.helpText', app.translator.trans(this.translationPrefix() + 'field.iconDescription', {\n                    a: m('a', {\n                        href: 'https://fontawesome.com/icons?m=free',\n                        tabindex: -1,\n                    }),\n                })),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.icon,\n                    oninput: withAttr('value', (value: string) => {\n                        this.icon = value;\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', [\n                    m('input', {\n                        type: 'checkbox',\n                        checked: this.showLabel,\n                        onchange: () => {\n                            this.showLabel = !this.showLabel;\n                            this.dirty = true;\n                        },\n                    }),\n                    ' ',\n                    app.translator.trans(this.translationPrefix() + 'field.showLabel'),\n                ]),\n            ]),\n            m('.Form-group', [\n                m('label', [\n                    m('input', {\n                        type: 'checkbox',\n                        checked: this.showFilter,\n                        onchange: () => {\n                            this.showFilter = !this.showFilter;\n                            this.dirty = true;\n                        },\n                    }),\n                    ' ',\n                    app.translator.trans(this.translationPrefix() + 'field.showFilter'),\n                ]),\n            ]),\n            m('.Form-group', [\n                m('label', [\n                    m('input', {\n                        type: 'checkbox',\n                        checked: this.allowCustomValues,\n                        onchange: () => {\n                            this.allowCustomValues = !this.allowCustomValues;\n                            this.dirty = true;\n                        },\n                    }),\n                    ' ',\n                    app.translator.trans(this.translationPrefix() + 'field.allowCustomValues'),\n                ]),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.customValueValidation')),\n                Select.component({\n                    options: {\n                        '': app.translator.trans(this.translationPrefix() + 'validation-options.default'),\n                        alpha_num: app.translator.trans(this.translationPrefix() + 'validation-options.alpha_num'),\n                        alpha_dash: app.translator.trans(this.translationPrefix() + 'validation-options.alpha_dash'),\n                        regex: app.translator.trans(this.translationPrefix() + 'validation-options.regex'),\n                    },\n                    value: this.customValueValidation.indexOf('/') === 0 ? 'regex' : this.customValueValidation,\n                    onchange: (value: string) => {\n                        this.customValueValidation = value === 'regex' ? '//' : value;\n                        this.dirty = true;\n                    },\n                    disabled: !this.allowCustomValues,\n                }),\n                this.customValueValidation.indexOf('/') === 0 ? m('.TaxonomyRegexInput', [\n                    m('span', '/'),\n                    m('input.FormControl', {\n                        type: 'text',\n                        value: this.customValueValidation.split('/')[1],\n                        oninput: withAttr('value', (value: string) => {\n                            this.customValueValidation = '/' + value + '/' + this.customValueValidation.split('/')[2];\n                            this.dirty = true;\n                        }),\n                        disabled: !this.allowCustomValues,\n                    }),\n                    m('span', '/'),\n                    m('input.FormControl', {\n                        type: 'text',\n                        value: this.customValueValidation.split('/')[2],\n                        oninput: withAttr('value', (value: string) => {\n                            this.customValueValidation = '/' + this.customValueValidation.split('/')[1] + '/' + value;\n                            this.dirty = true;\n                        }),\n                        disabled: !this.allowCustomValues,\n                    }),\n                ]) : null,\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.customValueSlugger')),\n                m('.helpText', app.translator.trans(this.translationPrefix() + 'field.customValueSluggerDescription')),\n                Select.component({\n                    options: {\n                        random: app.translator.trans(this.translationPrefix() + 'slugger-options.random'),\n                        alpha_dash: app.translator.trans(this.translationPrefix() + 'slugger-options.alpha_dash'),\n                        transliterator: app.translator.trans(this.translationPrefix() + 'slugger-options.transliterator'),\n                    },\n                    value: this.customValueSlugger,\n                    onchange: (value: string) => {\n                        this.customValueSlugger = value;\n                        this.dirty = true;\n                    },\n                    disabled: !this.allowCustomValues,\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.countRequired')),\n                m('.helpText', app.translator.trans(this.translationPrefix() + 'field.countRequiredDescription')),\n                m('.TaxonomyModal-rangeInput', [\n                    m('input.FormControl', {\n                        type: 'number',\n                        min: 0,\n                        step: 1,\n                        value: this.minTerms,\n                        oninput: withAttr('value', (value: string) => {\n                            this.minTerms = parseInt(value) || '';\n                            this.dirty = true;\n                        }),\n                    }),\n                    ' ',\n                    app.translator.trans(this.translationPrefix() + 'field.rangeSeparatorText'),\n                    ' ',\n                    m('input.FormControl', {\n                        type: 'number',\n                        min: 0,\n                        step: 1,\n                        value: this.maxTerms,\n                        oninput: withAttr('value', (value: string) => {\n                            this.maxTerms = parseInt(value) || '';\n                            this.dirty = true;\n                        }),\n                    }),\n                ]),\n            ]),\n        ];\n    }\n\n    ondelete() {\n        if (!confirm(extractText(app.translator.trans(this.translationPrefix() + 'deleteConfirmation', {\n            name: this.attrs.taxonomy.name(),\n        })))) {\n            return;\n        }\n\n        this.loading = true;\n\n        this.attrs.taxonomy.delete({\n            errorHandler: this.onerror.bind(this),\n        }).then(() => {\n            app.modal.close();\n\n            if (this.attrs.ondelete) {\n                this.attrs.ondelete();\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n\n    // @ts-ignore wrong Modal.obsubmit typings in Flarum\n    onsubmit(event: Event) {\n        event.preventDefault();\n\n        this.loading = true;\n\n        const record: Taxonomy = this.attrs.taxonomy || app.store.createRecord('flamarkt-taxonomies');\n\n        record.save({\n            type: this.type,\n            name: this.name,\n            slug: this.slug,\n            description: this.description,\n            color: this.color,\n            icon: this.icon,\n            show_label: this.showLabel,\n            show_filter: this.showFilter,\n            allow_custom_values: this.allowCustomValues,\n            custom_value_validation: this.customValueValidation,\n            custom_value_slugger: this.customValueSlugger,\n            min_terms: this.minTerms,\n            max_terms: this.maxTerms,\n        }, {\n            errorHandler: this.onerror.bind(this),\n        }).then(() => {\n            app.modal.close();\n\n            if (this.attrs.onsave) {\n                this.attrs.onsave(record);\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n}\n","import {Vnode} from 'mithril';\nimport {ComponentAttrs} from 'flarum/common/Component';\nimport Page from 'flarum/common/components/Page';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Sortable from 'flamarkt/core/common/components/Sortable';\nimport sortTaxonomies from '../../common/utils/sortTaxonomies';\nimport TaxonomyTermsList from './TaxonomyTermsList';\nimport EditTaxonomyModal from './EditTaxonomyModal';\nimport taxonomyIcon from '../../common/helpers/taxonomyIcon';\nimport Taxonomy from \"../../common/models/Taxonomy\";\n\nexport default class TaxonomiesPage extends Page {\n    tabIndex: number = 0;\n    taxonomies: Taxonomy[] | null = null;\n\n    oninit(vnode: Vnode<ComponentAttrs, this>) {\n        super.oninit(vnode);\n\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + '/flamarkt/taxonomies',\n        }).then(result => {\n            this.taxonomies = app.store.pushPayload(result);\n            m.redraw();\n        });\n    }\n\n    view() {\n        return m('.TaxonomiesPage', m('.container', [\n            this.taxonomies === null ? LoadingIndicator.component({}) : this.viewTaxonomies(this.taxonomies),\n        ]));\n    }\n\n    viewTaxonomies(taxonomies: Taxonomy[]) {\n        return [\n            m('h2', app.translator.trans('flamarkt-taxonomies.admin.page.title')),\n            m(Sortable, {\n                className: 'TaxonomyTabs',\n                direction: 'horizontal',\n                handleClassName: null,\n                onsort: (origin: number, destination: number) => {\n                    taxonomies.splice(destination, 0, ...taxonomies.splice(origin, 1));\n\n                    app.request({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + '/flamarkt/taxonomies/order',\n                        body: {\n                            order: taxonomies.map(taxonomy => taxonomy.id()),\n                        },\n                    }).then(result => {\n                        this.taxonomies = app.store.pushPayload(result);\n                        this.tabIndex = 0;\n                    }).catch(e => {\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, [\n                ...taxonomies.map((taxonomy, index) => m('.TaxonomyTab', {\n                    draggable: true,\n                    key: taxonomy.id(),\n                    onclick: () => {\n                        this.tabIndex = index;\n                    },\n                    className: this.tabIndex === index ? 'active' : '',\n                    style: {\n                        color: taxonomy.color(),\n                    },\n                }, [\n                    taxonomyIcon(taxonomy),\n                    ' ',\n                    taxonomy.name(),\n                    ' ',\n                    Button.component({\n                        className: 'Button Button--link',\n                        icon: 'fas fa-pencil-alt',\n                        onclick: () => {\n                            app.modal.show(EditTaxonomyModal, {\n                                taxonomy,\n                                ondelete: () => {\n                                    taxonomies.splice(index, 1);\n                                    this.tabIndex = 0;\n                                },\n                            });\n                        },\n                    }),\n                ])),\n                Button.component({\n                    key: 'new',\n                    className: 'TaxonomyTab',\n                    icon: 'fas fa-plus',\n                    onclick: () => {\n                        app.modal.show(EditTaxonomyModal, {\n                            onsave: (taxonomy: Taxonomy) => {\n                                this.taxonomies = sortTaxonomies([...taxonomies, taxonomy]);\n                                this.tabIndex = this.taxonomies.findIndex(t => t === taxonomy);\n                            },\n                        });\n                    },\n                }, app.translator.trans('flamarkt-taxonomies.admin.page.create.taxonomy')),\n            ]),\n            // Nested DIVs to use key to force a redraw of the list\n            this.tabIndex < taxonomies.length ? m('div', m('div', {\n                key: taxonomies[this.tabIndex].id(),\n            }, TaxonomyTermsList.component({\n                taxonomy: taxonomies[this.tabIndex],\n            }))) : null,\n        ];\n    }\n}\n","import {Vnode, VnodeDOM} from 'mithril';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport icon from 'flarum/common/helpers/icon';\nimport ChooseTaxonomyTermsModal, {ChooseTaxonomyTermsModalAttrs} from './ChooseTaxonomyTermsModal';\nimport Term from '../models/Term';\n\nexport default class ChooseTaxonomyTermsDropdown extends ChooseTaxonomyTermsModal {\n    lastSaveState: 'success' | 'error' | 'neutral' = 'neutral'\n    dropdownIsFocused: boolean = false\n    onmousedown!: (event: Event) => void\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        this.navigator.when(event => {\n            // Same as the original when() in the modal\n            // (we are replacing the original since we can have a single callback)\n            if (event.key === ' ' && this.searchFilter === '') {\n                event.preventDefault();\n                this.select(event);\n\n                return false;\n            }\n\n            // We don't want Tab to act as select, as this prevent moving from field to field\n            return event.key !== 'Tab';\n        });\n    }\n\n    oncreate(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        // Not calling super because it just tries to do modal stuff\n        //super.oncreate(vnode);\n\n        // Since we are not calling the original Component.oncreate, we need to copy the dom reference manually\n        this.element = vnode.dom;\n\n        this.onmousedown = (event: Event) => {\n            const dropdown = vnode.dom.querySelector('.Dropdown-menu');\n\n            if (\n                dropdown &&\n                dropdown.contains(event.target as HTMLElement)\n            ) {\n                if (!this.dropdownIsFocused) {\n                    this.dropdownIsFocused = true;\n                    m.redraw();\n                }\n            } else {\n                if (this.dropdownIsFocused) {\n                    this.dropdownIsFocused = false;\n                    m.redraw();\n                }\n            }\n        };\n\n        document.addEventListener('mousedown', this.onmousedown);\n    }\n\n    onbeforeremove() {\n        // Do nothing. Prevent parent method from running because it will try to access this.attrs.state which isn't set\n    }\n\n    onremove(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.onremove(vnode);\n\n        document.removeEventListener('mousedown', this.onmousedown);\n    }\n\n    view() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.ChooseTaxonomyTermsDropdown', m('form', {\n            // The form element is only there to prevent any unwanted page POST submission\n            // It's also used so that onready() continues to focus the field when called\n            // Due to the jQuery selector in onready, the form cannot be the root element of view()\n            onsubmit(event: Event) {\n                event.preventDefault();\n            },\n        }, [\n            m('.ChooseTaxonomyTermsInput', [\n                m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n                // .ChooseTaxonomyTermsModal-list must be kept because it's used by the javascript of the keyboard navigation\n                this.listAvailableTerms(this.filteredAvailableTerms()),\n            ]),\n            description ? m('p', description) : null,\n        ]));\n    }\n\n    formItems() {\n        const items = super.formItems();\n\n        items.remove('submit');\n\n        let status = null;\n\n        if (this.saving) {\n            status = LoadingIndicator.component();\n        } else if (this.lastSaveState === 'success') {\n            status = icon('fas fa-check');\n        } else if (this.lastSaveState === 'error') {\n            status = icon('fas fa-times');\n        }\n\n        items.add('status', m('.ChooseTaxonomyTermsStatus', status));\n\n        return items;\n    }\n\n    listAvailableTerms(terms: Term[]) {\n        // We need two attributes to hold the dropdown open\n        // One is the input focus, managed by the modal\n        // The second one is needed because there's a short moment during a click where the focus is lost on the input\n        // mousedown triggers first, then the input blur, and only in mouseup can we put focus on the input again\n        if (!(this.inputIsFocused || this.dropdownIsFocused) || terms.length === 0) {\n            return null;\n        }\n\n        let content;\n\n        if (this.availableTerms === null) {\n            content = LoadingIndicator.component();\n        } else {\n            content = terms.map(this.listAvailableTerm.bind(this));\n        }\n\n        return m('ul.Dropdown-menu.ChooseTaxonomyTermsModal-list', content);\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li', super.listAvailableTerm(term, index));\n    }\n\n    toggleTerm(term: Term) {\n        super.toggleTerm(term);\n\n        // Auto-save\n        this.lastSaveState = 'neutral';\n        this.saveResource();\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case there's nothing to select\n        // We reset the typed value to force the user to enter something else and/or correctly reflect what is saved\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Same as original select(), but without the submission logic (because we auto-save)\n        // This now allows using Enter to remove a highlighted item as well\n        $element[0].dispatchEvent(new Event('click'));\n    }\n\n    onsaved() {\n        this.lastSaveState = 'success';\n        super.onsaved();\n    }\n\n    onerror() {\n        this.lastSaveState = 'error';\n        super.onerror();\n    }\n}\n","import BackofficeNav from 'flamarkt/core/backoffice/components/BackofficeNav';\nimport ProductShowPage from 'flamarkt/core/backoffice/pages/ProductShowPage';\nimport {extend} from 'flarum/common/extend';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport LinkButton from 'flarum/common/components/LinkButton';\nimport TaxonomiesPage from './components/TaxonomiesPage';\nimport addModels from '../common/addModels';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport ChooseTaxonomyTermsDropdown from '../common/components/ChooseTaxonomyTermsDropdown';\n\napp.initializers.add('flamarkt-taxonomies', () => {\n    addModels();\n\n    app.routes.taxonomies = {\n        path: '/taxonomies',\n        component: TaxonomiesPage,\n    };\n\n    extend(BackofficeNav.prototype, 'items', function (items: ItemList) {\n        items.add('taxonomies', LinkButton.component({\n            href: app.route('taxonomies'),\n            icon: 'fas fa-tags',\n        }, app.translator.trans('flamarkt-taxonomies.admin.menu.title')));\n    });\n\n    extend(ProductShowPage.prototype, 'fields', function (items: ItemList) {\n        if (!this.product.exists || !this.product.attribute('canEditTaxonomies')) {\n            return;\n        }\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'products') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), m('.Form-group', [\n                m('label', taxonomy.name()),\n                m(ChooseTaxonomyTermsDropdown, {\n                    resource: this.product,\n                    taxonomy,\n                }),\n            ]), -100);\n        });\n    });\n});\n"],"sourceRoot":""}