{"version":3,"file":"backoffice.js","mappings":"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","sources":["webpack://@flamarkt/taxonomies/webpack/bootstrap","webpack://@flamarkt/taxonomies/webpack/runtime/compat get default export","webpack://@flamarkt/taxonomies/webpack/runtime/define property getters","webpack://@flamarkt/taxonomies/webpack/runtime/hasOwnProperty shorthand","webpack://@flamarkt/taxonomies/webpack/runtime/make namespace object","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['app']\"","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/app']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Button']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Switch']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/helpers/highlight']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/classList']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/extractText']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['utils/KeyboardNavigatable']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Link']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/extract']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/Model']\"","webpack://@flamarkt/taxonomies/./src/common/models/Term.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/taxonomyIcon.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/termLabel.ts","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@flamarkt/taxonomies/./src/common/utils/termToIdentifier.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsModal.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsDropdown.ts","webpack://@flamarkt/taxonomies/./src/common/utils/sortTaxonomies.ts","webpack://@flamarkt/taxonomies/./src/common/utils/sortTerms.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/termsLabel.ts","webpack://@flamarkt/taxonomies/./src/common/models/Taxonomy.ts","webpack://@flamarkt/taxonomies/./src/common/compat.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/labelsFromMultipleTaxonomiesList.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Alert']\"","webpack://@flamarkt/taxonomies/./src/backoffice/components/AbstractEditModal.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Select']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/string']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/withAttr']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/AbstractRelationshipSelect']\"","webpack://@flamarkt/taxonomies/./src/backoffice/components/TagRelationshipSelect.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['admin/utils/isExtensionEnabled']\"","webpack://@flamarkt/taxonomies/./src/backoffice/components/EditTaxonomyModal.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/EditTermModal.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Page']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/Sortable']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/Component']\"","webpack://@flamarkt/taxonomies/./src/backoffice/components/TaxonomyTermsList.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/TaxonomiesPage.ts","webpack://@flamarkt/taxonomies/./src/backoffice/compat.ts","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['components/BackofficeNav']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/ActiveLinkButton']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-core']||{})['backoffice']||{})['pages/ProductShowPage']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/extend']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/LinkButton']\"","webpack://@flamarkt/taxonomies/./src/backoffice/components/TaxonomiesRedirectPage.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/Forum']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/User']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-core']||{})['common']||{})['models/Product']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/computed']\"","webpack://@flamarkt/taxonomies/./src/backoffice/models/SimplifiedTag.ts","webpack://@flamarkt/taxonomies/./src/backoffice/index.ts","webpack://@flamarkt/taxonomies/./src/common/addModels.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['app'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Modal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Switch'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/highlight'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/classList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extractText'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['utils/KeyboardNavigatable'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extract'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","import Model from 'flarum/common/Model';\nimport Taxonomy from './Taxonomy';\n\nexport default class Term extends Model {\n    name = Model.attribute<string>('name');\n    slug = Model.attribute<string>('slug');\n    description = Model.attribute<string>('description');\n    color = Model.attribute<string>('color');\n    icon = Model.attribute<string>('icon');\n    order = Model.attribute<number>('order');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n\n    taxonomy = Model.hasOne<Taxonomy>('taxonomy');\n\n    protected apiEndpoint(): string {\n        // @ts-ignore data.id not type-hinted\n        return '/flamarkt/taxonomy-terms' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","import {Attributes} from 'mithril';\nimport classList from 'flarum/common/utils/classList';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\ninterface Settings {\n    useColor?: boolean\n}\n\nexport default function taxonomyIcon(term: Taxonomy | Term, attrs: Attributes = {}, settings: Settings = {}) {\n    const hasIcon = term && term.icon();\n    const {useColor = true} = settings;\n\n    attrs.className = classList([\n        attrs.className,\n        'icon',\n        hasIcon ? term.icon() : 'TaxonomyIcon',\n    ]);\n\n    if (term) {\n        attrs.style = attrs.style || {};\n\n        if (hasIcon) {\n            attrs.style.color = useColor ? term.color() : '';\n        } else {\n            attrs.style.backgroundColor = term.color();\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return hasIcon ? m('i', attrs) : m('span', attrs);\n}\n","import {Attributes} from 'mithril';\nimport app from 'flarum/common/app';\nimport Link from 'flarum/common/components/Link';\nimport extract from 'flarum/common/utils/extract';\nimport Term from '../models/Term';\nimport taxonomyIcon from './taxonomyIcon';\nimport Taxonomy from '../models/Taxonomy';\n\nexport default function termLabel(term: Taxonomy | Term | null = null, attrs: Attributes = {}) {\n    attrs.style = attrs.style || {};\n    attrs.className = 'TaxonomyLabel ' + (attrs.className || '');\n\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n    const tagText = term ? term.name() : app.translator.trans('flarum-tags.lib.deleted_tag_text');\n    let tag: any = 'span';\n\n    if (term) {\n        const color = term.color();\n        if (color) {\n            attrs.style.backgroundColor = attrs.style.color = color;\n            attrs.className += ' colored';\n        }\n\n        // We need to check for instanceof because this method is also used with a taxonomy passed as a value\n        if (term instanceof Term && term.taxonomy() && term.taxonomy().canSearch()) {\n            if (discussionLink) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('index', {[term.taxonomy().slug()]: term.slug()});\n                tag = Link;\n            }\n\n            // Only generate user taxonomy links if fof/user-directory is enabled\n            if (userLink && app.routes.fof_user_directory) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('fof_user_directory', {q: 'taxonomy:' + term.taxonomy().slug() + ':' + term.slug()});\n                tag = Link;\n            }\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return m(tag, attrs, m('span.TaxonomyLabel-text', [\n        term && term.icon() && taxonomyIcon(term, {}, {useColor: false}),\n        ' ' + tagText,\n    ]));\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import Model from 'flarum/common/Model';\nimport Term from '../models/Term';\n\n/**\n * Prepares a model for a relationship payload\n * We need to keep the name value for custom terms\n */\nexport default function (term: Term) {\n    if (term.id()) {\n        return Model.getIdentifier(term);\n    }\n\n    return {\n        ...Model.getIdentifier(term),\n        attributes: {\n            name: term.name(),\n        },\n    }\n}\n","import {Children, Vnode} from 'mithril';\nimport app from 'flarum/common/app';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Modal, {IInternalModalAttrs} from 'flarum/common/components/Modal';\nimport Model from 'flarum/common/Model';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Switch from 'flarum/common/components/Switch';\nimport highlight from 'flarum/common/helpers/highlight';\nimport classList from 'flarum/common/utils/classList';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport extractText from 'flarum/common/utils/extractText';\n\nimport KeyboardNavigatable from 'flamarkt/backoffice/common/utils/KeyboardNavigatable';\n\nimport termLabel from '../helpers/termLabel';\nimport taxonomyIcon from '../helpers/taxonomyIcon';\nimport termToIdentifier from '../utils/termToIdentifier';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\n/**\n * Comparing objects directly is unreliable because we will be creating some new records as well\n * So we use this method to do a proper deep check\n */\nfunction isSameTerm(a: Term, b: Term) {\n    if (a.data.type !== b.data.type) {\n        return false;\n    }\n\n    // If both have an ID and it's different\n    if (a.id() && b.id()) {\n        return a.id() === b.id();\n    }\n\n    // If only one has an ID, it's different\n    if (!a.id() !== !b.id()) {\n        return false;\n    }\n\n    // If both don't have an ID, it's a new value and we compare the name\n    return a.name() === b.name();\n}\n\nexport interface ChooseTaxonomyTermsModalAttrs extends IInternalModalAttrs {\n    resource: Model\n    taxonomy: Taxonomy\n    selectedTerms: Term[]\n    onsubmit?: (terms: Term[]) => void\n}\n\n/**\n * Based on Flarum's TagDiscussionModal\n */\nexport default class ChooseTaxonomyTermsModal extends Modal<ChooseTaxonomyTermsModalAttrs> {\n    availableTerms: Term[] | null = null;\n    selectedTerms: Term[] = [];\n    searchFilter: string = '';\n    activeListIndex: number = 0;\n    inputIsFocused: boolean = false;\n    saving: boolean = false;\n    bypassReqs: boolean = false;\n    navigator!: KeyboardNavigatable;\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        if (this.attrs.selectedTerms) {\n            this.attrs.selectedTerms.forEach(this.addTerm.bind(this));\n        } else if (this.attrs.resource) {\n            this.attrs.resource.taxonomyTerms().forEach((term: Term) => {\n                if (term.taxonomy().id() === this.attrs.taxonomy.id()) {\n                    this.addTerm(term);\n                }\n            });\n        }\n\n        app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiEndpoint() + '/terms',\n        }).then(result => {\n            this.availableTerms = app.store.pushPayload<Term[]>(result);\n\n            m.redraw();\n        });\n\n        this.navigator = new KeyboardNavigatable();\n        this.navigator\n            .onUp(() => this.setIndex(this.activeListIndex - 1, true))\n            .onDown(() => this.setIndex(this.activeListIndex + 1, true))\n            .onSelect(this.select.bind(this))\n            .onRemove(() => {\n                if (!this.selectedTerms.length) {\n                    return;\n                }\n\n                this.toggleTerm(this.selectedTerms[this.selectedTerms.length - 1]);\n            })\n            .when(event => {\n                // We want to allow selecting with space because it's a common way to select\n                // However this interferes with the ability to enter spaces\n                // So we will have space act as select, but only if nothing is typed yet\n                if (event.key === ' ' && this.searchFilter === '') {\n                    event.preventDefault();\n                    this.select(event);\n\n                    return false;\n                }\n\n                return true;\n            });\n    }\n\n    indexInSelectedTerms(term: Term) {\n        return this.selectedTerms.findIndex(t => isSameTerm(t, term));\n    }\n\n    addTerm(term: Term) {\n        this.selectedTerms.push(term);\n    }\n\n    removeTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.selectedTerms.splice(index, 1);\n        }\n    }\n\n    className() {\n        return 'ChooseTaxonomyTermsModal';\n    }\n\n    title() {\n        return this.attrs.resource\n            ? app.translator.trans('flamarkt-taxonomies.lib.modal.title.edit', {\n                taxonomy: this.attrs.taxonomy.name(),\n                title: m('em', this.attrs.resource.title ? this.attrs.resource.title() : this.attrs.resource.displayName()),\n            })\n            : app.translator.trans('flamarkt-taxonomies.lib.modal.title.new', {\n                taxonomy: this.attrs.taxonomy.name(),\n            });\n    }\n\n    getInstruction() {\n        if (this.bypassReqs) {\n            return '';\n        }\n\n        const count = this.selectedTerms.length;\n\n        if (this.attrs.taxonomy.minTerms() && count < this.attrs.taxonomy.minTerms()) {\n            const remaining = this.attrs.taxonomy.minTerms() - count;\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholder', {\n                count: remaining,\n            });\n        } else if (count === 0) {\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholderOptional');\n        }\n\n        return '';\n    }\n\n    filteredAvailableTerms() {\n        let availableTerms = this.availableTerms === null ? [] : this.availableTerms;\n        const filter = this.searchFilter.toLowerCase();\n\n        if (filter) {\n            availableTerms = availableTerms.filter(term => term.name().substr(0, filter.length).toLowerCase() === filter);\n\n            if (\n                this.attrs.taxonomy.allowCustomValues() &&\n                !availableTerms.some(term => term.name().toLowerCase() === filter)\n            ) {\n                const validation = this.attrs.taxonomy.customValueValidation();\n                let regex: RegExp | null = null;\n\n                if (validation === 'alpha_num') {\n                    regex = /^[a-z0-9]$/i;\n                } else if (validation === 'alpha_dash') {\n                    regex = /^[a-z0-9_-]$/i;\n                } else if (validation.indexOf('/') === 0) {\n                    const parts = validation.split('/');\n                    if (parts.length === 3) {\n                        regex = new RegExp(parts[1], parts[2]);\n                    }\n                }\n\n                if (!regex || regex.test(this.searchFilter)) {\n                    availableTerms.push(app.store.createRecord('flamarkt-taxonomy-terms', {\n                        attributes: {\n                            name: this.searchFilter,\n                        },\n                    }));\n                }\n            }\n        }\n\n        if (!this.bypassReqs && this.attrs.taxonomy.maxTerms() && this.selectedTerms.length >= this.attrs.taxonomy.maxTerms()) {\n            availableTerms = [];\n        }\n\n        return availableTerms;\n    }\n\n    content() {\n        return this.contentItems().toArray();\n    }\n\n    contentItems() {\n        const items = new ItemList();\n\n        items.add('form', this.viewForm(), 20);\n\n        items.add('terms', this.listAvailableTerms(this.filteredAvailableTerms()), 10);\n\n        if (this.attrs.taxonomy.canBypassTermCounts() && (this.attrs.taxonomy.minTerms() || this.attrs.taxonomy.maxTerms())) {\n            items.add('bypass', m('.Modal-body.ChooseTaxonomyTermsModal-form-bypass', Switch.component({\n                state: this.bypassReqs,\n                onchange: (checked: boolean) => {\n                    this.bypassReqs = checked;\n                },\n            }, app.translator.trans('flamarkt-taxonomies.lib.modal.bypassTermCounts'))), -10);\n        }\n\n        return items;\n    }\n\n    viewForm() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.Modal-body', [\n            description ? m('p', description) : null,\n            m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n        ]);\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('input', m('.ChooseTaxonomyTermsModal-form-input', m('.TermsInput.FormControl', {\n            className: this.inputIsFocused ? 'focus' : '',\n        }, this.inputItems().toArray())), 20);\n\n        items.add('submit', m('.ChooseTaxonomyTermsModal-form-submit.App-primaryControl', Button.component({\n            type: 'submit',\n            className: 'Button Button--primary',\n            disabled: !this.bypassReqs && this.attrs.taxonomy.minTerms() && this.selectedTerms.length < this.attrs.taxonomy.minTerms(),\n            icon: 'fas fa-check',\n            loading: this.saving,\n        }, app.translator.trans('flamarkt-taxonomies.lib.modal.submit'))), 10);\n\n        return items;\n    }\n\n    inputItems() {\n        const items = new ItemList();\n\n        items.add('selected', this.selectedTerms.map(term => {\n            return m('span.TermsInput-term', {\n                onclick: () => {\n                    this.toggleTerm(term);\n                    this.onready();\n                },\n            }, termLabel(term));\n        }), 20);\n\n        items.add('control', m('input.FormControl', {\n            placeholder: extractText(this.getInstruction()),\n            value: this.searchFilter,\n            oninput: (event: Event) => {\n                this.searchFilter = (event.target as HTMLInputElement).value;\n                this.activeListIndex = 0;\n            },\n            onkeydown: this.navigator.navigate.bind(this.navigator),\n            // Use local methods so that other extensions can extend behaviour\n            onfocus: this.oninputfocus.bind(this),\n            onblur: this.oninputblur.bind(this),\n        }), 10);\n\n        return items;\n    }\n\n    oninputfocus() {\n        this.inputIsFocused = true;\n    }\n\n    oninputblur() {\n        this.inputIsFocused = false;\n    }\n\n    listAvailableTerms(terms: Term[]): Children {\n        return m('.Modal-footer', this.availableTerms === null ?\n            LoadingIndicator.component() :\n            m('ul.ChooseTaxonomyTermsModal-list.SelectTermList', {\n                className: terms.some(term => term.description()) ? 'SelectTermList--with-descriptions' : '',\n            }, terms.map(this.listAvailableTerm.bind(this)))\n        );\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li.SelectTermListItem', {\n            'data-index': index,\n            className: classList({\n                colored: !!term.color(),\n                selected: this.indexInSelectedTerms(term) !== -1,\n                active: this.activeListIndex === index,\n            }),\n            style: {color: term.color()},\n            onmouseover: () => this.activeListIndex = index,\n            onclick: this.toggleTerm.bind(this, term),\n        }, [\n            taxonomyIcon(term),\n            m('span.SelectTermListItem-name', term.exists ? highlight(term.name(), this.searchFilter) : app.translator.trans('flamarkt-taxonomies.lib.modal.custom', {\n                value: m('em', term.name()),\n            })),\n            term.description() ? m('span.SelectTermListItem-description', term.description()) : '',\n        ]);\n    }\n\n    toggleTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.removeTerm(term);\n        } else {\n            this.addTerm(term);\n        }\n\n        if (this.searchFilter) {\n            this.searchFilter = '';\n            this.activeListIndex = 0;\n        }\n\n        // Defer re-focusing to next browser draw\n        setTimeout(() => {\n            this.onready();\n        });\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case we don't want to submit just yet, but we will delete the text\n        // so that typing enter multiple times does end up submitting\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Ctrl + Enter submits the selection, just Enter completes the current entry\n        if (e.metaKey || e.ctrlKey || $element.is('.selected')) {\n            if (this.selectedTerms.length) {\n                // Calling .trigger() on the form with jQuery doesn't seem to trigger the onsubmit, so we'll just do that directly instead\n                this.onsubmit();\n            }\n        } else {\n            $element[0].dispatchEvent(new Event('click'));\n        }\n    }\n\n    getDomElement(index: number) {\n        return this.$(`.SelectTermListItem[data-index=\"${index}\"]`);\n    }\n\n    setIndex(index: number, scrollToItem: boolean) {\n        const $dropdown = this.$('.ChooseTaxonomyTermsModal-list');\n\n        const indexLength = this.$('.SelectTermListItem').length;\n\n        if (index < 0) {\n            index = indexLength - 1;\n        } else if (index >= indexLength) {\n            index = 0;\n        }\n\n        const $item = this.getDomElement(index);\n        this.activeListIndex = index;\n\n        m.redraw();\n\n        if (scrollToItem) {\n            const dropdownScroll = $dropdown.scrollTop() || 0;\n            const dropdownTop = $dropdown.offset()?.top || 0;\n            const dropdownBottom = dropdownTop + ($dropdown.outerHeight() || 0);\n            const itemTop = $item.offset()?.top || 0;\n            const itemBottom = itemTop + ($item.outerHeight() || 0);\n\n            let scrollTop;\n            if (itemTop < dropdownTop) {\n                scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n            } else if (itemBottom > dropdownBottom) {\n                scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n            }\n\n            if (typeof scrollTop !== 'undefined') {\n                $dropdown.stop(true).animate({scrollTop}, 100);\n            }\n        }\n    }\n\n    onsubmit(event?: Event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.attrs.resource) {\n            this.saveResource();\n\n            // Do not run the normal code - it might close the modal even if an error occurred\n            return;\n        }\n\n        if (this.attrs.onsubmit) this.attrs.onsubmit(this.selectedTerms);\n\n        app.modal.close();\n    }\n\n    saveResource() {\n        this.saving = true;\n\n        this.attrs.resource.save({\n            relationships: {\n                taxonomies: [\n                    {\n                        verbatim: true, // Flarum workaround, defined in flamarkt/core\n                        type: 'flamarkt-taxonomies',\n                        id: this.attrs.taxonomy.id(),\n                        relationships: {\n                            terms: {\n                                data: this.selectedTerms.map(termToIdentifier),\n                            },\n                        },\n                    },\n                ],\n            },\n        }).then(this.onsaved.bind(this), this.onerror.bind(this));\n    }\n\n    onsaved() {\n        // Need to check if DiscussionPage exists because in backoffice frontend the import will be undefined\n        if (DiscussionPage && app.current.matches(DiscussionPage)) {\n            app.current.get('stream').update();\n        }\n        this.saving = false;\n        m.redraw();\n\n        app.modal.close();\n    }\n\n    onerror() {\n        this.saving = false;\n        m.redraw();\n    }\n}\n","import {Vnode, VnodeDOM} from 'mithril';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport icon from 'flarum/common/helpers/icon';\nimport ChooseTaxonomyTermsModal, {ChooseTaxonomyTermsModalAttrs} from './ChooseTaxonomyTermsModal';\nimport Term from '../models/Term';\n\nexport default class ChooseTaxonomyTermsDropdown extends ChooseTaxonomyTermsModal {\n    lastSaveState: 'success' | 'error' | 'neutral' = 'neutral'\n    dropdownIsFocused: boolean = false\n    onmousedown!: (event: Event) => void\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        this.navigator.when(event => {\n            // Same as the original when() in the modal\n            // (we are replacing the original since we can have a single callback)\n            if (event.key === ' ' && this.searchFilter === '') {\n                event.preventDefault();\n                this.select(event);\n\n                return false;\n            }\n\n            // We don't want Tab to act as select, as this prevent moving from field to field\n            return event.key !== 'Tab';\n        });\n    }\n\n    oncreate(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        // Not calling super because it just tries to do modal stuff\n        //super.oncreate(vnode);\n\n        // Since we are not calling the original Component.oncreate, we need to copy the dom reference manually\n        this.element = vnode.dom;\n\n        this.onmousedown = (event: Event) => {\n            const dropdown = vnode.dom.querySelector('.Dropdown-menu');\n\n            if (\n                dropdown &&\n                dropdown.contains(event.target as HTMLElement)\n            ) {\n                if (!this.dropdownIsFocused) {\n                    this.dropdownIsFocused = true;\n                    m.redraw();\n                }\n            } else {\n                if (this.dropdownIsFocused) {\n                    this.dropdownIsFocused = false;\n                    m.redraw();\n                }\n            }\n        };\n\n        document.addEventListener('mousedown', this.onmousedown);\n    }\n\n    onbeforeremove() {\n        // Do nothing. Prevent parent method from running because it will try to access this.attrs.state which isn't set\n    }\n\n    onremove(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.onremove(vnode);\n\n        document.removeEventListener('mousedown', this.onmousedown);\n    }\n\n    view() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.ChooseTaxonomyTermsDropdown', m('form', {\n            // The form element is only there to prevent any unwanted page POST submission\n            // It's also used so that onready() continues to focus the field when called\n            // Due to the jQuery selector in onready, the form cannot be the root element of view()\n            onsubmit(event: Event) {\n                event.preventDefault();\n            },\n        }, [\n            m('.ChooseTaxonomyTermsInput', [\n                m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n                // .ChooseTaxonomyTermsModal-list must be kept because it's used by the javascript of the keyboard navigation\n                this.listAvailableTerms(this.filteredAvailableTerms()),\n            ]),\n            description ? m('p', description) : null,\n        ]));\n    }\n\n    formItems() {\n        const items = super.formItems();\n\n        items.remove('submit');\n\n        let status = null;\n\n        if (this.saving) {\n            status = LoadingIndicator.component();\n        } else if (this.lastSaveState === 'success') {\n            status = icon('fas fa-check');\n        } else if (this.lastSaveState === 'error') {\n            status = icon('fas fa-times');\n        }\n\n        items.add('status', m('.ChooseTaxonomyTermsStatus', status));\n\n        return items;\n    }\n\n    listAvailableTerms(terms: Term[]) {\n        // We need two attributes to hold the dropdown open\n        // One is the input focus, managed by the modal\n        // The second one is needed because there's a short moment during a click where the focus is lost on the input\n        // mousedown triggers first, then the input blur, and only in mouseup can we put focus on the input again\n        if (!(this.inputIsFocused || this.dropdownIsFocused) || terms.length === 0) {\n            return null;\n        }\n\n        let content;\n\n        if (this.availableTerms === null) {\n            content = LoadingIndicator.component();\n        } else {\n            content = terms.map(this.listAvailableTerm.bind(this));\n        }\n\n        return m('ul.Dropdown-menu.ChooseTaxonomyTermsModal-list', content);\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li', super.listAvailableTerm(term, index));\n    }\n\n    toggleTerm(term: Term) {\n        super.toggleTerm(term);\n\n        // Auto-save\n        this.lastSaveState = 'neutral';\n        this.saveResource();\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case there's nothing to select\n        // We reset the typed value to force the user to enter something else and/or correctly reflect what is saved\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Same as original select(), but without the submission logic (because we auto-save)\n        // This now allows using Enter to remove a highlighted item as well\n        $element[0].dispatchEvent(new Event('click'));\n    }\n\n    onsaved() {\n        this.lastSaveState = 'success';\n        super.onsaved();\n    }\n\n    onerror() {\n        this.lastSaveState = 'error';\n        super.onerror();\n    }\n}\n","import Taxonomy from '../models/Taxonomy';\n\nexport default function (taxonomies: Taxonomy[] | false): Taxonomy[] {\n    // Special case for when retrieving an empty relationship from the store\n    if (taxonomies === false) {\n        taxonomies = [];\n    }\n\n    return taxonomies.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","import Term from '../models/Term';\n\nexport default function (terms: Term[]): Term[] {\n    return terms.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","import {Attributes, Vnode} from 'mithril';\nimport extract from 'flarum/common/utils/extract';\nimport termLabel from './termLabel';\nimport sortTerms from '../utils/sortTerms';\nimport Term from '../models/Term';\n\nexport default function termsLabel(terms: Term[], attrs: Attributes = {}) {\n    const children: Vnode[] = [];\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n\n    attrs.className = 'TaxonomiesLabel ' + (attrs.className || '');\n\n    if (terms) {\n        let taxonomy = extract(attrs, 'taxonomy');\n\n        if (!taxonomy) {\n            taxonomy = terms[0].taxonomy();\n        }\n\n        if (taxonomy) {\n            attrs['data-slug'] = taxonomy.slug();\n\n            if (taxonomy.showLabel()) {\n                children.push(termLabel(taxonomy, {\n                    className: 'TaxonomyParentLabel',\n                }));\n            }\n        }\n\n        sortTerms(terms).forEach(tag => {\n            if (tag || terms.length === 1) {\n                children.push(termLabel(tag, {discussionLink, userLink}));\n            }\n        });\n    } else {\n        children.push(termLabel());\n    }\n\n    return m('span', attrs, children);\n}\n","import Model from 'flarum/common/Model';\n\nexport default class Taxonomy extends Model {\n    type = Model.attribute<string>('type');\n    name = Model.attribute<string>('name');\n    slug = Model.attribute<string>('slug');\n    description = Model.attribute<string>('description');\n    color = Model.attribute<string>('color');\n    icon = Model.attribute<string>('icon');\n    order = Model.attribute<number>('order');\n    showLabel = Model.attribute<boolean>('showLabel');\n    showFilter = Model.attribute<boolean>('showFilter');\n    enableFilter = Model.attribute<boolean>('enableFilter');\n    enableFulltextSearch = Model.attribute<boolean>('enableFulltextSearch');\n    allowCustomValues = Model.attribute<boolean>('allowCustomValues');\n    customValueValidation = Model.attribute<string | null>('customValueValidation');\n    customValueSlugger = Model.attribute<string | null>('customValueSlugger');\n    minTerms = Model.attribute<number>('minTerms');\n    maxTerms = Model.attribute<number>('maxTerms');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n    canSearch = Model.attribute<boolean>('canSearch');\n    canBypassTermCounts = Model.attribute<boolean>('canBypassTermCounts');\n    tagIds = Model.attribute<string[]>('tagIds');\n\n    protected apiEndpoint(): string {\n        // @ts-ignore data.id not type-hinted\n        return '/flamarkt/taxonomies' + (this.exists ? '/' + this.data.id : '');\n    }\n\n    apiOrderEndpoint(): string {\n        return this.apiEndpoint() + '/terms/order';\n    }\n\n    apiTermsEndpoint(): string {\n        return this.apiEndpoint() + '/terms';\n    }\n}\n","import ChooseTaxonomyTermsDropdown from './components/ChooseTaxonomyTermsDropdown';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport labelsFromMultipleTaxonomiesList from './helpers/labelsFromMultipleTaxonomiesList';\nimport taxonomyIcon from './helpers/taxonomyIcon';\nimport termLabel from './helpers/termLabel';\nimport termsLabel from './helpers/termsLabel';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\nimport sortTaxonomies from './utils/sortTaxonomies';\nimport sortTerms from './utils/sortTerms';\nimport termToIdentifier from './utils/termToIdentifier';\n\nexport const common = {\n    'components/ChooseTaxonomyTermsDropdown': ChooseTaxonomyTermsDropdown,\n    'components/ChooseTaxonomyTermsModal': ChooseTaxonomyTermsModal,\n    'helpers/labelsFromMultipleTaxonomiesList': labelsFromMultipleTaxonomiesList,\n    'helpers/taxonomyIcon': taxonomyIcon,\n    'helpers/termLabel': termLabel,\n    'helpers/termsLabel': termsLabel,\n    'models/Taxonomy': Taxonomy,\n    'models/Term': Term,\n    'utils/sortTaxonomies': sortTaxonomies,\n    'utils/sortTerms': sortTerms,\n    'utils/termToIdentifier': termToIdentifier,\n}\n","import {Attributes} from 'mithril';\nimport sortTaxonomies from '../utils/sortTaxonomies';\nimport termsLabel from './termsLabel';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\nexport default function (terms: Term[], attrs: Attributes = {}) {\n    const taxonomies: Taxonomy[] = [];\n\n    terms.forEach(term => {\n        const taxonomy = term.taxonomy();\n\n        if (taxonomy && taxonomies.indexOf(taxonomy) === -1) {\n            taxonomies.push(taxonomy);\n        }\n    });\n\n    return sortTaxonomies(taxonomies).map(taxonomy => {\n        return termsLabel(terms.filter(term => term.taxonomy() === taxonomy), {...attrs});\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Alert'];","import {Children} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport Modal, {IInternalModalAttrs} from 'flarum/common/components/Modal';\nimport Alert from 'flarum/common/components/Alert';\nimport Button from 'flarum/common/components/Button';\n\nexport interface AbstractEditModalAttrs extends IInternalModalAttrs {\n    // nothing special, but it's easier to import a parent class from here from the sub classes\n}\n\nexport default abstract class AbstractEditModal<ModalAttrs extends AbstractEditModalAttrs = AbstractEditModalAttrs> extends Modal<ModalAttrs> {\n    dirty: boolean = false;\n\n    className() {\n        return 'Modal--small TaxonomyEditModal';\n    }\n\n    abstract translationPrefix(): string\n\n    abstract isNew(): boolean\n\n    title() {\n        return app.translator.trans(this.translationPrefix() + 'title.' + (this.isNew() ? 'new' : 'edit'));\n    }\n\n    abstract form(): Children;\n\n    content() {\n        return [\n            m('.Modal-body', [\n                this.form(),\n                m('.FormGroup', [\n                    Button.component({\n                        type: 'submit',\n                        className: 'Button Button--primary',\n                        loading: this.loading,\n                        disabled: !this.dirty,\n                    }, app.translator.trans(this.translationPrefix() + 'submit.' + (this.isNew() ? 'new' : 'edit'))),\n                    ' ',\n                    this.isNew() ? null : Button.component({\n                        className: 'Button Button--link TaxonomyEditModal-delete',\n                        loading: this.loading,\n                        onclick: this.ondelete.bind(this),\n                    }, app.translator.trans(this.translationPrefix() + 'delete')),\n                ]),\n            ]),\n\n            // Since the modal is so tall, you don't see the errors when you click the submit button\n            // We will repeat the alert at the bottom so it's more obvious you have errors\n            this.alertAttrs ? m('.Modal-alert', Alert.component(this.alertAttrs)) : null,\n        ];\n    }\n\n    abstract ondelete(): void;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Select'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/string'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/withAttr'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/AbstractRelationshipSelect'];","import app from 'flarum/common/app';\nimport highlight from 'flarum/common/helpers/highlight';\nimport AbstractRelationshipSelect from 'flamarkt/backoffice/common/components/AbstractRelationshipSelect';\nimport SimplifiedTag from '../models/SimplifiedTag';\n\nexport default class TagRelationshipSelect extends AbstractRelationshipSelect<SimplifiedTag> {\n    className() {\n        return 'TagRelationshipSelect';\n    }\n\n    search(query: string) {\n        // Since this method is debounced, we need to force a redraw when ready\n        m.redraw();\n\n        // Do nothing, we will filter the list of tags client-side\n        return Promise.resolve();\n    }\n\n    results(query: string) {\n        if (!query) {\n            return [];\n        }\n\n        query = query.toLowerCase();\n\n        return app.store\n            .all<SimplifiedTag>('tags')\n            .filter(tag => {\n                return tag.name().toLowerCase().substr(0, query.length) === query;\n            });\n    }\n\n    item(tag: SimplifiedTag, query?: string) {\n        const name = tag.name();\n\n        if (!name) {\n            // Render deleted tags that are still referenced in the setting by ID\n            // Intentionally not translated since this is really an edge case\n            return '[Deleted] #' + tag.id();\n        }\n\n        return highlight(name, query);\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/utils/isExtensionEnabled'];","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport AbstractEditModal, {AbstractEditModalAttrs} from './AbstractEditModal';\nimport Taxonomy from '../../common/models/Taxonomy';\nimport Select from 'flarum/common/components/Select';\nimport {slug} from 'flarum/common/utils/string';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport extractText from 'flarum/common/utils/extractText';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport TagRelationshipSelect from './TagRelationshipSelect';\nimport Tag from 'flarum/tags/common/models/Tag';\nimport isExtensionEnabled from 'flarum/admin/utils/isExtensionEnabled';\n\nexport interface EditTaxonomyModalAttrs extends AbstractEditModalAttrs {\n    type?: string\n    taxonomy: Taxonomy\n    onsave?: (taxonomy: Taxonomy) => void\n    ondelete?: () => void\n}\n\nexport default class EditTaxonomyModal extends AbstractEditModal<EditTaxonomyModalAttrs> {\n    type!: string\n    name!: string\n    slug!: string\n    description!: string\n    color!: string\n    icon!: string\n    showLabel!: boolean\n    showFilter!: boolean\n    enableFilter!: boolean\n    enableFulltextSearch!: boolean\n    allowCustomValues!: boolean\n    customValueValidation!: string\n    customValueSlugger!: string\n    minTerms!: number | string // Needs string because we leave the field empty for null\n    maxTerms!: number | string\n    tagIds!: string[]\n\n    loadingTags: boolean = false\n    tagsLoaded: boolean = false\n\n    oninit(vnode: Vnode<EditTaxonomyModalAttrs, this>) {\n        super.oninit(vnode);\n\n        const {taxonomy} = this.attrs;\n\n        this.type = taxonomy ? taxonomy.type() : (this.attrs.type || 'discussions');\n        this.name = taxonomy ? taxonomy.name() : '';\n        this.slug = taxonomy ? taxonomy.slug() : '';\n        this.description = taxonomy ? taxonomy.description() : '';\n        this.color = taxonomy ? taxonomy.color() : '';\n        this.icon = taxonomy ? taxonomy.icon() : '';\n        this.showLabel = taxonomy ? taxonomy.showLabel() : false;\n        this.showFilter = taxonomy ? taxonomy.showFilter() : false;\n        this.enableFilter = taxonomy ? taxonomy.enableFilter() : false;\n        this.enableFulltextSearch = taxonomy ? taxonomy.enableFulltextSearch() : false;\n        this.allowCustomValues = taxonomy ? taxonomy.allowCustomValues() : false;\n        this.customValueValidation = (taxonomy ? taxonomy.customValueValidation() : null) || '';\n        this.customValueSlugger = (taxonomy ? taxonomy.customValueSlugger() : null) || 'random';\n        this.minTerms = taxonomy ? taxonomy.minTerms() : '';\n        this.maxTerms = taxonomy ? taxonomy.maxTerms() : '';\n        this.tagIds = taxonomy ? taxonomy.tagIds() : [];\n\n        this.loadAllTagsIfNeeded();\n    }\n\n    loadAllTagsIfNeeded() {\n        if (this.type !== 'discussions' || !isExtensionEnabled('flarum-tags') || this.tagsLoaded || this.loadingTags) {\n            return;\n        }\n\n        this.loadingTags = true;\n\n        // Load the full list of tags so they can be used by TagRelationshipSelect\n        app.store.find('tags', {include: 'parent'}).then(() => {\n            this.loadingTags = false;\n            this.tagsLoaded = true;\n\n            m.redraw();\n        });\n    }\n\n    translationPrefix() {\n        return 'flamarkt-taxonomies.admin.edit-taxonomy.';\n    }\n\n    isNew() {\n        return !this.attrs.taxonomy;\n    }\n\n    className(): string {\n        return 'TaxonomyEditModal TaxonomyModal--withColumns';\n    }\n\n    form(): any {\n        return m('.TaxonomyModal-Columns', [\n            m('.TaxonomyModal-Column', [\n                m('h3', app.translator.trans(this.translationPrefix() + 'section.info')),\n                this.formItems().toArray(),\n            ]),\n            m('.TaxonomyModal-Column', [\n                m('h3', app.translator.trans(this.translationPrefix() + 'section.filling')),\n                this.fillItems().toArray(),\n                m('h3', app.translator.trans(this.translationPrefix() + 'section.scope')),\n                this.scopeItems().toArray(),\n            ]),\n            m('.TaxonomyModal-Column', [\n                m('h3', app.translator.trans(this.translationPrefix() + 'section.browsing')),\n                this.browseItems().toArray(),\n            ]),\n        ]);\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('name', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.name')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.name,\n                oninput: withAttr('value', (value: string) => {\n                    // If this is a new taxonomy and the slug has not been manually changed yet,\n                    // dynamically set the slug to a sensible value as a name is being typed\n                    if (!this.attrs.taxonomy && this.slug === slug(this.name /* old name */)) {\n                        this.slug = slug(value);\n                    }\n\n                    this.name = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('slug', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.slug')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.slug,\n                oninput: withAttr('value', (value: string) => {\n                    this.slug = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('description', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.description')),\n            m('textarea.FormControl', {\n                value: this.description,\n                oninput: withAttr('value', (value: string) => {\n                    this.description = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('color', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.color')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.color,\n                oninput: withAttr('value', (value: string) => {\n                    this.color = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('icon', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.icon')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.iconDescription', {\n                a: m('a', {\n                    href: 'https://fontawesome.com/icons?m=free',\n                    tabindex: -1,\n                }),\n            })),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.icon,\n                oninput: withAttr('value', (value: string) => {\n                    this.icon = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        return items;\n    }\n\n    fillItems() {\n        const items = new ItemList();\n\n        items.add('field-counts', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.countRequired')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.countRequiredDescription')),\n            m('.TaxonomyModal-rangeInput', [\n                m('input.FormControl', {\n                    type: 'number',\n                    min: 0,\n                    step: 1,\n                    value: this.minTerms,\n                    oninput: withAttr('value', (value: string) => {\n                        this.minTerms = parseInt(value) || '';\n                        this.dirty = true;\n                    }),\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.rangeSeparatorText'),\n                ' ',\n                m('input.FormControl', {\n                    type: 'number',\n                    min: 0,\n                    step: 1,\n                    value: this.maxTerms,\n                    oninput: withAttr('value', (value: string) => {\n                        this.maxTerms = parseInt(value) || '';\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n        ]));\n\n        items.add('allow-custom', m('.Form-group', [\n            m('label', [\n                m('input', {\n                    type: 'checkbox',\n                    checked: this.allowCustomValues,\n                    onchange: () => {\n                        this.allowCustomValues = !this.allowCustomValues;\n                        this.dirty = true;\n                    },\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.allowCustomValues'),\n            ]),\n        ]));\n\n        items.add('validation', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.customValueValidation')),\n            Select.component({\n                options: {\n                    '': app.translator.trans(this.translationPrefix() + 'validation-options.default'),\n                    alpha_num: app.translator.trans(this.translationPrefix() + 'validation-options.alpha_num'),\n                    alpha_dash: app.translator.trans(this.translationPrefix() + 'validation-options.alpha_dash'),\n                    regex: app.translator.trans(this.translationPrefix() + 'validation-options.regex'),\n                },\n                value: this.customValueValidation.indexOf('/') === 0 ? 'regex' : this.customValueValidation,\n                onchange: (value: string) => {\n                    this.customValueValidation = value === 'regex' ? '//' : value;\n                    this.dirty = true;\n                },\n                disabled: !this.allowCustomValues,\n            }),\n            this.customValueValidation.indexOf('/') === 0 ? m('.TaxonomyRegexInput', [\n                m('span', '/'),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.customValueValidation.split('/')[1],\n                    oninput: withAttr('value', (value: string) => {\n                        this.customValueValidation = '/' + value + '/' + this.customValueValidation.split('/')[2];\n                        this.dirty = true;\n                    }),\n                    disabled: !this.allowCustomValues,\n                }),\n                m('span', '/'),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.customValueValidation.split('/')[2],\n                    oninput: withAttr('value', (value: string) => {\n                        this.customValueValidation = '/' + this.customValueValidation.split('/')[1] + '/' + value;\n                        this.dirty = true;\n                    }),\n                    disabled: !this.allowCustomValues,\n                }),\n            ]) : null,\n        ]));\n\n        items.add('slugger', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.customValueSlugger')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.customValueSluggerDescription')),\n            Select.component({\n                options: {\n                    random: app.translator.trans(this.translationPrefix() + 'slugger-options.random'),\n                    alpha_dash: app.translator.trans(this.translationPrefix() + 'slugger-options.alpha_dash'),\n                    transliterator: app.translator.trans(this.translationPrefix() + 'slugger-options.transliterator'),\n                },\n                value: this.customValueSlugger,\n                onchange: (value: string) => {\n                    this.customValueSlugger = value;\n                    this.dirty = true;\n                },\n                disabled: !this.allowCustomValues,\n            }),\n        ]));\n\n        return items;\n    }\n\n    browseItems() {\n        const items = new ItemList();\n\n        items.add('show-label', m('.Form-group', [\n            m('label', [\n                m('input', {\n                    type: 'checkbox',\n                    checked: this.showLabel,\n                    onchange: () => {\n                        this.showLabel = !this.showLabel;\n                        this.dirty = true;\n                    },\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.showLabel'),\n            ]),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.showLabelDescription')),\n        ]));\n\n        items.add('enable-filter', m('.Form-group', [\n            m('label', [\n                m('input', {\n                    type: 'checkbox',\n                    checked: this.enableFilter,\n                    onchange: () => {\n                        this.enableFilter = !this.enableFilter;\n                        this.dirty = true;\n\n                        if (!this.enableFilter && this.showFilter) {\n                            this.showFilter = false;\n                        }\n                    },\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.enableFilter'),\n            ]),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.enableFilterDescription')),\n        ]));\n\n        items.add('show-filter', m('.Form-group', [\n            m('label', [\n                m('input', {\n                    type: 'checkbox',\n                    checked: this.showFilter,\n                    onchange: () => {\n                        this.showFilter = !this.showFilter;\n                        this.dirty = true;\n\n                        if (this.showFilter && !this.enableFilter) {\n                            this.enableFilter = true;\n                        }\n                    },\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.showFilter'),\n            ]),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.showFilterDescription')),\n        ]));\n\n        const accessDiffers = app.forum.attribute<any>('taxonomiesFulltextAccessDiffersFromFilter') || {};\n\n        items.add('enable-fulltext-search', m('.Form-group', [\n            m('label', [\n                m('input', {\n                    type: 'checkbox',\n                    checked: this.enableFulltextSearch,\n                    onchange: () => {\n                        this.enableFulltextSearch = !this.enableFulltextSearch;\n                        this.dirty = true;\n                    },\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.enableFulltextSearch'),\n            ]),\n            accessDiffers[this.type] ? m('.Alert', app.translator.trans(this.translationPrefix() + 'field.enableFulltextSearchWarning')) : null,\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.enableFulltextSearchDescription')),\n        ]));\n\n        return items;\n    }\n\n    scopeItems() {\n        const items = new ItemList();\n\n        const options: any = {\n            discussions: app.translator.trans(this.translationPrefix() + 'type-options.discussions'),\n            users: app.translator.trans(this.translationPrefix() + 'type-options.users'),\n        };\n\n        if ('flamarkt-core' in flarum.extensions || this.type === 'products') {\n            options.products = app.translator.trans(this.translationPrefix() + 'type-options.products');\n        }\n\n        items.add('type', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.type')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.typeDescription')),\n            Select.component({\n                options,\n                value: this.type,\n                onchange: (value: string) => {\n                    this.type = value;\n                    this.dirty = true;\n\n                    this.loadAllTagsIfNeeded();\n                },\n                disabled: !this.isNew(),\n            }),\n        ]));\n\n        if (this.type === 'discussions' && isExtensionEnabled('flarum-tags')) {\n            items.add('tags', m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.tagScope')),\n                m('.helpText', app.translator.trans(this.translationPrefix() + 'field.tagScopeDescription')),\n                TagRelationshipSelect.component({\n                    relationship: this.tagIds.map(tagId => {\n                        return app.store.getById('tags', tagId) || app.store.createRecord('tags', {\n                            id: tagId,\n                            attributes: {},\n                        });\n                    }),\n                    onchange: (tags: Tag[]) => {\n                        this.tagIds = tags.map(tag => tag.id() || '');\n                        this.dirty = true;\n                    },\n                    placeholder: app.translator.trans(this.translationPrefix() + 'field.tagScopePlaceholder'),\n                }),\n            ]));\n        }\n\n        return items;\n    }\n\n    ondelete() {\n        if (!confirm(extractText(app.translator.trans(this.translationPrefix() + 'deleteConfirmation', {\n            name: this.attrs.taxonomy.name(),\n        })))) {\n            return;\n        }\n\n        this.loading = true;\n\n        this.attrs.taxonomy.delete({\n            errorHandler: this.onerror.bind(this),\n        }).then(() => {\n            app.modal.close();\n\n            if (this.attrs.ondelete) {\n                this.attrs.ondelete();\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n\n    // @ts-ignore wrong Modal.obsubmit typings in Flarum\n    onsubmit(event: Event) {\n        event.preventDefault();\n\n        this.loading = true;\n\n        const record: Taxonomy = this.attrs.taxonomy || app.store.createRecord('flamarkt-taxonomies');\n\n        record.save({\n            type: this.type,\n            name: this.name,\n            slug: this.slug,\n            description: this.description,\n            color: this.color,\n            icon: this.icon,\n            show_label: this.showLabel,\n            show_filter: this.showFilter,\n            enable_filter: this.enableFilter,\n            enable_fulltext_search: this.enableFulltextSearch,\n            allow_custom_values: this.allowCustomValues,\n            custom_value_validation: this.customValueValidation,\n            custom_value_slugger: this.customValueSlugger,\n            min_terms: this.minTerms,\n            max_terms: this.maxTerms,\n            tag_ids: this.tagIds,\n        }, {\n            errorHandler: this.onerror.bind(this),\n        }).then(record => {\n            app.modal.close();\n\n            if (this.attrs.onsave) {\n                this.attrs.onsave(record);\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n}\n","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport extractText from 'flarum/common/utils/extractText';\nimport {slug} from 'flarum/common/utils/string';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport AbstractEditModal, {AbstractEditModalAttrs} from './AbstractEditModal';\nimport Term from '../../common/models/Term';\nimport Taxonomy from '../../common/models/Taxonomy';\n\ninterface EditTermModalAttrs extends AbstractEditModalAttrs {\n    term: Term\n    taxonomy: Taxonomy\n    onsave?: (term: Term) => void\n    ondelete?: () => void\n}\n\nexport default class EditTermModal extends AbstractEditModal<EditTermModalAttrs> {\n    name!: string\n    slug!: string\n    description!: string\n    color!: string\n    icon!: string\n\n    oninit(vnode: Vnode<EditTermModalAttrs, this>) {\n        super.oninit(vnode);\n\n        const {term} = this.attrs;\n\n        this.name = term ? term.name() : '';\n        this.slug = term ? term.slug() : '';\n        this.description = term ? term.description() : '';\n        this.color = term ? term.color() : '';\n        this.icon = term ? term.icon() : '';\n    }\n\n    translationPrefix() {\n        return 'flamarkt-taxonomies.admin.edit-term.';\n    }\n\n    isNew() {\n        return !this.attrs.term;\n    }\n\n    form(): any {\n        return this.formItems().toArray();\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('name', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.name')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.name,\n                oninput: withAttr('value', (value: string) => {\n                    this.name = value;\n                    this.slug = slug(value);\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('slug', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.slug')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.slug,\n                oninput: withAttr('value', (value: string) => {\n                    this.slug = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('description', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.description')),\n            m('textarea.FormControl', {\n                value: this.description,\n                oninput: withAttr('value', (value: string) => {\n                    this.description = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('color', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.color')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.color,\n                oninput: withAttr('value', (value: string) => {\n                    this.color = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('icon', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.icon')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.iconDescription', {\n                a: m('a', {\n                    href: 'https://fontawesome.com/icons?m=free',\n                    tabindex: -1,\n                }),\n            })),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.icon,\n                oninput: withAttr('value', (value: string) => {\n                    this.icon = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        return items;\n    }\n\n    ondelete() {\n        if (!confirm(extractText(app.translator.trans(this.translationPrefix() + 'deleteConfirmation', {\n            name: this.attrs.term.name(),\n        })))) {\n            return;\n        }\n\n        this.loading = true;\n\n        this.attrs.term.delete({\n            errorHandler: this.onerror.bind(this),\n        }).then(() => {\n            app.modal.close();\n\n            if (this.attrs.ondelete) {\n                this.attrs.ondelete();\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n\n    // @ts-ignore wrong Modal.obsubmit typings in Flarum\n    onsubmit(event: Event) {\n        event.preventDefault();\n\n        this.loading = true;\n\n        const record: Term = this.attrs.term || app.store.createRecord('flamarkt-taxonomy-terms');\n\n        const options: any = {\n            errorHandler: this.onerror.bind(this),\n        };\n\n        if (this.isNew()) {\n            options.url = app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiTermsEndpoint();\n        }\n\n        record.save({\n            name: this.name,\n            slug: this.slug,\n            description: this.description,\n            color: this.color,\n            icon: this.icon,\n        }, options).then(record => {\n            app.modal.close();\n\n            if (this.attrs.onsave) {\n                this.attrs.onsave(record);\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Page'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/Sortable'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport Component, {ComponentAttrs} from 'flarum/common/Component';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Sortable from 'flamarkt/backoffice/common/components/Sortable';\nimport sortTerms from '../../common/utils/sortTerms';\nimport EditTermModal from './EditTermModal';\nimport taxonomyIcon from '../../common/helpers/taxonomyIcon';\nimport Term from '../../common/models/Term';\nimport Taxonomy from '../../common/models/Taxonomy';\n\ninterface TaxonomyTermsListAttrs extends ComponentAttrs {\n    taxonomy: Taxonomy\n}\n\nexport default class TaxonomyTermsList extends Component<TaxonomyTermsListAttrs> {\n    terms: Term[] | null = null\n\n    oninit(vnode: Vnode<TaxonomyTermsListAttrs, this>) {\n        super.oninit(vnode);\n\n        app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiTermsEndpoint(),\n        }).then(result => {\n            this.terms = app.store.pushPayload<Term[]>(result);\n            m.redraw();\n        });\n    }\n\n    view() {\n        return m('.TaxonomyTermEdit', [\n            this.terms === null ? LoadingIndicator.component({}) : this.viewTerms(this.terms),\n        ]);\n    }\n\n    viewTerms(terms: Term[]) {\n        return [\n            m(Sortable, {\n                containerTag: 'ol',\n                className: 'TaxonomyTermList',\n                handleClassName: null,\n                onsort: (origin: number, destination: number) => {\n                    terms.splice(destination, 0, ...terms.splice(origin, 1));\n\n                    app.request<ApiPayloadPlural>({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiOrderEndpoint(),\n                        body: {\n                            order: terms.map(term => term.id()),\n                        },\n                    }).then(result => {\n                        // If there's no error, we save the new order so it can be used in case a redraw is triggered\n                        app.store.pushPayload(result);\n                    }).catch(e => {\n                        // If there's an error, we force a full redraw to make sure the user sees what is saved\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, terms.map((term, index) => m('li.TaxonomyTermListItem', {\n                draggable: true,\n                key: term.id(),\n                style: {\n                    color: term.color(),\n                },\n            }, [\n                taxonomyIcon(term),\n                m('span.TaxonomyTermListItem-name', term.name()),\n                Button.component({\n                    className: 'Button Button--link',\n                    icon: 'fas fa-pencil-alt',\n                    onclick: () => {\n                        app.modal.show(EditTermModal, {\n                            term,\n                            ondelete: () => {\n                                terms.splice(index, 1);\n                            },\n                        });\n                    },\n                }),\n            ]))),\n            Button.component({\n                className: 'Button',\n                onclick: () => {\n                    app.modal.show(EditTermModal, {\n                        taxonomy: this.attrs.taxonomy,\n                        onsave: (term: Term) => {\n                            this.terms = sortTerms([...terms, term]);\n                        },\n                    });\n                },\n            }, app.translator.trans('flamarkt-taxonomies.admin.page.create.term')),\n            ' ',\n            Button.component({\n                className: 'Button',\n                onclick: () => {\n                    app.request<ApiPayloadPlural>({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiOrderEndpoint(),\n                        body: {\n                            order: [],\n                        },\n                    }).then(result => {\n                        this.terms = app.store.pushPayload<Term[]>(result);\n                        m.redraw();\n                    }).catch(e => {\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, app.translator.trans('flamarkt-taxonomies.admin.page.reset-term-order')),\n        ];\n    }\n}\n","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport {ComponentAttrs} from 'flarum/common/Component';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Page from 'flarum/common/components/Page';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Sortable from 'flamarkt/backoffice/common/components/Sortable';\nimport extractText from 'flarum/common/utils/extractText';\nimport sortTaxonomies from '../../common/utils/sortTaxonomies';\nimport TaxonomyTermsList from './TaxonomyTermsList';\nimport EditTaxonomyModal from './EditTaxonomyModal';\nimport taxonomyIcon from '../../common/helpers/taxonomyIcon';\nimport Taxonomy from '../../common/models/Taxonomy';\n\nexport default class TaxonomiesPage extends Page {\n    tabIndex: number = 0;\n    taxonomies: Taxonomy[] | null = null;\n\n    oninit(vnode: Vnode<ComponentAttrs, this>) {\n        super.oninit(vnode);\n\n        app.setTitle(extractText(app.translator.trans('flamarkt-taxonomies.admin.page.title')));\n\n        app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + '/flamarkt/taxonomies',\n            params: {\n                filter: {\n                    type: m.route.param('resource'),\n                },\n            },\n        }).then(result => {\n            this.taxonomies = app.store.pushPayload<Taxonomy[]>(result);\n            m.redraw();\n        });\n    }\n\n    view() {\n        return m('.TaxonomiesPage', m('.container', [\n            this.taxonomies === null ? LoadingIndicator.component({}) : this.viewTaxonomies(this.taxonomies),\n        ]));\n    }\n\n    viewTaxonomies(taxonomies: Taxonomy[]) {\n        return [\n            m(Sortable, {\n                className: 'TaxonomyTabs',\n                direction: 'horizontal',\n                handleClassName: null,\n                onsort: (origin: number, destination: number) => {\n                    taxonomies.splice(destination, 0, ...taxonomies.splice(origin, 1));\n\n                    app.request<ApiPayloadPlural>({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + '/flamarkt/taxonomies/order',\n                        body: {\n                            order: taxonomies.map(taxonomy => taxonomy.id()),\n                            type: m.route.param('resource'),\n                        },\n                    }).then(result => {\n                        this.taxonomies = app.store.pushPayload<Taxonomy[]>(result);\n                        this.tabIndex = 0;\n                    }).catch(e => {\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, [\n                ...taxonomies.map((taxonomy, index) => m('.TaxonomyTab', {\n                    draggable: true,\n                    key: taxonomy.id(),\n                    onclick: () => {\n                        this.tabIndex = index;\n                    },\n                    className: this.tabIndex === index ? 'active' : '',\n                    style: {\n                        color: taxonomy.color(),\n                    },\n                }, [\n                    taxonomyIcon(taxonomy),\n                    ' ',\n                    taxonomy.name(),\n                    ' ',\n                    Button.component({\n                        className: 'Button Button--link',\n                        icon: 'fas fa-pencil-alt',\n                        onclick: () => {\n                            app.modal.show(EditTaxonomyModal, {\n                                taxonomy,\n                                ondelete: () => {\n                                    taxonomies.splice(index, 1);\n                                    this.tabIndex = 0;\n                                },\n                            });\n                        },\n                    }),\n                ])),\n                Button.component({\n                    key: 'new',\n                    className: 'TaxonomyTab',\n                    icon: 'fas fa-plus',\n                    onclick: () => {\n                        app.modal.show(EditTaxonomyModal, {\n                            type: m.route.param('resource'),\n                            onsave: (taxonomy: Taxonomy) => {\n                                // If the user changed the type during creation, move to the page for that type\n                                // We won't be able to focus the new taxonomy\n                                if (taxonomy.type() !== m.route.param('resource')) {\n                                    m.route.set(app.route('taxonomies', {\n                                        resource: taxonomy.type(),\n                                    }));\n                                    return;\n                                }\n\n                                // If we are already on the correct page, focus the tab of the new taxonomy\n                                this.taxonomies = sortTaxonomies([...taxonomies, taxonomy]);\n                                this.tabIndex = this.taxonomies.findIndex(t => t === taxonomy);\n                            },\n                        });\n                    },\n                }, app.translator.trans('flamarkt-taxonomies.admin.page.create.taxonomy')),\n            ]),\n            // Nested DIVs to use key to force a redraw of the list\n            this.tabIndex < taxonomies.length ? m('div', m('div', {\n                key: taxonomies[this.tabIndex].id(),\n            }, TaxonomyTermsList.component({\n                taxonomy: taxonomies[this.tabIndex],\n            }))) : null,\n        ];\n    }\n}\n","import AbstractEditModal from './components/AbstractEditModal';\nimport EditTaxonomyModal from './components/EditTaxonomyModal';\nimport EditTermModal from './components/EditTermModal';\nimport TaxonomiesPage from './components/TaxonomiesPage';\nimport TaxonomyTermsList from './components/TaxonomyTermsList';\n\nexport const backoffice = {\n    'components/AbstractEditModal': AbstractEditModal,\n    'components/EditTaxonomyModal': EditTaxonomyModal,\n    'components/EditTermModal': EditTermModal,\n    'components/TaxonomiesPage': TaxonomiesPage,\n    'components/TaxonomyTermsList': TaxonomyTermsList,\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['components/BackofficeNav'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/ActiveLinkButton'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-core']||{})['backoffice']||{})['pages/ProductShowPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LinkButton'];","import app from 'flamarkt/backoffice/backoffice/app';\nimport Page from 'flarum/common/components/Page';\n\nexport default class TaxonomiesRedirectPage extends Page {\n    oninit(vnode: any) {\n        super.oninit(vnode);\n\n        m.route.set(app.route('taxonomies', {\n            resource: 'discussions',\n        }));\n    }\n\n    view() {\n        return null;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Forum'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/User'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-core']||{})['common']||{})['models/Product'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/computed'];","import Model from 'flarum/common/Model';\nimport computed from 'flarum/common/utils/computed';\n\n// A stripped-down model of Tags for our own use\nexport default class SimplifiedTag extends Model {\n    name = Model.attribute<string>('name');\n\n    isPrimary() {\n        return computed<boolean, this>('position', 'parent', (position, parent) => position !== null && parent === false).call(this);\n    }\n}\n","import app from 'flamarkt/backoffice/backoffice/app';\nimport {common} from '../common/compat';\nimport {backoffice} from './compat';\nimport BackofficeNav from 'flamarkt/backoffice/backoffice/components/BackofficeNav';\nimport ActiveLinkButton from 'flamarkt/backoffice/common/components/ActiveLinkButton';\nimport ProductShowPage from 'flamarkt/core/backoffice/pages/ProductShowPage';\nimport {extend} from 'flarum/common/extend';\nimport LinkButton from 'flarum/common/components/LinkButton';\nimport TaxonomiesPage from './components/TaxonomiesPage';\nimport TaxonomiesRedirectPage from './components/TaxonomiesRedirectPage';\nimport addModels from '../common/addModels';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport ChooseTaxonomyTermsDropdown from '../common/components/ChooseTaxonomyTermsDropdown';\nimport SimplifiedTag from './models/SimplifiedTag';\n\nexport {\n    common,\n    backoffice,\n};\n\napp.initializers.add('flamarkt-taxonomies', () => {\n    addModels();\n\n    // The Tags extension doesn't boot in the backoffice frontend, but we need the model+store so we register it ourselves\n    if (!app.store.models.tags) {\n        app.store.models.tags = SimplifiedTag;\n    }\n\n    app.routes.taxonomies = {\n        path: '/taxonomies/:resource',\n        component: TaxonomiesPage,\n    };\n\n    // This was the old route. We keep it and redirect it to the new one in case it was bookmarked\n    app.routes.taxonomiesRedirect = {\n        path: '/taxonomies',\n        component: TaxonomiesRedirectPage,\n    };\n\n    app.extensionData.for('flamarkt-taxonomies').registerSetting(() => {\n        return m('.Form-group', LinkButton.component({\n            className: 'Button',\n            href: app.route('taxonomies', {\n                resource: 'discussions',\n            }),\n        }, app.translator.trans('flamarkt-taxonomies.admin.settings.goToPage')));\n    });\n\n    extend(BackofficeNav.prototype, 'items', function (items) {\n        items.add('taxonomies', ActiveLinkButton.component({\n            href: app.route('taxonomies', {\n                resource: 'discussions',\n            }),\n            icon: 'fas fa-tags',\n            activeRoutes: [\n                'taxonomies',\n            ],\n        }, app.translator.trans('flamarkt-taxonomies.admin.menu.title')), 15);\n\n        const currentRouteName = (app.current.data as any).routeName;\n\n        if (currentRouteName === 'taxonomies') {\n            items.add('taxonomies-discussions', LinkButton.component({\n                className: 'TaxonomiesChildNav',\n                href: app.route('taxonomies', {\n                    resource: 'discussions',\n                }),\n                icon: 'fas fa-comments',\n            }, app.translator.trans('flamarkt-taxonomies.admin.menu.discussions')), 15);\n\n            items.add('taxonomies-users', LinkButton.component({\n                className: 'TaxonomiesChildNav',\n                href: app.route('taxonomies', {\n                    resource: 'users',\n                }),\n                icon: 'fas fa-user-tag',\n            }, app.translator.trans('flamarkt-taxonomies.admin.menu.users')), 15);\n\n            if ('flamarkt-core' in flarum.extensions) {\n                items.add('taxonomies-products', LinkButton.component({\n                    className: 'TaxonomiesChildNav',\n                    href: app.route('taxonomies', {\n                        resource: 'products',\n                    }),\n                    icon: 'fas fa-box',\n                }, app.translator.trans('flamarkt-taxonomies.admin.menu.products')), 15);\n            }\n        }\n    });\n\n    if (ProductShowPage) {\n        extend(ProductShowPage.prototype, 'fields', function (items) {\n            if (!this.product.exists || !this.product.attribute('canEditTaxonomies')) {\n                return;\n            }\n\n            sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n                if (taxonomy.type() !== 'products') {\n                    return;\n                }\n\n                items.add('taxonomy-' + taxonomy.slug(), m('.Form-group', [\n                    m('label', taxonomy.name()),\n                    m(ChooseTaxonomyTermsDropdown, {\n                        resource: this.product,\n                        taxonomy,\n                    }),\n                ]), -100);\n            });\n        });\n    }\n});\n","import app from 'flarum/common/app';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Forum from 'flarum/common/models/Forum';\nimport User from 'flarum/common/models/User';\nimport Model from 'flarum/common/Model';\nimport Product from 'flamarkt/core/common/models/Product';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\n\nexport default function () {\n    app.store.models['flamarkt-taxonomies'] = Taxonomy;\n    app.store.models['flamarkt-taxonomy-terms'] = Term;\n\n    Forum.prototype.taxonomies = Model.hasMany('taxonomies');\n    Discussion.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    User.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n\n    if (Product) {\n        Product.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","extensions","_setPrototypeOf","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","create","constructor","core","compat","Term","name","Model","slug","description","color","icon","order","createdAt","taxonomy","apiEndpoint","this","exists","data","id","taxonomyIcon","term","attrs","settings","hasIcon","useColor","className","classList","style","backgroundColor","m","termLabel","discussionLink","extract","userLink","tagText","app","tag","canSearch","title","href","Link","q","_extends","assign","target","i","arguments","length","source","apply","attributes","ChooseTaxonomyTermsModal","availableTerms","selectedTerms","searchFilter","activeListIndex","inputIsFocused","saving","bypassReqs","navigator","oninit","vnode","forEach","addTerm","bind","resource","taxonomyTerms","method","url","then","result","redraw","KeyboardNavigatable","onUp","setIndex","onDown","onSelect","select","onRemove","toggleTerm","when","event","preventDefault","indexInSelectedTerms","findIndex","t","b","type","push","removeTerm","index","splice","displayName","getInstruction","count","minTerms","remaining","filteredAvailableTerms","filter","toLowerCase","substr","allowCustomValues","some","validation","customValueValidation","regex","indexOf","parts","split","RegExp","test","maxTerms","content","contentItems","toArray","items","ItemList","add","viewForm","listAvailableTerms","canBypassTermCounts","Switch","state","onchange","checked","formItems","inputItems","Button","disabled","loading","map","onclick","onready","placeholder","extractText","oninput","onkeydown","navigate","onfocus","oninputfocus","onblur","oninputblur","terms","LoadingIndicator","listAvailableTerm","colored","selected","active","onmouseover","highlight","setTimeout","e","$element","getDomElement","metaKey","ctrlKey","is","onsubmit","dispatchEvent","Event","$","scrollToItem","$dropdown","indexLength","$item","scrollTop","dropdownScroll","dropdownTop","offset","top","dropdownBottom","outerHeight","itemTop","itemBottom","parseInt","css","stop","animate","saveResource","save","relationships","taxonomies","verbatim","termToIdentifier","onsaved","onerror","DiscussionPage","update","Modal","ChooseTaxonomyTermsDropdown","lastSaveState","dropdownIsFocused","onmousedown","oncreate","element","dom","dropdown","querySelector","contains","document","addEventListener","onbeforeremove","onremove","removeEventListener","view","remove","status","slice","sort","termsLabel","children","showLabel","sortTerms","Taxonomy","showFilter","enableFilter","enableFulltextSearch","customValueSlugger","tagIds","apiOrderEndpoint","apiTermsEndpoint","common","sortTaxonomies","AbstractEditModal","dirty","translationPrefix","isNew","form","ondelete","alertAttrs","Alert","TagRelationshipSelect","search","query","Promise","resolve","results","item","AbstractRelationshipSelect","EditTaxonomyModal","loadingTags","tagsLoaded","loadAllTagsIfNeeded","isExtensionEnabled","include","fillItems","scopeItems","browseItems","withAttr","tabindex","min","step","Select","options","alpha_num","alpha_dash","random","transliterator","accessDiffers","discussions","users","products","component","relationship","tagId","tags","confirm","errorHandler","loaded","show_label","show_filter","enable_filter","enable_fulltext_search","allow_custom_values","custom_value_validation","custom_value_slugger","min_terms","max_terms","tag_ids","record","onsave","EditTermModal","TaxonomyTermsList","viewTerms","Sortable","containerTag","handleClassName","onsort","origin","destination","body","draggable","Component","TaxonomiesPage","tabIndex","params","route","param","viewTaxonomies","direction","set","Page","backoffice","TaxonomiesRedirectPage","SimplifiedTag","isPrimary","computed","position","parent","Forum","Discussion","User","Product","path","registerSetting","LinkButton","extend","BackofficeNav","ActiveLinkButton","activeRoutes","ProductShowPage","product","attribute"],"sourceRoot":""}