{"version":3,"file":"backoffice.js","mappings":"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","sources":["webpack://@flamarkt/taxonomies/webpack/bootstrap","webpack://@flamarkt/taxonomies/webpack/runtime/compat get default export","webpack://@flamarkt/taxonomies/webpack/runtime/define property getters","webpack://@flamarkt/taxonomies/webpack/runtime/hasOwnProperty shorthand","webpack://@flamarkt/taxonomies/webpack/runtime/make namespace object","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['app']\"","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/app']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Button']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Switch']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/helpers/highlight']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/classList']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/extractText']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['utils/KeyboardNavigatable']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Link']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/extract']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/Model']\"","webpack://@flamarkt/taxonomies/./src/common/models/Term.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/taxonomyIcon.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/termLabel.ts","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@flamarkt/taxonomies/./src/common/utils/termToIdentifier.ts","webpack://@flamarkt/taxonomies/./src/common/utils/retrieveTerms.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsModal.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsDropdown.ts","webpack://@flamarkt/taxonomies/./src/common/utils/sortTaxonomies.ts","webpack://@flamarkt/taxonomies/./src/common/utils/sortTerms.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/termsLabel.ts","webpack://@flamarkt/taxonomies/./src/common/models/Taxonomy.ts","webpack://@flamarkt/taxonomies/./src/common/compat.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/labelsFromMultipleTaxonomiesList.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Alert']\"","webpack://@flamarkt/taxonomies/./src/backoffice/components/AbstractEditModal.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Select']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/string']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/withAttr']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/AbstractRelationshipSelect']\"","webpack://@flamarkt/taxonomies/./src/backoffice/components/TagRelationshipSelect.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['admin/utils/isExtensionEnabled']\"","webpack://@flamarkt/taxonomies/./src/backoffice/components/EditTaxonomyModal.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/EditTermModal.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Page']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/Sortable']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/Component']\"","webpack://@flamarkt/taxonomies/./src/backoffice/components/TaxonomyTermsList.ts","webpack://@flamarkt/taxonomies/./src/backoffice/components/TaxonomiesPage.ts","webpack://@flamarkt/taxonomies/./src/backoffice/compat.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/Forum']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/User']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-core']||{})['common']||{})['models/Product']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/computed']\"","webpack://@flamarkt/taxonomies/./src/backoffice/models/SimplifiedTag.ts","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['components/BackofficeNav']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/ActiveLinkButton']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/extend']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/LinkButton']\"","webpack://@flamarkt/taxonomies/./src/backoffice/components/TaxonomiesRedirectPage.ts","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-core']||{})['backoffice']||{})['pages/ProductShowPage']\"","webpack://@flamarkt/taxonomies/./src/backoffice/index.ts","webpack://@flamarkt/taxonomies/./src/common/addModels.ts","webpack://@flamarkt/taxonomies/./src/backoffice/addPages.ts","webpack://@flamarkt/taxonomies/./src/backoffice/addLinks.ts","webpack://@flamarkt/taxonomies/./src/backoffice/addProductEdit.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['app'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Modal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Switch'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/highlight'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/classList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extractText'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['utils/KeyboardNavigatable'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extract'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","import Model from 'flarum/common/Model';\nimport Taxonomy from './Taxonomy';\n\nexport default class Term extends Model {\n    name = Model.attribute<string>('name');\n    slug = Model.attribute<string>('slug');\n    description = Model.attribute<string>('description');\n    color = Model.attribute<string>('color');\n    icon = Model.attribute<string>('icon');\n    order = Model.attribute<number>('order');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n\n    taxonomy = Model.hasOne<Taxonomy>('taxonomy');\n\n    protected apiEndpoint(): string {\n        // @ts-ignore data.id not type-hinted\n        return '/flamarkt/taxonomy-terms' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","import {Attributes} from 'mithril';\nimport classList from 'flarum/common/utils/classList';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\ninterface Settings {\n    useColor?: boolean\n}\n\nexport default function taxonomyIcon(term: Taxonomy | Term, attrs: Attributes = {}, settings: Settings = {}) {\n    const hasIcon = term && term.icon();\n    const {useColor = true} = settings;\n\n    attrs.className = classList([\n        attrs.className,\n        'icon',\n        hasIcon ? term.icon() : 'TaxonomyIcon',\n    ]);\n\n    if (term) {\n        attrs.style = attrs.style || {};\n\n        if (hasIcon) {\n            attrs.style.color = useColor ? term.color() : '';\n        } else {\n            attrs.style.backgroundColor = term.color();\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return hasIcon ? m('i', attrs) : m('span', attrs);\n}\n","import {Attributes} from 'mithril';\nimport app from 'flarum/common/app';\nimport Link from 'flarum/common/components/Link';\nimport extract from 'flarum/common/utils/extract';\nimport Term from '../models/Term';\nimport taxonomyIcon from './taxonomyIcon';\nimport Taxonomy from '../models/Taxonomy';\n\nexport default function termLabel(term: Taxonomy | Term | null = null, attrs: Attributes = {}) {\n    attrs.style = attrs.style || {};\n    attrs.className = 'TaxonomyLabel ' + (attrs.className || '');\n\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n    const productLink = extract(attrs, 'productLink');\n    const tagText = term ? term.name() : app.translator.trans('flarum-tags.lib.deleted_tag_text');\n    let tag: any = 'span';\n\n    if (term) {\n        const color = term.color();\n        if (color) {\n            attrs.style.backgroundColor = attrs.style.color = color;\n            attrs.className += ' colored';\n        }\n        attrs.title = term.description() || undefined;\n\n        const taxonomy = (term instanceof Term) && term.taxonomy();\n\n        // We need to check for instanceof because this method is also used with a taxonomy passed as a value\n        if (taxonomy && taxonomy.canSearch()) {\n            let href: string | null = null;\n\n            if (discussionLink) {\n                href = app.route('index', {[taxonomy.slug()]: term.slug()});\n            }\n\n            // Only generate user taxonomy links if fof/user-directory is enabled\n            if (userLink && app.routes.fof_user_directory) {\n                href = app.route('fof_user_directory', {q: 'taxonomy:' + taxonomy.slug() + ':' + term.slug()});\n            }\n\n            if (productLink) {\n                href = app.route('flamarkt.products.index', {[taxonomy.slug()]: term.slug()});\n            }\n\n            if (href) {\n                attrs.href = href;\n                tag = Link;\n            }\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return m(tag, attrs, m('span.TaxonomyLabel-text', [\n        term && term.icon() && taxonomyIcon(term, {}, {useColor: false}),\n        ' ' + tagText,\n    ]));\n}\n","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","import Model from 'flarum/common/Model';\nimport Term from '../models/Term';\n\n/**\n * Prepares a model for a relationship payload\n * We need to keep the name value for custom terms\n */\nexport default function (term: Term) {\n    if (term.id()) {\n        return Model.getIdentifier(term);\n    }\n\n    return {\n        ...Model.getIdentifier(term),\n        attributes: {\n            name: term.name(),\n        },\n    }\n}\n","import app from 'flarum/common/app';\nimport {ApiPayloadPlural, ApiResponsePlural} from 'flarum/common/Store';\nimport Taxonomy from '../models/Taxonomy';\nimport Term from '../models/Term';\n\nexport default function (taxonomy: Taxonomy): Promise<ApiResponsePlural<Term>> {\n    return app.request<ApiPayloadPlural>({\n        method: 'GET',\n        url: app.forum.attribute('apiUrl') + taxonomy.apiTermsEndpoint(),\n    }).then(result => {\n        const terms = app.store.pushPayload<Term[]>(result);\n\n        // For consistency, we will always set the \"inverse\" relationship while retrieving\n        // Since most of the code relies on this relationship being loaded\n        terms.forEach(term => {\n            term.pushData({\n                relationships: {\n                    taxonomy,\n                },\n            });\n        })\n\n        return terms;\n    });\n}\n","import {Children, Vnode} from 'mithril';\nimport app from 'flarum/common/app';\nimport Modal, {IInternalModalAttrs} from 'flarum/common/components/Modal';\nimport Model from 'flarum/common/Model';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Switch from 'flarum/common/components/Switch';\nimport highlight from 'flarum/common/helpers/highlight';\nimport classList from 'flarum/common/utils/classList';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport extractText from 'flarum/common/utils/extractText';\n\nimport KeyboardNavigatable from 'flamarkt/backoffice/common/utils/KeyboardNavigatable';\n\nimport termLabel from '../helpers/termLabel';\nimport taxonomyIcon from '../helpers/taxonomyIcon';\nimport termToIdentifier from '../utils/termToIdentifier';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\nimport retrieveTerms from '../utils/retrieveTerms';\n\n/**\n * Comparing objects directly is unreliable because we will be creating some new records as well\n * So we use this method to do a proper deep check\n */\nfunction isSameTerm(a: Term, b: Term) {\n    if (a.data.type !== b.data.type) {\n        return false;\n    }\n\n    // If both have an ID and it's different\n    if (a.id() && b.id()) {\n        return a.id() === b.id();\n    }\n\n    // If only one has an ID, it's different\n    if (!a.id() !== !b.id()) {\n        return false;\n    }\n\n    // If both don't have an ID, it's a new value and we compare the name\n    return a.name() === b.name();\n}\n\nexport interface ChooseTaxonomyTermsModalAttrs extends IInternalModalAttrs {\n    resource: Model\n    taxonomy: Taxonomy\n    selectedTerms: Term[]\n    onsubmit?: (terms: Term[]) => void\n}\n\n/**\n * Based on Flarum's TagDiscussionModal\n */\nexport default class ChooseTaxonomyTermsModal extends Modal<ChooseTaxonomyTermsModalAttrs> {\n    availableTerms: Term[] | null = null;\n    selectedTerms: Term[] = [];\n    searchFilter: string = '';\n    activeListIndex: number = 0;\n    inputIsFocused: boolean = false;\n    saving: boolean = false;\n    bypassReqs: boolean = false;\n    navigator!: KeyboardNavigatable;\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        if (this.attrs.selectedTerms) {\n            this.attrs.selectedTerms.forEach(this.addTerm.bind(this));\n        } else if (this.attrs.resource) {\n            this.attrs.resource.taxonomyTerms().forEach((term: Term) => {\n                if (term.taxonomy().id() === this.attrs.taxonomy.id()) {\n                    this.addTerm(term);\n                }\n            });\n        }\n\n        retrieveTerms(this.attrs.taxonomy).then(terms => {\n            this.availableTerms = terms;\n\n            m.redraw();\n        });\n\n        this.navigator = new KeyboardNavigatable();\n        this.navigator\n            .onUp(() => this.setIndex(this.activeListIndex - 1, true))\n            .onDown(() => this.setIndex(this.activeListIndex + 1, true))\n            .onSelect(this.select.bind(this))\n            .onRemove(() => {\n                if (!this.selectedTerms.length) {\n                    return;\n                }\n\n                this.toggleTerm(this.selectedTerms[this.selectedTerms.length - 1]);\n            })\n            .when(event => {\n                // We want to allow selecting with space because it's a common way to select\n                // However this interferes with the ability to enter spaces\n                // So we will have space act as select, but only if nothing is typed yet\n                if (event.key === ' ' && this.searchFilter === '') {\n                    event.preventDefault();\n                    this.select(event);\n\n                    return false;\n                }\n\n                return true;\n            });\n    }\n\n    indexInSelectedTerms(term: Term) {\n        return this.selectedTerms.findIndex(t => isSameTerm(t, term));\n    }\n\n    addTerm(term: Term) {\n        this.selectedTerms.push(term);\n    }\n\n    removeTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.selectedTerms.splice(index, 1);\n        }\n    }\n\n    className() {\n        return 'ChooseTaxonomyTermsModal';\n    }\n\n    title() {\n        return this.attrs.resource\n            ? app.translator.trans('flamarkt-taxonomies.lib.modal.title.edit', {\n                taxonomy: this.attrs.taxonomy.name(),\n                title: m('em', this.attrs.resource.title ? this.attrs.resource.title() : this.attrs.resource.displayName()),\n            })\n            : app.translator.trans('flamarkt-taxonomies.lib.modal.title.new', {\n                taxonomy: this.attrs.taxonomy.name(),\n            });\n    }\n\n    getInstruction() {\n        if (this.bypassReqs) {\n            return '';\n        }\n\n        const count = this.selectedTerms.length;\n\n        if (this.attrs.taxonomy.minTerms() && count < this.attrs.taxonomy.minTerms()) {\n            const remaining = this.attrs.taxonomy.minTerms() - count;\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholder', {\n                count: remaining,\n            });\n        } else if (count === 0) {\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholderOptional');\n        }\n\n        return '';\n    }\n\n    filteredAvailableTerms() {\n        let availableTerms = this.availableTerms === null ? [] : this.availableTerms;\n        const filter = this.searchFilter.toLowerCase();\n\n        if (filter) {\n            availableTerms = availableTerms.filter(term => term.name().substr(0, filter.length).toLowerCase() === filter);\n\n            if (\n                this.attrs.taxonomy.allowCustomValues() &&\n                !availableTerms.some(term => term.name().toLowerCase() === filter)\n            ) {\n                const validation = this.attrs.taxonomy.customValueValidation();\n                let regex: RegExp | null = null;\n\n                if (validation === 'alpha_num') {\n                    regex = /^[a-z0-9]$/i;\n                } else if (validation === 'alpha_dash') {\n                    regex = /^[a-z0-9_-]$/i;\n                } else if (validation.indexOf('/') === 0) {\n                    const parts = validation.split('/');\n                    if (parts.length === 3) {\n                        regex = new RegExp(parts[1], parts[2]);\n                    }\n                }\n\n                if (!regex || regex.test(this.searchFilter)) {\n                    availableTerms.push(app.store.createRecord('flamarkt-taxonomy-terms', {\n                        attributes: {\n                            name: this.searchFilter,\n                        },\n                    }));\n                }\n            }\n        }\n\n        if (!this.bypassReqs && this.attrs.taxonomy.maxTerms() && this.selectedTerms.length >= this.attrs.taxonomy.maxTerms()) {\n            availableTerms = [];\n        }\n\n        return availableTerms;\n    }\n\n    content() {\n        return this.contentItems().toArray();\n    }\n\n    contentItems() {\n        const items = new ItemList();\n\n        items.add('form', this.viewForm(), 20);\n\n        items.add('terms', this.listAvailableTerms(this.filteredAvailableTerms()), 10);\n\n        if (this.attrs.taxonomy.canBypassTermCounts() && (this.attrs.taxonomy.minTerms() || this.attrs.taxonomy.maxTerms())) {\n            items.add('bypass', m('.Modal-body.ChooseTaxonomyTermsModal-form-bypass', Switch.component({\n                state: this.bypassReqs,\n                onchange: (checked: boolean) => {\n                    this.bypassReqs = checked;\n                },\n            }, app.translator.trans('flamarkt-taxonomies.lib.modal.bypassTermCounts'))), -10);\n        }\n\n        return items;\n    }\n\n    viewForm() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.Modal-body', [\n            description ? m('p', description) : null,\n            m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n        ]);\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('input', m('.ChooseTaxonomyTermsModal-form-input', m('.TermsInput.FormControl', {\n            className: this.inputIsFocused ? 'focus' : '',\n        }, this.inputItems().toArray())), 20);\n\n        items.add('submit', m('.ChooseTaxonomyTermsModal-form-submit.App-primaryControl', Button.component({\n            type: 'submit',\n            className: 'Button Button--primary',\n            disabled: !this.bypassReqs && this.attrs.taxonomy.minTerms() && this.selectedTerms.length < this.attrs.taxonomy.minTerms(),\n            icon: 'fas fa-check',\n            loading: this.saving,\n        }, app.translator.trans('flamarkt-taxonomies.lib.modal.submit'))), 10);\n\n        return items;\n    }\n\n    inputItems() {\n        const items = new ItemList();\n\n        items.add('selected', this.selectedTerms.map(term => {\n            return m('span.TermsInput-term', {\n                onclick: () => {\n                    this.toggleTerm(term);\n                    this.onready();\n                },\n            }, termLabel(term));\n        }), 20);\n\n        items.add('control', m('input.FormControl', {\n            placeholder: extractText(this.getInstruction()),\n            value: this.searchFilter,\n            oninput: (event: Event) => {\n                this.searchFilter = (event.target as HTMLInputElement).value;\n                this.activeListIndex = 0;\n            },\n            onkeydown: this.navigator.navigate.bind(this.navigator),\n            // Use local methods so that other extensions can extend behaviour\n            onfocus: this.oninputfocus.bind(this),\n            onblur: this.oninputblur.bind(this),\n        }), 10);\n\n        return items;\n    }\n\n    oninputfocus() {\n        this.inputIsFocused = true;\n    }\n\n    oninputblur() {\n        this.inputIsFocused = false;\n    }\n\n    listAvailableTerms(terms: Term[]): Children {\n        return m('.Modal-footer', this.availableTerms === null ?\n            LoadingIndicator.component() :\n            m('ul.ChooseTaxonomyTermsModal-list.SelectTermList', {\n                className: terms.some(term => term.description()) ? 'SelectTermList--with-descriptions' : '',\n            }, terms.map(this.listAvailableTerm.bind(this)))\n        );\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li.SelectTermListItem', {\n            'data-index': index,\n            className: classList({\n                colored: !!term.color(),\n                selected: this.indexInSelectedTerms(term) !== -1,\n                active: this.activeListIndex === index,\n            }),\n            style: {color: term.color()},\n            onmouseover: () => this.activeListIndex = index,\n            onclick: this.toggleTerm.bind(this, term),\n        }, [\n            taxonomyIcon(term),\n            m('span.SelectTermListItem-name', term.exists ? highlight(term.name(), this.searchFilter) : app.translator.trans('flamarkt-taxonomies.lib.modal.custom', {\n                value: m('em', term.name()),\n            })),\n            term.description() ? m('span.SelectTermListItem-description', term.description()) : '',\n        ]);\n    }\n\n    toggleTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.removeTerm(term);\n        } else {\n            this.addTerm(term);\n        }\n\n        if (this.searchFilter) {\n            this.searchFilter = '';\n            this.activeListIndex = 0;\n        }\n\n        // Defer re-focusing to next browser draw\n        setTimeout(() => {\n            this.onready();\n        });\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case we don't want to submit just yet, but we will delete the text\n        // so that typing enter multiple times does end up submitting\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Ctrl + Enter submits the selection, just Enter completes the current entry\n        if (e.metaKey || e.ctrlKey || $element.is('.selected')) {\n            if (this.selectedTerms.length) {\n                // Calling .trigger() on the form with jQuery doesn't seem to trigger the onsubmit, so we'll just do that directly instead\n                this.onsubmit();\n            }\n        } else {\n            $element[0].dispatchEvent(new Event('click'));\n        }\n    }\n\n    getDomElement(index: number) {\n        return this.$(`.SelectTermListItem[data-index=\"${index}\"]`);\n    }\n\n    setIndex(index: number, scrollToItem: boolean) {\n        const $dropdown = this.$('.ChooseTaxonomyTermsModal-list');\n\n        const indexLength = this.$('.SelectTermListItem').length;\n\n        if (index < 0) {\n            index = indexLength - 1;\n        } else if (index >= indexLength) {\n            index = 0;\n        }\n\n        const $item = this.getDomElement(index);\n        this.activeListIndex = index;\n\n        m.redraw();\n\n        if (scrollToItem) {\n            const dropdownScroll = $dropdown.scrollTop() || 0;\n            const dropdownTop = $dropdown.offset()?.top || 0;\n            const dropdownBottom = dropdownTop + ($dropdown.outerHeight() || 0);\n            const itemTop = $item.offset()?.top || 0;\n            const itemBottom = itemTop + ($item.outerHeight() || 0);\n\n            let scrollTop;\n            if (itemTop < dropdownTop) {\n                scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n            } else if (itemBottom > dropdownBottom) {\n                scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n            }\n\n            if (typeof scrollTop !== 'undefined') {\n                $dropdown.stop(true).animate({scrollTop}, 100);\n            }\n        }\n    }\n\n    onsubmit(event?: Event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.attrs.resource) {\n            this.saveResource();\n\n            // Do not run the normal code - it might close the modal even if an error occurred\n            return;\n        }\n\n        if (this.attrs.onsubmit) this.attrs.onsubmit(this.selectedTerms);\n\n        app.modal.close();\n    }\n\n    saveResource() {\n        this.saving = true;\n\n        this.attrs.resource.save({\n            relationships: {\n                taxonomies: [\n                    {\n                        verbatim: true, // Flarum workaround, defined in flamarkt/core\n                        type: 'flamarkt-taxonomies',\n                        id: this.attrs.taxonomy.id(),\n                        relationships: {\n                            terms: {\n                                data: this.selectedTerms.map(termToIdentifier),\n                            },\n                        },\n                    },\n                ],\n            },\n        }).then(this.onsaved.bind(this), this.onerror.bind(this));\n    }\n\n    onsaved() {\n        // Need to check if DiscussionPage exists because in backoffice frontend the import will be undefined\n        if (DiscussionPage && app.current.matches(DiscussionPage)) {\n            app.current.get('stream').update();\n        }\n        this.saving = false;\n        m.redraw();\n\n        app.modal.close();\n    }\n\n    onerror() {\n        this.saving = false;\n        m.redraw();\n    }\n}\n","import {Vnode, VnodeDOM} from 'mithril';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport icon from 'flarum/common/helpers/icon';\nimport ChooseTaxonomyTermsModal, {ChooseTaxonomyTermsModalAttrs} from './ChooseTaxonomyTermsModal';\nimport Term from '../models/Term';\n\nexport default class ChooseTaxonomyTermsDropdown extends ChooseTaxonomyTermsModal {\n    lastSaveState: 'success' | 'error' | 'neutral' = 'neutral'\n    dropdownIsFocused: boolean = false\n    onmousedown!: (event: Event) => void\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        this.navigator.when(event => {\n            // Same as the original when() in the modal\n            // (we are replacing the original since we can have a single callback)\n            if (event.key === ' ' && this.searchFilter === '') {\n                event.preventDefault();\n                this.select(event);\n\n                return false;\n            }\n\n            // We don't want Tab to act as select, as this prevent moving from field to field\n            return event.key !== 'Tab';\n        });\n    }\n\n    oncreate(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        // Not calling super because it just tries to do modal stuff\n        //super.oncreate(vnode);\n\n        // Since we are not calling the original Component.oncreate, we need to copy the dom reference manually\n        this.element = vnode.dom;\n\n        this.onmousedown = (event: Event) => {\n            const dropdown = vnode.dom.querySelector('.Dropdown-menu');\n\n            if (\n                dropdown &&\n                dropdown.contains(event.target as HTMLElement)\n            ) {\n                if (!this.dropdownIsFocused) {\n                    this.dropdownIsFocused = true;\n                    m.redraw();\n                }\n            } else {\n                if (this.dropdownIsFocused) {\n                    this.dropdownIsFocused = false;\n                    m.redraw();\n                }\n            }\n        };\n\n        document.addEventListener('mousedown', this.onmousedown);\n    }\n\n    onbeforeremove() {\n        // Do nothing. Prevent parent method from running because it will try to access this.attrs.state which isn't set\n    }\n\n    onremove(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.onremove(vnode);\n\n        document.removeEventListener('mousedown', this.onmousedown);\n    }\n\n    view() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.ChooseTaxonomyTermsDropdown', m('form', {\n            // The form element is only there to prevent any unwanted page POST submission\n            // It's also used so that onready() continues to focus the field when called\n            // Due to the jQuery selector in onready, the form cannot be the root element of view()\n            onsubmit(event: Event) {\n                event.preventDefault();\n            },\n        }, [\n            m('.ChooseTaxonomyTermsInput', [\n                m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n                // .ChooseTaxonomyTermsModal-list must be kept because it's used by the javascript of the keyboard navigation\n                this.listAvailableTerms(this.filteredAvailableTerms()),\n            ]),\n            description ? m('p', description) : null,\n        ]));\n    }\n\n    formItems() {\n        const items = super.formItems();\n\n        items.remove('submit');\n\n        let status = null;\n\n        if (this.saving) {\n            status = LoadingIndicator.component();\n        } else if (this.lastSaveState === 'success') {\n            status = icon('fas fa-check');\n        } else if (this.lastSaveState === 'error') {\n            status = icon('fas fa-times');\n        }\n\n        items.add('status', m('.ChooseTaxonomyTermsStatus', status));\n\n        return items;\n    }\n\n    listAvailableTerms(terms: Term[]) {\n        // We need two attributes to hold the dropdown open\n        // One is the input focus, managed by the modal\n        // The second one is needed because there's a short moment during a click where the focus is lost on the input\n        // mousedown triggers first, then the input blur, and only in mouseup can we put focus on the input again\n        if (!(this.inputIsFocused || this.dropdownIsFocused) || terms.length === 0) {\n            return null;\n        }\n\n        let content;\n\n        if (this.availableTerms === null) {\n            content = LoadingIndicator.component();\n        } else {\n            content = terms.map(this.listAvailableTerm.bind(this));\n        }\n\n        return m('ul.Dropdown-menu.ChooseTaxonomyTermsModal-list', content);\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li', super.listAvailableTerm(term, index));\n    }\n\n    toggleTerm(term: Term) {\n        super.toggleTerm(term);\n\n        // Auto-save\n        this.lastSaveState = 'neutral';\n        this.saveResource();\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case there's nothing to select\n        // We reset the typed value to force the user to enter something else and/or correctly reflect what is saved\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Same as original select(), but without the submission logic (because we auto-save)\n        // This now allows using Enter to remove a highlighted item as well\n        $element[0].dispatchEvent(new Event('click'));\n    }\n\n    onsaved() {\n        this.lastSaveState = 'success';\n        super.onsaved();\n    }\n\n    onerror() {\n        this.lastSaveState = 'error';\n        super.onerror();\n    }\n}\n","import Taxonomy from '../models/Taxonomy';\n\nexport default function (taxonomies: Taxonomy[] | false): Taxonomy[] {\n    // Special case for when retrieving an empty relationship from the store\n    if (taxonomies === false) {\n        taxonomies = [];\n    }\n\n    return taxonomies.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","import Term from '../models/Term';\n\nexport default function (terms: Term[]): Term[] {\n    return terms.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","import {Attributes, Vnode} from 'mithril';\nimport extract from 'flarum/common/utils/extract';\nimport termLabel from './termLabel';\nimport sortTerms from '../utils/sortTerms';\nimport Term from '../models/Term';\n\nexport default function termsLabel(terms: Term[], attrs: Attributes = {}) {\n    const children: Vnode[] = [];\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n    const productLink = extract(attrs, 'productLink');\n\n    attrs.className = 'TaxonomiesLabel ' + (attrs.className || '');\n\n    if (terms) {\n        let taxonomy = extract(attrs, 'taxonomy');\n\n        if (!taxonomy) {\n            taxonomy = terms[0].taxonomy();\n        }\n\n        if (taxonomy) {\n            attrs['data-slug'] = taxonomy.slug();\n\n            if (taxonomy.showLabel()) {\n                children.push(termLabel(taxonomy, {\n                    className: 'TaxonomyParentLabel',\n                }));\n            }\n        }\n\n        sortTerms(terms).forEach(tag => {\n            if (tag || terms.length === 1) {\n                children.push(termLabel(tag, {discussionLink, userLink, productLink}));\n            }\n        });\n    } else {\n        children.push(termLabel());\n    }\n\n    return m('span', attrs, children);\n}\n","import Model from 'flarum/common/Model';\n\nexport default class Taxonomy extends Model {\n    type = Model.attribute<string>('type');\n    name = Model.attribute<string>('name');\n    slug = Model.attribute<string>('slug');\n    description = Model.attribute<string>('description');\n    color = Model.attribute<string>('color');\n    icon = Model.attribute<string>('icon');\n    order = Model.attribute<number>('order');\n    showLabel = Model.attribute<boolean>('showLabel');\n    showFilter = Model.attribute<boolean>('showFilter');\n    enableFilter = Model.attribute<boolean>('enableFilter');\n    enableFulltextSearch = Model.attribute<boolean>('enableFulltextSearch');\n    allowCustomValues = Model.attribute<boolean>('allowCustomValues');\n    customValueValidation = Model.attribute<string | null>('customValueValidation');\n    customValueSlugger = Model.attribute<string | null>('customValueSlugger');\n    minTerms = Model.attribute<number>('minTerms');\n    maxTerms = Model.attribute<number>('maxTerms');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n    canSearch = Model.attribute<boolean>('canSearch');\n    canBypassTermCounts = Model.attribute<boolean>('canBypassTermCounts');\n    tagIds = Model.attribute<string[]>('tagIds');\n\n    protected apiEndpoint(): string {\n        // @ts-ignore data.id not type-hinted\n        return '/flamarkt/taxonomies' + (this.exists ? '/' + this.data.id : '');\n    }\n\n    apiOrderEndpoint(): string {\n        return this.apiEndpoint() + '/terms/order';\n    }\n\n    apiTermsEndpoint(): string {\n        return this.apiEndpoint() + '/terms';\n    }\n}\n","import ChooseTaxonomyTermsDropdown from './components/ChooseTaxonomyTermsDropdown';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport labelsFromMultipleTaxonomiesList from './helpers/labelsFromMultipleTaxonomiesList';\nimport taxonomyIcon from './helpers/taxonomyIcon';\nimport termLabel from './helpers/termLabel';\nimport termsLabel from './helpers/termsLabel';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\nimport retrieveTerms from './utils/retrieveTerms';\nimport sortTaxonomies from './utils/sortTaxonomies';\nimport sortTerms from './utils/sortTerms';\nimport termToIdentifier from './utils/termToIdentifier';\n\nexport const common = {\n    'components/ChooseTaxonomyTermsDropdown': ChooseTaxonomyTermsDropdown,\n    'components/ChooseTaxonomyTermsModal': ChooseTaxonomyTermsModal,\n    'helpers/labelsFromMultipleTaxonomiesList': labelsFromMultipleTaxonomiesList,\n    'helpers/taxonomyIcon': taxonomyIcon,\n    'helpers/termLabel': termLabel,\n    'helpers/termsLabel': termsLabel,\n    'models/Taxonomy': Taxonomy,\n    'models/Term': Term,\n    'utils/retrieveTerms': retrieveTerms,\n    'utils/sortTaxonomies': sortTaxonomies,\n    'utils/sortTerms': sortTerms,\n    'utils/termToIdentifier': termToIdentifier,\n}\n","import {Attributes} from 'mithril';\nimport sortTaxonomies from '../utils/sortTaxonomies';\nimport termsLabel from './termsLabel';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\nexport default function (terms: Term[], attrs: Attributes = {}) {\n    const taxonomies: Taxonomy[] = [];\n\n    terms.forEach(term => {\n        const taxonomy = term.taxonomy();\n\n        if (taxonomy && taxonomies.indexOf(taxonomy) === -1) {\n            taxonomies.push(taxonomy);\n        }\n    });\n\n    return sortTaxonomies(taxonomies).map(taxonomy => {\n        return termsLabel(terms.filter(term => term.taxonomy() === taxonomy), {...attrs});\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Alert'];","import {Children} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport Modal, {IInternalModalAttrs} from 'flarum/common/components/Modal';\nimport Alert from 'flarum/common/components/Alert';\nimport Button from 'flarum/common/components/Button';\n\nexport interface AbstractEditModalAttrs extends IInternalModalAttrs {\n    // nothing special, but it's easier to import a parent class from here from the sub classes\n}\n\nexport default abstract class AbstractEditModal<ModalAttrs extends AbstractEditModalAttrs = AbstractEditModalAttrs> extends Modal<ModalAttrs> {\n    dirty: boolean = false;\n\n    className() {\n        return 'Modal--small TaxonomyEditModal';\n    }\n\n    abstract translationPrefix(): string\n\n    abstract isNew(): boolean\n\n    title() {\n        return app.translator.trans(this.translationPrefix() + 'title.' + (this.isNew() ? 'new' : 'edit'));\n    }\n\n    abstract form(): Children;\n\n    content() {\n        return [\n            m('.Modal-body', [\n                this.form(),\n                m('.FormGroup', [\n                    Button.component({\n                        type: 'submit',\n                        className: 'Button Button--primary',\n                        loading: this.loading,\n                        disabled: !this.dirty,\n                    }, app.translator.trans(this.translationPrefix() + 'submit.' + (this.isNew() ? 'new' : 'edit'))),\n                    ' ',\n                    this.isNew() ? null : Button.component({\n                        className: 'Button Button--link TaxonomyEditModal-delete',\n                        loading: this.loading,\n                        onclick: this.ondelete.bind(this),\n                    }, app.translator.trans(this.translationPrefix() + 'delete')),\n                ]),\n            ]),\n\n            // Since the modal is so tall, you don't see the errors when you click the submit button\n            // We will repeat the alert at the bottom so it's more obvious you have errors\n            this.alertAttrs ? m('.Modal-alert', Alert.component(this.alertAttrs)) : null,\n        ];\n    }\n\n    abstract ondelete(): void;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Select'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/string'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/withAttr'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/AbstractRelationshipSelect'];","import app from 'flarum/common/app';\nimport highlight from 'flarum/common/helpers/highlight';\nimport AbstractRelationshipSelect from 'flamarkt/backoffice/common/components/AbstractRelationshipSelect';\nimport SimplifiedTag from '../models/SimplifiedTag';\n\nexport default class TagRelationshipSelect extends AbstractRelationshipSelect<SimplifiedTag> {\n    className() {\n        return 'TagRelationshipSelect';\n    }\n\n    search(query: string) {\n        // Since this method is debounced, we need to force a redraw when ready\n        m.redraw();\n\n        // Do nothing, we will filter the list of tags client-side\n        return Promise.resolve();\n    }\n\n    results(query: string) {\n        if (!query) {\n            return [];\n        }\n\n        query = query.toLowerCase();\n\n        return app.store\n            .all<SimplifiedTag>('tags')\n            .filter(tag => {\n                return tag.name().toLowerCase().substr(0, query.length) === query;\n            });\n    }\n\n    item(tag: SimplifiedTag, query?: string) {\n        const name = tag.name();\n\n        if (!name) {\n            // Render deleted tags that are still referenced in the setting by ID\n            // Intentionally not translated since this is really an edge case\n            return '[Deleted] #' + tag.id();\n        }\n\n        return highlight(name, query);\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/utils/isExtensionEnabled'];","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport AbstractEditModal, {AbstractEditModalAttrs} from './AbstractEditModal';\nimport Taxonomy from '../../common/models/Taxonomy';\nimport Select from 'flarum/common/components/Select';\nimport {slug} from 'flarum/common/utils/string';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport extractText from 'flarum/common/utils/extractText';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport TagRelationshipSelect from './TagRelationshipSelect';\nimport Tag from 'flarum/tags/common/models/Tag';\nimport isExtensionEnabled from 'flarum/admin/utils/isExtensionEnabled';\n\nexport interface EditTaxonomyModalAttrs extends AbstractEditModalAttrs {\n    type?: string\n    taxonomy: Taxonomy\n    onsave?: (taxonomy: Taxonomy) => void\n    ondelete?: () => void\n}\n\nexport default class EditTaxonomyModal extends AbstractEditModal<EditTaxonomyModalAttrs> {\n    type!: string\n    name!: string\n    slug!: string\n    description!: string\n    color!: string\n    icon!: string\n    showLabel!: boolean\n    showFilter!: boolean\n    enableFilter!: boolean\n    enableFulltextSearch!: boolean\n    allowCustomValues!: boolean\n    customValueValidation!: string\n    customValueSlugger!: string\n    minTerms!: number | string // Needs string because we leave the field empty for null\n    maxTerms!: number | string\n    tagIds!: string[]\n\n    loadingTags: boolean = false\n    tagsLoaded: boolean = false\n\n    oninit(vnode: Vnode<EditTaxonomyModalAttrs, this>) {\n        super.oninit(vnode);\n\n        const {taxonomy} = this.attrs;\n\n        this.type = taxonomy ? taxonomy.type() : (this.attrs.type || 'discussions');\n        this.name = taxonomy ? taxonomy.name() : '';\n        this.slug = taxonomy ? taxonomy.slug() : '';\n        this.description = taxonomy ? taxonomy.description() : '';\n        this.color = taxonomy ? taxonomy.color() : '';\n        this.icon = taxonomy ? taxonomy.icon() : '';\n        this.showLabel = taxonomy ? taxonomy.showLabel() : false;\n        this.showFilter = taxonomy ? taxonomy.showFilter() : false;\n        this.enableFilter = taxonomy ? taxonomy.enableFilter() : false;\n        this.enableFulltextSearch = taxonomy ? taxonomy.enableFulltextSearch() : false;\n        this.allowCustomValues = taxonomy ? taxonomy.allowCustomValues() : false;\n        this.customValueValidation = (taxonomy ? taxonomy.customValueValidation() : null) || '';\n        this.customValueSlugger = (taxonomy ? taxonomy.customValueSlugger() : null) || 'random';\n        this.minTerms = taxonomy ? taxonomy.minTerms() : '';\n        this.maxTerms = taxonomy ? taxonomy.maxTerms() : '';\n        this.tagIds = taxonomy ? taxonomy.tagIds() : [];\n\n        this.loadAllTagsIfNeeded();\n    }\n\n    loadAllTagsIfNeeded() {\n        if (this.type !== 'discussions' || !isExtensionEnabled('flarum-tags') || this.tagsLoaded || this.loadingTags) {\n            return;\n        }\n\n        this.loadingTags = true;\n\n        // Load the full list of tags so they can be used by TagRelationshipSelect\n        app.store.find('tags', {include: 'parent'}).then(() => {\n            this.loadingTags = false;\n            this.tagsLoaded = true;\n\n            m.redraw();\n        });\n    }\n\n    translationPrefix() {\n        return 'flamarkt-taxonomies.admin.edit-taxonomy.';\n    }\n\n    isNew() {\n        return !this.attrs.taxonomy;\n    }\n\n    className(): string {\n        return 'TaxonomyEditModal TaxonomyModal--withColumns';\n    }\n\n    form(): any {\n        return m('.TaxonomyModal-Columns', [\n            m('.TaxonomyModal-Column', [\n                m('h3', app.translator.trans(this.translationPrefix() + 'section.info')),\n                this.formItems().toArray(),\n            ]),\n            m('.TaxonomyModal-Column', [\n                m('h3', app.translator.trans(this.translationPrefix() + 'section.filling')),\n                this.fillItems().toArray(),\n                m('h3', app.translator.trans(this.translationPrefix() + 'section.scope')),\n                this.scopeItems().toArray(),\n            ]),\n            m('.TaxonomyModal-Column', [\n                m('h3', app.translator.trans(this.translationPrefix() + 'section.browsing')),\n                this.browseItems().toArray(),\n            ]),\n        ]);\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('name', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.name')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.name,\n                oninput: withAttr('value', (value: string) => {\n                    // If this is a new taxonomy and the slug has not been manually changed yet,\n                    // dynamically set the slug to a sensible value as a name is being typed\n                    if (!this.attrs.taxonomy && this.slug === slug(this.name /* old name */)) {\n                        this.slug = slug(value);\n                    }\n\n                    this.name = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('slug', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.slug')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.slug,\n                oninput: withAttr('value', (value: string) => {\n                    this.slug = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('description', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.description')),\n            m('textarea.FormControl', {\n                value: this.description,\n                oninput: withAttr('value', (value: string) => {\n                    this.description = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('color', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.color')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.color,\n                oninput: withAttr('value', (value: string) => {\n                    this.color = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('icon', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.icon')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.iconDescription', {\n                a: m('a', {\n                    href: 'https://fontawesome.com/icons?m=free',\n                    tabindex: -1,\n                }),\n            })),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.icon,\n                oninput: withAttr('value', (value: string) => {\n                    this.icon = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        return items;\n    }\n\n    fillItems() {\n        const items = new ItemList();\n\n        items.add('field-counts', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.countRequired')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.countRequiredDescription')),\n            m('.TaxonomyModal-rangeInput', [\n                m('input.FormControl', {\n                    type: 'number',\n                    min: 0,\n                    step: 1,\n                    value: this.minTerms,\n                    oninput: withAttr('value', (value: string) => {\n                        this.minTerms = parseInt(value) || '';\n                        this.dirty = true;\n                    }),\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.rangeSeparatorText'),\n                ' ',\n                m('input.FormControl', {\n                    type: 'number',\n                    min: 0,\n                    step: 1,\n                    value: this.maxTerms,\n                    oninput: withAttr('value', (value: string) => {\n                        this.maxTerms = parseInt(value) || '';\n                        this.dirty = true;\n                    }),\n                }),\n            ]),\n        ]));\n\n        items.add('allow-custom', m('.Form-group', [\n            m('label', [\n                m('input', {\n                    type: 'checkbox',\n                    checked: this.allowCustomValues,\n                    onchange: () => {\n                        this.allowCustomValues = !this.allowCustomValues;\n                        this.dirty = true;\n                    },\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.allowCustomValues'),\n            ]),\n        ]));\n\n        items.add('validation', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.customValueValidation')),\n            Select.component({\n                options: {\n                    '': app.translator.trans(this.translationPrefix() + 'validation-options.default'),\n                    alpha_num: app.translator.trans(this.translationPrefix() + 'validation-options.alpha_num'),\n                    alpha_dash: app.translator.trans(this.translationPrefix() + 'validation-options.alpha_dash'),\n                    regex: app.translator.trans(this.translationPrefix() + 'validation-options.regex'),\n                },\n                value: this.customValueValidation.indexOf('/') === 0 ? 'regex' : this.customValueValidation,\n                onchange: (value: string) => {\n                    this.customValueValidation = value === 'regex' ? '//' : value;\n                    this.dirty = true;\n                },\n                disabled: !this.allowCustomValues,\n            }),\n            this.customValueValidation.indexOf('/') === 0 ? m('.TaxonomyRegexInput', [\n                m('span', '/'),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.customValueValidation.split('/')[1],\n                    oninput: withAttr('value', (value: string) => {\n                        this.customValueValidation = '/' + value + '/' + this.customValueValidation.split('/')[2];\n                        this.dirty = true;\n                    }),\n                    disabled: !this.allowCustomValues,\n                }),\n                m('span', '/'),\n                m('input.FormControl', {\n                    type: 'text',\n                    value: this.customValueValidation.split('/')[2],\n                    oninput: withAttr('value', (value: string) => {\n                        this.customValueValidation = '/' + this.customValueValidation.split('/')[1] + '/' + value;\n                        this.dirty = true;\n                    }),\n                    disabled: !this.allowCustomValues,\n                }),\n            ]) : null,\n        ]));\n\n        items.add('slugger', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.customValueSlugger')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.customValueSluggerDescription')),\n            Select.component({\n                options: {\n                    random: app.translator.trans(this.translationPrefix() + 'slugger-options.random'),\n                    alpha_dash: app.translator.trans(this.translationPrefix() + 'slugger-options.alpha_dash'),\n                    transliterator: app.translator.trans(this.translationPrefix() + 'slugger-options.transliterator'),\n                },\n                value: this.customValueSlugger,\n                onchange: (value: string) => {\n                    this.customValueSlugger = value;\n                    this.dirty = true;\n                },\n                disabled: !this.allowCustomValues,\n            }),\n        ]));\n\n        return items;\n    }\n\n    browseItems() {\n        const items = new ItemList();\n\n        items.add('show-label', m('.Form-group', [\n            m('label', [\n                m('input', {\n                    type: 'checkbox',\n                    checked: this.showLabel,\n                    onchange: () => {\n                        this.showLabel = !this.showLabel;\n                        this.dirty = true;\n                    },\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.showLabel'),\n            ]),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.showLabelDescription')),\n        ]));\n\n        items.add('enable-filter', m('.Form-group', [\n            m('label', [\n                m('input', {\n                    type: 'checkbox',\n                    checked: this.enableFilter,\n                    onchange: () => {\n                        this.enableFilter = !this.enableFilter;\n                        this.dirty = true;\n\n                        if (!this.enableFilter && this.showFilter) {\n                            this.showFilter = false;\n                        }\n                    },\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.enableFilter'),\n            ]),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.enableFilterDescription')),\n        ]));\n\n        items.add('show-filter', m('.Form-group', [\n            m('label', [\n                m('input', {\n                    type: 'checkbox',\n                    checked: this.showFilter,\n                    onchange: () => {\n                        this.showFilter = !this.showFilter;\n                        this.dirty = true;\n\n                        if (this.showFilter && !this.enableFilter) {\n                            this.enableFilter = true;\n                        }\n                    },\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.showFilter'),\n            ]),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.showFilterDescription')),\n        ]));\n\n        const accessDiffers = app.forum.attribute<any>('taxonomiesFulltextAccessDiffersFromFilter') || {};\n\n        items.add('enable-fulltext-search', m('.Form-group', [\n            m('label', [\n                m('input', {\n                    type: 'checkbox',\n                    checked: this.enableFulltextSearch,\n                    onchange: () => {\n                        this.enableFulltextSearch = !this.enableFulltextSearch;\n                        this.dirty = true;\n                    },\n                }),\n                ' ',\n                app.translator.trans(this.translationPrefix() + 'field.enableFulltextSearch'),\n            ]),\n            accessDiffers[this.type] ? m('.Alert', app.translator.trans(this.translationPrefix() + 'field.enableFulltextSearchWarning')) : null,\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.enableFulltextSearchDescription')),\n        ]));\n\n        return items;\n    }\n\n    scopeItems() {\n        const items = new ItemList();\n\n        const options: any = {\n            discussions: app.translator.trans(this.translationPrefix() + 'type-options.discussions'),\n            users: app.translator.trans(this.translationPrefix() + 'type-options.users'),\n        };\n\n        if ('flamarkt-core' in flarum.extensions || this.type === 'products') {\n            options.products = app.translator.trans(this.translationPrefix() + 'type-options.products');\n        }\n\n        items.add('type', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.type')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.typeDescription')),\n            Select.component({\n                options,\n                value: this.type,\n                onchange: (value: string) => {\n                    this.type = value;\n                    this.dirty = true;\n\n                    this.loadAllTagsIfNeeded();\n                },\n                disabled: !this.isNew(),\n            }),\n        ]));\n\n        if (this.type === 'discussions' && isExtensionEnabled('flarum-tags')) {\n            items.add('tags', m('.Form-group', [\n                m('label', app.translator.trans(this.translationPrefix() + 'field.tagScope')),\n                m('.helpText', app.translator.trans(this.translationPrefix() + 'field.tagScopeDescription')),\n                TagRelationshipSelect.component({\n                    relationship: this.tagIds.map(tagId => {\n                        return app.store.getById('tags', tagId) || app.store.createRecord('tags', {\n                            id: tagId,\n                            attributes: {},\n                        });\n                    }),\n                    onchange: (tags: Tag[]) => {\n                        this.tagIds = tags.map(tag => tag.id() || '');\n                        this.dirty = true;\n                    },\n                    placeholder: app.translator.trans(this.translationPrefix() + 'field.tagScopePlaceholder'),\n                }),\n            ]));\n        }\n\n        return items;\n    }\n\n    ondelete() {\n        if (!confirm(extractText(app.translator.trans(this.translationPrefix() + 'deleteConfirmation', {\n            name: this.attrs.taxonomy.name(),\n        })))) {\n            return;\n        }\n\n        this.loading = true;\n\n        this.attrs.taxonomy.delete({\n            errorHandler: this.onerror.bind(this),\n        }).then(() => {\n            app.modal.close();\n\n            if (this.attrs.ondelete) {\n                this.attrs.ondelete();\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n\n    // @ts-ignore wrong Modal.obsubmit typings in Flarum\n    onsubmit(event: Event) {\n        event.preventDefault();\n\n        this.loading = true;\n\n        const record: Taxonomy = this.attrs.taxonomy || app.store.createRecord('flamarkt-taxonomies');\n\n        record.save({\n            type: this.type,\n            name: this.name,\n            slug: this.slug,\n            description: this.description,\n            color: this.color,\n            icon: this.icon,\n            show_label: this.showLabel,\n            show_filter: this.showFilter,\n            enable_filter: this.enableFilter,\n            enable_fulltext_search: this.enableFulltextSearch,\n            allow_custom_values: this.allowCustomValues,\n            custom_value_validation: this.customValueValidation,\n            custom_value_slugger: this.customValueSlugger,\n            min_terms: this.minTerms,\n            max_terms: this.maxTerms,\n            tag_ids: this.tagIds,\n        }, {\n            errorHandler: this.onerror.bind(this),\n        }).then(record => {\n            app.modal.close();\n\n            if (this.attrs.onsave) {\n                this.attrs.onsave(record);\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n}\n","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport extractText from 'flarum/common/utils/extractText';\nimport {slug} from 'flarum/common/utils/string';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport AbstractEditModal, {AbstractEditModalAttrs} from './AbstractEditModal';\nimport Term from '../../common/models/Term';\nimport Taxonomy from '../../common/models/Taxonomy';\n\ninterface EditTermModalAttrs extends AbstractEditModalAttrs {\n    term: Term\n    taxonomy: Taxonomy\n    onsave?: (term: Term) => void\n    ondelete?: () => void\n}\n\nexport default class EditTermModal extends AbstractEditModal<EditTermModalAttrs> {\n    name!: string\n    slug!: string\n    description!: string\n    color!: string\n    icon!: string\n\n    oninit(vnode: Vnode<EditTermModalAttrs, this>) {\n        super.oninit(vnode);\n\n        const {term} = this.attrs;\n\n        this.name = term ? term.name() : '';\n        this.slug = term ? term.slug() : '';\n        this.description = term ? term.description() : '';\n        this.color = term ? term.color() : '';\n        this.icon = term ? term.icon() : '';\n    }\n\n    translationPrefix() {\n        return 'flamarkt-taxonomies.admin.edit-term.';\n    }\n\n    isNew() {\n        return !this.attrs.term;\n    }\n\n    form(): any {\n        return this.formItems().toArray();\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('name', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.name')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.name,\n                oninput: withAttr('value', (value: string) => {\n                    this.name = value;\n                    this.slug = slug(value);\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('slug', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.slug')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.slug,\n                oninput: withAttr('value', (value: string) => {\n                    this.slug = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('description', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.description')),\n            m('textarea.FormControl', {\n                value: this.description,\n                oninput: withAttr('value', (value: string) => {\n                    this.description = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('color', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.color')),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.color,\n                oninput: withAttr('value', (value: string) => {\n                    this.color = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        items.add('icon', m('.Form-group', [\n            m('label', app.translator.trans(this.translationPrefix() + 'field.icon')),\n            m('.helpText', app.translator.trans(this.translationPrefix() + 'field.iconDescription', {\n                a: m('a', {\n                    href: 'https://fontawesome.com/icons?m=free',\n                    tabindex: -1,\n                }),\n            })),\n            m('input.FormControl', {\n                type: 'text',\n                value: this.icon,\n                oninput: withAttr('value', (value: string) => {\n                    this.icon = value;\n                    this.dirty = true;\n                }),\n            }),\n        ]));\n\n        return items;\n    }\n\n    ondelete() {\n        if (!confirm(extractText(app.translator.trans(this.translationPrefix() + 'deleteConfirmation', {\n            name: this.attrs.term.name(),\n        })))) {\n            return;\n        }\n\n        this.loading = true;\n\n        this.attrs.term.delete({\n            errorHandler: this.onerror.bind(this),\n        }).then(() => {\n            app.modal.close();\n\n            if (this.attrs.ondelete) {\n                this.attrs.ondelete();\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n\n    // @ts-ignore wrong Modal.obsubmit typings in Flarum\n    onsubmit(event: Event) {\n        event.preventDefault();\n\n        this.loading = true;\n\n        const record: Term = this.attrs.term || app.store.createRecord('flamarkt-taxonomy-terms');\n\n        const options: any = {\n            errorHandler: this.onerror.bind(this),\n        };\n\n        if (this.isNew()) {\n            options.url = app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiTermsEndpoint();\n        }\n\n        record.save({\n            name: this.name,\n            slug: this.slug,\n            description: this.description,\n            color: this.color,\n            icon: this.icon,\n        }, options).then(record => {\n            app.modal.close();\n\n            if (this.attrs.onsave) {\n                this.attrs.onsave(record);\n            }\n        }, () => {\n            this.loaded();\n        });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Page'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/Sortable'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport Component, {ComponentAttrs} from 'flarum/common/Component';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Sortable from 'flamarkt/backoffice/common/components/Sortable';\nimport sortTerms from '../../common/utils/sortTerms';\nimport EditTermModal from './EditTermModal';\nimport taxonomyIcon from '../../common/helpers/taxonomyIcon';\nimport Term from '../../common/models/Term';\nimport Taxonomy from '../../common/models/Taxonomy';\nimport retrieveTerms from '../../common/utils/retrieveTerms';\n\ninterface TaxonomyTermsListAttrs extends ComponentAttrs {\n    taxonomy: Taxonomy\n}\n\nexport default class TaxonomyTermsList extends Component<TaxonomyTermsListAttrs> {\n    terms: Term[] | null = null\n\n    oninit(vnode: Vnode<TaxonomyTermsListAttrs, this>) {\n        super.oninit(vnode);\n\n        retrieveTerms(this.attrs.taxonomy).then(terms => {\n            this.terms = terms;\n            m.redraw();\n        });\n    }\n\n    view() {\n        return m('.TaxonomyTermEdit', [\n            this.terms === null ? LoadingIndicator.component({}) : this.viewTerms(this.terms),\n        ]);\n    }\n\n    viewTerms(terms: Term[]) {\n        return [\n            m(Sortable, {\n                containerTag: 'ol',\n                className: 'TaxonomyTermList',\n                handleClassName: null,\n                onsort: (origin: number, destination: number) => {\n                    terms.splice(destination, 0, ...terms.splice(origin, 1));\n\n                    app.request<ApiPayloadPlural>({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiOrderEndpoint(),\n                        body: {\n                            order: terms.map(term => term.id()),\n                        },\n                    }).then(result => {\n                        // If there's no error, we save the new order so it can be used in case a redraw is triggered\n                        app.store.pushPayload(result);\n                    }).catch(e => {\n                        // If there's an error, we force a full redraw to make sure the user sees what is saved\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, terms.map((term, index) => m('li.TaxonomyTermListItem', {\n                draggable: true,\n                key: term.id(),\n                style: {\n                    color: term.color(),\n                },\n            }, [\n                taxonomyIcon(term),\n                m('span.TaxonomyTermListItem-name', term.name()),\n                Button.component({\n                    className: 'Button Button--link',\n                    icon: 'fas fa-pencil-alt',\n                    onclick: () => {\n                        app.modal.show(EditTermModal, {\n                            term,\n                            ondelete: () => {\n                                terms.splice(index, 1);\n                            },\n                        });\n                    },\n                }),\n            ]))),\n            Button.component({\n                className: 'Button',\n                onclick: () => {\n                    app.modal.show(EditTermModal, {\n                        taxonomy: this.attrs.taxonomy,\n                        onsave: (term: Term) => {\n                            this.terms = sortTerms([...terms, term]);\n                        },\n                    });\n                },\n            }, app.translator.trans('flamarkt-taxonomies.admin.page.create.term')),\n            ' ',\n            Button.component({\n                className: 'Button',\n                onclick: () => {\n                    app.request<ApiPayloadPlural>({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiOrderEndpoint(),\n                        body: {\n                            order: [],\n                        },\n                    }).then(result => {\n                        this.terms = app.store.pushPayload<Term[]>(result);\n                        m.redraw();\n                    }).catch(e => {\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, app.translator.trans('flamarkt-taxonomies.admin.page.reset-term-order')),\n        ];\n    }\n}\n","import {Vnode} from 'mithril';\nimport app from 'flamarkt/backoffice/backoffice/app';\nimport {ComponentAttrs} from 'flarum/common/Component';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Page from 'flarum/common/components/Page';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Sortable from 'flamarkt/backoffice/common/components/Sortable';\nimport extractText from 'flarum/common/utils/extractText';\nimport sortTaxonomies from '../../common/utils/sortTaxonomies';\nimport TaxonomyTermsList from './TaxonomyTermsList';\nimport EditTaxonomyModal from './EditTaxonomyModal';\nimport taxonomyIcon from '../../common/helpers/taxonomyIcon';\nimport Taxonomy from '../../common/models/Taxonomy';\n\nexport default class TaxonomiesPage extends Page {\n    tabIndex: number = 0;\n    taxonomies: Taxonomy[] | null = null;\n\n    oninit(vnode: Vnode<ComponentAttrs, this>) {\n        super.oninit(vnode);\n\n        app.setTitle(extractText(app.translator.trans('flamarkt-taxonomies.admin.page.title')));\n\n        app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + '/flamarkt/taxonomies',\n            params: {\n                filter: {\n                    type: m.route.param('resource'),\n                },\n            },\n        }).then(result => {\n            this.taxonomies = app.store.pushPayload<Taxonomy[]>(result);\n            m.redraw();\n        });\n    }\n\n    view() {\n        return m('.TaxonomiesPage', m('.container', [\n            this.taxonomies === null ? LoadingIndicator.component({}) : this.viewTaxonomies(this.taxonomies),\n        ]));\n    }\n\n    viewTaxonomies(taxonomies: Taxonomy[]) {\n        return [\n            m(Sortable, {\n                className: 'TaxonomyTabs',\n                direction: 'horizontal',\n                handleClassName: null,\n                onsort: (origin: number, destination: number) => {\n                    taxonomies.splice(destination, 0, ...taxonomies.splice(origin, 1));\n\n                    app.request<ApiPayloadPlural>({\n                        method: 'POST',\n                        url: app.forum.attribute('apiUrl') + '/flamarkt/taxonomies/order',\n                        body: {\n                            order: taxonomies.map(taxonomy => taxonomy.id()),\n                            type: m.route.param('resource'),\n                        },\n                    }).then(result => {\n                        this.taxonomies = app.store.pushPayload<Taxonomy[]>(result);\n                        this.tabIndex = 0;\n                    }).catch(e => {\n                        m.redraw();\n                        throw e;\n                    });\n                },\n            }, [\n                ...taxonomies.map((taxonomy, index) => m('.TaxonomyTab', {\n                    draggable: true,\n                    key: taxonomy.id(),\n                    onclick: () => {\n                        this.tabIndex = index;\n                    },\n                    className: this.tabIndex === index ? 'active' : '',\n                    style: {\n                        color: taxonomy.color(),\n                    },\n                }, [\n                    taxonomyIcon(taxonomy),\n                    ' ',\n                    taxonomy.name(),\n                    ' ',\n                    Button.component({\n                        className: 'Button Button--link',\n                        icon: 'fas fa-pencil-alt',\n                        onclick: () => {\n                            app.modal.show(EditTaxonomyModal, {\n                                taxonomy,\n                                ondelete: () => {\n                                    taxonomies.splice(index, 1);\n                                    this.tabIndex = 0;\n                                },\n                            });\n                        },\n                    }),\n                ])),\n                Button.component({\n                    key: 'new',\n                    className: 'TaxonomyTab',\n                    icon: 'fas fa-plus',\n                    onclick: () => {\n                        app.modal.show(EditTaxonomyModal, {\n                            type: m.route.param('resource'),\n                            onsave: (taxonomy: Taxonomy) => {\n                                // If the user changed the type during creation, move to the page for that type\n                                // We won't be able to focus the new taxonomy\n                                if (taxonomy.type() !== m.route.param('resource')) {\n                                    m.route.set(app.route('taxonomies', {\n                                        resource: taxonomy.type(),\n                                    }));\n                                    return;\n                                }\n\n                                // If we are already on the correct page, focus the tab of the new taxonomy\n                                this.taxonomies = sortTaxonomies([...taxonomies, taxonomy]);\n                                this.tabIndex = this.taxonomies.findIndex(t => t === taxonomy);\n                            },\n                        });\n                    },\n                }, app.translator.trans('flamarkt-taxonomies.admin.page.create.taxonomy')),\n            ]),\n            // Nested DIVs to use key to force a redraw of the list\n            this.tabIndex < taxonomies.length ? m('div', m('div', {\n                key: taxonomies[this.tabIndex].id(),\n            }, TaxonomyTermsList.component({\n                taxonomy: taxonomies[this.tabIndex],\n            }))) : null,\n        ];\n    }\n}\n","import AbstractEditModal from './components/AbstractEditModal';\nimport EditTaxonomyModal from './components/EditTaxonomyModal';\nimport EditTermModal from './components/EditTermModal';\nimport TaxonomiesPage from './components/TaxonomiesPage';\nimport TaxonomyTermsList from './components/TaxonomyTermsList';\n\nexport const backoffice = {\n    'components/AbstractEditModal': AbstractEditModal,\n    'components/EditTaxonomyModal': EditTaxonomyModal,\n    'components/EditTermModal': EditTermModal,\n    'components/TaxonomiesPage': TaxonomiesPage,\n    'components/TaxonomyTermsList': TaxonomyTermsList,\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Forum'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/User'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-core']||{})['common']||{})['models/Product'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/computed'];","import Model from 'flarum/common/Model';\nimport computed from 'flarum/common/utils/computed';\n\n// A stripped-down model of Tags for our own use\nexport default class SimplifiedTag extends Model {\n    name = Model.attribute<string>('name');\n\n    isPrimary() {\n        return computed<boolean, this>('position', 'parent', (position, parent) => position !== null && parent === false).call(this);\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['backoffice']||{})['components/BackofficeNav'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['components/ActiveLinkButton'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LinkButton'];","import app from 'flamarkt/backoffice/backoffice/app';\nimport Page from 'flarum/common/components/Page';\n\nexport default class TaxonomiesRedirectPage extends Page {\n    oninit(vnode: any) {\n        super.oninit(vnode);\n\n        m.route.set(app.route('taxonomies', {\n            resource: 'discussions',\n        }));\n    }\n\n    view() {\n        return null;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-core']||{})['backoffice']||{})['pages/ProductShowPage'];","import app from 'flamarkt/backoffice/backoffice/app';\nimport {common} from '../common/compat';\nimport {backoffice} from './compat';\nimport addModels from '../common/addModels';\nimport SimplifiedTag from './models/SimplifiedTag';\nimport addLinks from './addLinks';\nimport addPages from './addPages';\nimport addProductEdit from './addProductEdit';\n\nexport {\n    common,\n    backoffice,\n};\n\napp.initializers.add('flamarkt-taxonomies', () => {\n    addModels();\n\n    // The Tags extension doesn't boot in the backoffice frontend, but we need the model+store so we register it ourselves\n    if (!app.store.models.tags) {\n        app.store.models.tags = SimplifiedTag;\n    }\n\n    addPages();\n    addLinks();\n    addProductEdit();\n});\n","import app from 'flarum/common/app';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Forum from 'flarum/common/models/Forum';\nimport User from 'flarum/common/models/User';\nimport Model from 'flarum/common/Model';\nimport Product from 'flamarkt/core/common/models/Product';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\n\nexport default function () {\n    app.store.models['flamarkt-taxonomies'] = Taxonomy;\n    app.store.models['flamarkt-taxonomy-terms'] = Term;\n\n    Forum.prototype.taxonomies = Model.hasMany('taxonomies');\n    Discussion.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    User.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n\n    if (Product) {\n        Product.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    }\n}\n","import app from 'flamarkt/backoffice/backoffice/app';\nimport TaxonomiesPage from './components/TaxonomiesPage';\nimport TaxonomiesRedirectPage from './components/TaxonomiesRedirectPage';\n\nexport default function () {\n    app.routes.taxonomies = {\n        path: '/taxonomies/:resource',\n        component: TaxonomiesPage,\n    };\n\n    // This was the old route. We keep it and redirect it to the new one in case it was bookmarked\n    app.routes.taxonomiesRedirect = {\n        path: '/taxonomies',\n        component: TaxonomiesRedirectPage,\n    };\n}\n","import app from 'flamarkt/backoffice/backoffice/app';\nimport BackofficeNav from 'flamarkt/backoffice/backoffice/components/BackofficeNav';\nimport ActiveLinkButton from 'flamarkt/backoffice/common/components/ActiveLinkButton';\nimport {extend} from 'flarum/common/extend';\nimport LinkButton from 'flarum/common/components/LinkButton';\n\nexport default function () {\n    app.extensionData.for('flamarkt-taxonomies').registerSetting(() => {\n        return m('.Form-group', LinkButton.component({\n            className: 'Button',\n            href: app.route('taxonomies', {\n                resource: 'discussions',\n            }),\n        }, app.translator.trans('flamarkt-taxonomies.admin.settings.goToPage')));\n    });\n\n    extend(BackofficeNav.prototype, 'items', function (items) {\n        items.add('taxonomies', ActiveLinkButton.component({\n            href: app.route('taxonomies', {\n                resource: 'discussions',\n            }),\n            icon: 'fas fa-tags',\n            activeRoutes: [\n                'taxonomies',\n            ],\n        }, app.translator.trans('flamarkt-taxonomies.admin.menu.title')), 15);\n\n        const currentRouteName = (app.current.data as any).routeName;\n\n        if (currentRouteName === 'taxonomies') {\n            items.add('taxonomies-discussions', LinkButton.component({\n                className: 'TaxonomiesChildNav',\n                href: app.route('taxonomies', {\n                    resource: 'discussions',\n                }),\n                icon: 'fas fa-comments',\n            }, app.translator.trans('flamarkt-taxonomies.admin.menu.discussions')), 15);\n\n            items.add('taxonomies-users', LinkButton.component({\n                className: 'TaxonomiesChildNav',\n                href: app.route('taxonomies', {\n                    resource: 'users',\n                }),\n                icon: 'fas fa-user-tag',\n            }, app.translator.trans('flamarkt-taxonomies.admin.menu.users')), 15);\n\n            if ('flamarkt-core' in flarum.extensions) {\n                items.add('taxonomies-products', LinkButton.component({\n                    className: 'TaxonomiesChildNav',\n                    href: app.route('taxonomies', {\n                        resource: 'products',\n                    }),\n                    icon: 'fas fa-box',\n                }, app.translator.trans('flamarkt-taxonomies.admin.menu.products')), 15);\n            }\n        }\n    });\n}\n","import app from 'flamarkt/backoffice/backoffice/app';\nimport ProductShowPage from 'flamarkt/core/backoffice/pages/ProductShowPage';\nimport {extend} from 'flarum/common/extend';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport ChooseTaxonomyTermsDropdown from '../common/components/ChooseTaxonomyTermsDropdown';\n\nexport default function () {\n    if (!ProductShowPage) {\n        return;\n    }\n\n    extend(ProductShowPage.prototype, 'fields', function (items) {\n        if (!this.product!.exists || !this.product!.attribute('canEditTaxonomies')) {\n            return;\n        }\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'products') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), m('.Form-group', [\n                m('label', taxonomy.name()),\n                m(ChooseTaxonomyTermsDropdown, {\n                    resource: this.product,\n                    taxonomy,\n                }),\n            ]), -100);\n        });\n    });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","extensions","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","core","compat","Term","_Model","_this","_len","arguments","length","args","Array","_key","apply","concat","name","Model","slug","description","color","icon","order","createdAt","taxonomy","apiEndpoint","this","exists","data","id","taxonomyIcon","term","attrs","settings","hasIcon","_settings$useColor","useColor","className","classList","style","backgroundColor","m","termLabel","discussionLink","extract","userLink","productLink","tagText","app","tag","title","undefined","canSearch","_app$route","_app$route2","href","q","Link","_extends","assign","target","i","source","attributes","method","url","apiTermsEndpoint","then","result","terms","forEach","pushData","relationships","ChooseTaxonomyTermsModal","_Modal","availableTerms","selectedTerms","searchFilter","activeListIndex","inputIsFocused","saving","bypassReqs","navigator","_proto","oninit","vnode","_this2","addTerm","resource","taxonomyTerms","retrieveTerms","redraw","KeyboardNavigatable","onUp","setIndex","onDown","onSelect","select","onRemove","toggleTerm","when","event","preventDefault","indexInSelectedTerms","findIndex","t","b","type","push","removeTerm","index","splice","displayName","getInstruction","count","minTerms","remaining","filteredAvailableTerms","filter","toLowerCase","substr","allowCustomValues","some","validation","customValueValidation","regex","indexOf","parts","split","RegExp","test","maxTerms","content","contentItems","toArray","_this3","items","ItemList","add","viewForm","listAvailableTerms","canBypassTermCounts","Switch","state","onchange","checked","formItems","inputItems","Button","disabled","loading","_this4","map","onclick","onready","placeholder","extractText","oninput","onkeydown","navigate","onfocus","oninputfocus","onblur","oninputblur","LoadingIndicator","listAvailableTerm","_this5","colored","selected","active","onmouseover","highlight","_this6","setTimeout","e","$element","getDomElement","metaKey","ctrlKey","is","onsubmit","dispatchEvent","Event","$","scrollToItem","$dropdown","indexLength","$item","_$dropdown$offset","_$item$offset","scrollTop","dropdownScroll","dropdownTop","offset","top","dropdownBottom","outerHeight","itemTop","itemBottom","parseInt","css","stop","animate","saveResource","save","taxonomies","verbatim","termToIdentifier","onsaved","onerror","DiscussionPage","update","Modal","ChooseTaxonomyTermsDropdown","_ChooseTaxonomyTermsM","lastSaveState","dropdownIsFocused","onmousedown","oncreate","element","dom","dropdown","querySelector","contains","document","addEventListener","onbeforeremove","onremove","removeEventListener","view","remove","status","slice","sort","termsLabel","children","showLabel","sortTerms","Taxonomy","showFilter","enableFilter","enableFulltextSearch","customValueSlugger","tagIds","apiOrderEndpoint","common","sortTaxonomies","AbstractEditModal","dirty","translationPrefix","isNew","form","ondelete","alertAttrs","Alert","TagRelationshipSelect","_AbstractRelationship","search","query","Promise","resolve","results","item","AbstractRelationshipSelect","EditTaxonomyModal","_AbstractEditModal","loadingTags","tagsLoaded","loadAllTagsIfNeeded","isExtensionEnabled","include","fillItems","scopeItems","browseItems","withAttr","tabindex","min","step","Select","options","alpha_num","alpha_dash","random","transliterator","accessDiffers","discussions","users","products","component","relationship","tagId","tags","_this7","confirm","errorHandler","loaded","_this8","show_label","show_filter","enable_filter","enable_fulltext_search","allow_custom_values","custom_value_validation","custom_value_slugger","min_terms","max_terms","tag_ids","record","onsave","EditTermModal","TaxonomyTermsList","_Component","viewTerms","Sortable","containerTag","handleClassName","onsort","origin","destination","body","draggable","Component","TaxonomiesPage","_Page","tabIndex","params","route","param","viewTaxonomies","direction","set","Page","backoffice","SimplifiedTag","isPrimary","computed","position","parent","TaxonomiesRedirectPage","Forum","Discussion","User","Product","path","registerSetting","LinkButton","extend","BackofficeNav","ActiveLinkButton","activeRoutes","ProductShowPage","product","attribute"],"sourceRoot":""}