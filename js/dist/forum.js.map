{"version":3,"sources":["webpack://@flamarkt/taxonomies/webpack/bootstrap","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/Model']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/app']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/app']\"","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flamarkt/taxonomies/./src/common/utils/sortTaxonomies.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/extend']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/Button']\"","webpack://@flamarkt/taxonomies/./src/common/helpers/taxonomyIcon.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@flamarkt/taxonomies/./src/common/helpers/termLabel.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsModal.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/extract']\"","webpack://@flamarkt/taxonomies/./src/common/models/Term.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/termsLabel.ts","webpack://@flamarkt/taxonomies/./src/common/utils/termToIdentifier.ts","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@flamarkt/taxonomies/./src/common/utils/sortTerms.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/helpers/icon']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/ItemList']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/classList']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/extractText']\"","webpack://@flamarkt/taxonomies/./src/common/models/Taxonomy.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/labelsFromMultipleTaxonomiesList.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsDropdown.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/Modal']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@flamarkt/taxonomies/external \"((flarum.extensions['flamarkt-core']||{})['common']||{})['models/Product']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/LinkButton']\"","webpack://@flamarkt/taxonomies/./src/common/compat.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/helpers/highlight']\"","webpack://@flamarkt/taxonomies/external \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['utils/KeyboardNavigatable']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/Component']\"","webpack://@flamarkt/taxonomies/./src/common/addModels.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/models/Discussion']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/models/Forum']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/models/User']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/components/DiscussionComposer']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/components/UserPage']\"","webpack://@flamarkt/taxonomies/external \"((flarum.extensions['flamarkt-core']||{})['forum']||{})['layouts/ProductIndexLayout']\"","webpack://@flamarkt/taxonomies/external \"((flarum.extensions['flamarkt-core']||{})['forum']||{})['pages/ProductIndexPage']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/Dropdown']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/components/IndexPage']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/states/DiscussionListState']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/states/GlobalSearchState']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/components/DiscussionListItem']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/components/DiscussionHero']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/utils/UserControls']\"","webpack://@flamarkt/taxonomies/./src/forum/components/TaxonomyDropdown.ts","webpack://@flamarkt/taxonomies/./src/forum/components/UserTaxonomyPage.ts","webpack://@flamarkt/taxonomies/./src/forum/utils/showsFilterFor.ts","webpack://@flamarkt/taxonomies/./src/forum/compat.ts","webpack://@flamarkt/taxonomies/./src/forum/index.ts","webpack://@flamarkt/taxonomies/./src/forum/addComposerControls.ts","webpack://@flamarkt/taxonomies/./src/forum/addDiscussionControls.ts","webpack://@flamarkt/taxonomies/./src/forum/addIndexFilters.ts","webpack://@flamarkt/taxonomies/./src/forum/addLabels.ts","webpack://@flamarkt/taxonomies/./src/forum/addPages.ts","webpack://@flamarkt/taxonomies/./src/forum/addProductFilters.ts","webpack://@flamarkt/taxonomies/./src/forum/addUserControls.ts","webpack://@flamarkt/taxonomies/./src/forum/addUserDirectorySearchType.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_setPrototypeOf","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","constructor","taxonomies","slice","sort","a","b","order","taxonomyIcon","term","attrs","settings","hasIcon","icon","useColor","className","classList","style","color","backgroundColor","termLabel","discussionLink","extract","userLink","tagText","app","translator","trans","tag","Term","taxonomy","showFilter","title","description","href","route","slug","config","routes","fof_user_directory","q","ChooseTaxonomyTermsModal","availableTerms","selectedTerms","searchFilter","activeListIndex","inputIsFocused","saving","navigator","oninit","vnode","this","forEach","addTerm","resource","taxonomyTerms","id","request","method","url","forum","attribute","apiEndpoint","then","result","store","pushPayload","redraw","KeyboardNavigatable","onUp","setIndex","onDown","onSelect","select","onRemove","length","toggleTerm","when","event","preventDefault","indexInSelectedTerms","findIndex","data","type","push","removeTerm","index","splice","displayName","getInstruction","count","minTerms","remaining","filteredAvailableTerms","filter","toLowerCase","substr","allowCustomValues","some","validation","customValueValidation","regex","indexOf","parts","split","RegExp","test","createRecord","attributes","maxTerms","content","viewForm","listAvailableTerms","formItems","toArray","items","ItemList","add","inputItems","Button","component","disabled","loading","map","onclick","onready","placeholder","extractText","oninput","target","onkeydown","navigate","onfocus","oninputfocus","onblur","oninputblur","terms","LoadingIndicator","listAvailableTerm","colored","selected","active","onmouseover","exists","highlight","setTimeout","e","$element","getDomElement","metaKey","ctrlKey","is","onsubmit","dispatchEvent","Event","$","scrollToItem","$dropdown","indexLength","$item","scrollTop","dropdownScroll","dropdownTop","offset","top","dropdownBottom","outerHeight","itemTop","itemBottom","parseInt","css","stop","animate","saveResource","modal","close","save","relationships","verbatim","termToIdentifier","onsaved","onerror","DiscussionPage","current","matches","update","Modal","Model","createdAt","transformDate","hasOne","termsLabel","children","showLabel","sortTerms","getIdentifier","_extends","assign","arguments","source","apply","Taxonomy","customValueSlugger","canSearch","apiOrderEndpoint","apiTermsEndpoint","sortTaxonomies","ChooseTaxonomyTermsDropdown","lastSaveState","dropdownIsFocused","onmousedown","oncreate","element","dom","dropdown","querySelector","contains","document","addEventListener","onbeforeremove","onremove","removeEventListener","view","remove","status","extensions","common","labelsFromMultipleTaxonomiesList","models","Forum","hasMany","Discussion","User","Product","TaxonomyDropdown","termsInitialized","activeTermSlug","loadTerms","pushData","activeTerm","find","Dropdown","buttonClassName","label","onshow","onchange","Component","UserTaxonomyPage","loadUser","param","user","UserPage","showsFilterFor","initializers","extend","DiscussionComposer","selectedTaxonomyTerms","taxonomyId","show","trigger","override","original","callbacks","resolve","selectedTags","callNextCallback","Promise","shift","taxonomyData","DiscussionControls","discussion","IndexPage","all","search","params","currentFilterForTaxonomy","routeName","set","GlobalSearchState","DiscussionListState","include","filterTermSlug","DiscussionListItem","DiscussionHero","flamarktTaxonomiesUser","path","username","ProductIndexLayout","ProductIndexPage","state","UserControls","LinkButton","addModels","searchTypes","AbstractType","components","SearchField","TaxonomyTermType","allTerms","loadingAllTermsPromise","suggestions","resourceType","query","promises","renderKind","renderLabel","applyFilter","initializeFromParams","gambits","word","gambit","addUserDirectorySearchType"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 58);\n","module.exports = flarum.core.compat['common/Model'];","module.exports = flarum.core.compat['common/app'];","module.exports = flarum.core.compat['forum/app'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import Taxonomy from '../models/Taxonomy';\n\nexport default function (taxonomies: Taxonomy[] | false): Taxonomy[] {\n    // Special case for when retrieving an empty relationship from the store\n    if (taxonomies === false) {\n        taxonomies = [];\n    }\n\n    return taxonomies.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['common/extend'];","module.exports = flarum.core.compat['common/components/Button'];","import {Attributes} from 'mithril';\nimport classList from 'flarum/common/utils/classList';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\ninterface Settings {\n    useColor?: boolean\n}\n\nexport default function taxonomyIcon(term: Taxonomy | Term, attrs: Attributes = {}, settings: Settings = {}) {\n    const hasIcon = term && term.icon();\n    const {useColor = true} = settings;\n\n    attrs.className = classList([\n        attrs.className,\n        'icon',\n        hasIcon ? term.icon() : 'TaxonomyIcon',\n    ]);\n\n    if (term) {\n        attrs.style = attrs.style || {};\n\n        if (hasIcon) {\n            attrs.style.color = useColor ? term.color() : '';\n        } else {\n            attrs.style.backgroundColor = term.color();\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return hasIcon ? m('i', attrs) : m('span', attrs);\n}\n","module.exports = flarum.core.compat['common/components/LoadingIndicator'];","import {Attributes} from 'mithril';\nimport app from 'flarum/common/app';\nimport extract from 'flarum/common/utils/extract';\nimport Term from '../models/Term';\nimport taxonomyIcon from './taxonomyIcon';\nimport Taxonomy from '../models/Taxonomy';\n\nexport default function termLabel(term: Taxonomy | Term | null = null, attrs: Attributes = {}) {\n    attrs.style = attrs.style || {};\n    attrs.className = 'TaxonomyLabel ' + (attrs.className || '');\n\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n    const tagText = term ? term.name() : app.translator.trans('flarum-tags.lib.deleted_tag_text');\n    let tag = 'span';\n\n    if (term) {\n        const color = term.color();\n        if (color) {\n            attrs.style.backgroundColor = attrs.style.color = color;\n            attrs.className += ' colored';\n        }\n\n        // We need to check for instanceof because this method is also used with a taxonomy passed as a value\n        if (term instanceof Term && term.taxonomy() && term.taxonomy().showFilter()) {\n            if (discussionLink) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('index', {[term.taxonomy().slug()]: term.slug()});\n                attrs.config = m.route;\n                tag = 'a';\n            }\n\n            // Only generate user taxonomy links if fof/user-directory is enabled\n            if (userLink && app.routes.fof_user_directory) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('fof_user_directory', {q: 'taxonomy:' + term.taxonomy().slug() + ':' + term.slug()});\n                attrs.config = m.route;\n                tag = 'a';\n            }\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return m(tag, attrs, m('span.TaxonomyLabel-text', [\n        term && term.icon() && taxonomyIcon(term, {}, {useColor: false}),\n        ' ' + tagText,\n    ]));\n}\n","import {Children, Vnode} from 'mithril';\nimport app from 'flarum/common/app';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Modal, {IInternalModalAttrs} from 'flarum/common/components/Modal';\nimport Model from 'flarum/common/Model';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport highlight from 'flarum/common/helpers/highlight';\nimport classList from 'flarum/common/utils/classList';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport extractText from 'flarum/common/utils/extractText';\n\nimport KeyboardNavigatable from 'flamarkt/backoffice/common/utils/KeyboardNavigatable';\n\nimport termLabel from '../helpers/termLabel';\nimport taxonomyIcon from '../helpers/taxonomyIcon';\nimport termToIdentifier from '../utils/termToIdentifier';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\n/**\n * Comparing objects directly is unreliable because we will be creating some new records as well\n * So we use this method to do a proper deep check\n */\nfunction isSameTerm(a: Term, b: Term) {\n    if (a.data.type !== b.data.type) {\n        return false;\n    }\n\n    // If both have an ID and it's different\n    if (a.id() && b.id()) {\n        return a.id() === b.id();\n    }\n\n    // If only one has an ID, it's different\n    if (!a.id() !== !b.id()) {\n        return false;\n    }\n\n    // If both don't have an ID, it's a new value and we compare the name\n    return a.name() === b.name();\n}\n\nexport interface ChooseTaxonomyTermsModalAttrs extends IInternalModalAttrs {\n    resource: Model\n    taxonomy: Taxonomy\n    selectedTerms: Term[]\n    onsubmit?: (terms: Term[]) => void\n}\n\n/**\n * Based on Flarum's TagDiscussionModal\n */\nexport default class ChooseTaxonomyTermsModal extends Modal<ChooseTaxonomyTermsModalAttrs> {\n    availableTerms: Term[] | null = null;\n    selectedTerms: Term[] = [];\n    searchFilter: string = '';\n    activeListIndex: number = 0;\n    inputIsFocused: boolean = false;\n    saving: boolean = false;\n    navigator!: KeyboardNavigatable;\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        if (this.attrs.selectedTerms) {\n            this.attrs.selectedTerms.forEach(this.addTerm.bind(this));\n        } else if (this.attrs.resource) {\n            this.attrs.resource.taxonomyTerms().forEach((term: Term) => {\n                if (term.taxonomy().id() === this.attrs.taxonomy.id()) {\n                    this.addTerm(term);\n                }\n            });\n        }\n\n        app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiEndpoint() + '/terms',\n        }).then(result => {\n            this.availableTerms = app.store.pushPayload<Term[]>(result);\n\n            m.redraw();\n        });\n\n        this.navigator = new KeyboardNavigatable();\n        this.navigator\n            .onUp(() => this.setIndex(this.activeListIndex - 1, true))\n            .onDown(() => this.setIndex(this.activeListIndex + 1, true))\n            .onSelect(this.select.bind(this))\n            .onRemove(() => {\n                if (!this.selectedTerms.length) {\n                    return;\n                }\n\n                this.toggleTerm(this.selectedTerms[this.selectedTerms.length - 1]);\n            })\n            .when(event => {\n                // We want to allow selecting with space because it's a common way to select\n                // However this interferes with the ability to enter spaces\n                // So we will have space act as select, but only if nothing is typed yet\n                if (event.key === ' ' && this.searchFilter === '') {\n                    event.preventDefault();\n                    this.select(event);\n\n                    return false;\n                }\n\n                return true;\n            });\n    }\n\n    indexInSelectedTerms(term: Term) {\n        return this.selectedTerms.findIndex(t => isSameTerm(t, term));\n    }\n\n    addTerm(term: Term) {\n        this.selectedTerms.push(term);\n    }\n\n    removeTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.selectedTerms.splice(index, 1);\n        }\n    }\n\n    className() {\n        return 'ChooseTaxonomyTermsModal';\n    }\n\n    title() {\n        return this.attrs.resource\n            ? app.translator.trans('flamarkt-taxonomies.lib.modal.title.edit', {\n                taxonomy: this.attrs.taxonomy.name(),\n                title: m('em', this.attrs.resource.title ? this.attrs.resource.title() : this.attrs.resource.displayName()),\n            })\n            : app.translator.trans('flamarkt-taxonomies.lib.modal.title.new', {\n                taxonomy: this.attrs.taxonomy.name(),\n            });\n    }\n\n    getInstruction() {\n        const count = this.selectedTerms.length;\n\n        if (this.attrs.taxonomy.minTerms() && count < this.attrs.taxonomy.minTerms()) {\n            const remaining = this.attrs.taxonomy.minTerms() - count;\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholder', {\n                count: remaining,\n            });\n        } else if (count === 0) {\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholderOptional');\n        }\n\n        return '';\n    }\n\n    filteredAvailableTerms() {\n        let availableTerms = this.availableTerms === null ? [] : this.availableTerms;\n        const filter = this.searchFilter.toLowerCase();\n\n        if (filter) {\n            availableTerms = availableTerms.filter(term => term.name().substr(0, filter.length).toLowerCase() === filter);\n\n            if (\n                this.attrs.taxonomy.allowCustomValues() &&\n                !availableTerms.some(term => term.name().toLowerCase() === filter)\n            ) {\n                const validation = this.attrs.taxonomy.customValueValidation();\n                let regex: RegExp | null = null;\n\n                if (validation === 'alpha_num') {\n                    regex = /^[a-z0-9]$/i;\n                } else if (validation === 'alpha_dash') {\n                    regex = /^[a-z0-9_-]$/i;\n                } else if (validation.indexOf('/') === 0) {\n                    const parts = validation.split('/');\n                    if (parts.length === 3) {\n                        regex = new RegExp(parts[1], parts[2]);\n                    }\n                }\n\n                if (!regex || regex.test(this.searchFilter)) {\n                    availableTerms.push(app.store.createRecord('flamarkt-taxonomy-terms', {\n                        attributes: {\n                            name: this.searchFilter,\n                        },\n                    }));\n                }\n            }\n        }\n\n        if (this.attrs.taxonomy.maxTerms() && this.selectedTerms.length >= this.attrs.taxonomy.maxTerms()) {\n            availableTerms = [];\n        }\n\n        return availableTerms;\n    }\n\n    content() {\n        return [\n            this.viewForm(),\n            this.listAvailableTerms(this.filteredAvailableTerms()),\n        ];\n    }\n\n    viewForm() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.Modal-body', [\n            description ? m('p', description) : null,\n            m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n        ]);\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('input', m('.ChooseTaxonomyTermsModal-form-input', m('.TermsInput.FormControl', {\n            className: this.inputIsFocused ? 'focus' : '',\n        }, this.inputItems().toArray())), 20);\n\n        items.add('submit', m('.ChooseTaxonomyTermsModal-form-submit.App-primaryControl', Button.component({\n            type: 'submit',\n            className: 'Button Button--primary',\n            disabled: this.attrs.taxonomy.minTerms() && this.selectedTerms.length < this.attrs.taxonomy.minTerms(),\n            icon: 'fas fa-check',\n            loading: this.saving,\n        }, app.translator.trans('flamarkt-taxonomies.lib.modal.submit'))), 10);\n\n        return items;\n    }\n\n    inputItems() {\n        const items = new ItemList();\n\n        items.add('selected', this.selectedTerms.map(term => {\n            return m('span.TermsInput-term', {\n                onclick: () => {\n                    this.toggleTerm(term);\n                    this.onready();\n                },\n            }, termLabel(term));\n        }), 20);\n\n        items.add('control', m('input.FormControl', {\n            placeholder: extractText(this.getInstruction()),\n            value: this.searchFilter,\n            oninput: (event: Event) => {\n                this.searchFilter = (event.target as HTMLInputElement).value;\n                this.activeListIndex = 0;\n            },\n            onkeydown: this.navigator.navigate.bind(this.navigator),\n            // Use local methods so that other extensions can extend behaviour\n            onfocus: this.oninputfocus.bind(this),\n            onblur: this.oninputblur.bind(this),\n        }), 10);\n\n        return items;\n    }\n\n    oninputfocus() {\n        this.inputIsFocused = true;\n    }\n\n    oninputblur() {\n        this.inputIsFocused = false;\n    }\n\n    listAvailableTerms(terms: Term[]): Children {\n        return m('.Modal-footer', this.availableTerms === null ?\n            LoadingIndicator.component() :\n            m('ul.ChooseTaxonomyTermsModal-list.SelectTermList', {\n                className: terms.some(term => term.description()) ? 'SelectTermList--with-descriptions' : '',\n            }, terms.map(this.listAvailableTerm.bind(this)))\n        );\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li.SelectTermListItem', {\n            'data-index': index,\n            className: classList({\n                colored: !!term.color(),\n                selected: this.indexInSelectedTerms(term) !== -1,\n                active: this.activeListIndex === index,\n            }),\n            style: {color: term.color()},\n            onmouseover: () => this.activeListIndex = index,\n            onclick: this.toggleTerm.bind(this, term),\n        }, [\n            taxonomyIcon(term),\n            m('span.SelectTermListItem-name', term.exists ? highlight(term.name(), this.searchFilter) : app.translator.trans('flamarkt-taxonomies.lib.modal.custom', {\n                value: m('em', term.name()),\n            })),\n            term.description() ? m('span.SelectTermListItem-description', term.description()) : '',\n        ]);\n    }\n\n    toggleTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.removeTerm(term);\n        } else {\n            this.addTerm(term);\n        }\n\n        if (this.searchFilter) {\n            this.searchFilter = '';\n            this.activeListIndex = 0;\n        }\n\n        // Defer re-focusing to next browser draw\n        setTimeout(() => {\n            this.onready();\n        });\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case we don't want to submit just yet, but we will delete the text\n        // so that typing enter multiple times does end up submitting\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Ctrl + Enter submits the selection, just Enter completes the current entry\n        if (e.metaKey || e.ctrlKey || $element.is('.selected')) {\n            if (this.selectedTerms.length) {\n                // Calling .trigger() on the form with jQuery doesn't seem to trigger the onsubmit, so we'll just do that directly instead\n                this.onsubmit();\n            }\n        } else {\n            $element[0].dispatchEvent(new Event('click'));\n        }\n    }\n\n    getDomElement(index: number) {\n        return this.$(`.SelectTermListItem[data-index=\"${index}\"]`);\n    }\n\n    setIndex(index: number, scrollToItem: boolean) {\n        const $dropdown = this.$('.ChooseTaxonomyTermsModal-list');\n\n        const indexLength = this.$('.SelectTermListItem').length;\n\n        if (index < 0) {\n            index = indexLength - 1;\n        } else if (index >= indexLength) {\n            index = 0;\n        }\n\n        const $item = this.getDomElement(index);\n        this.activeListIndex = index;\n\n        m.redraw();\n\n        if (scrollToItem) {\n            const dropdownScroll = $dropdown.scrollTop() || 0;\n            const dropdownTop = $dropdown.offset()?.top || 0;\n            const dropdownBottom = dropdownTop + ($dropdown.outerHeight() || 0);\n            const itemTop = $item.offset()?.top || 0;\n            const itemBottom = itemTop + ($item.outerHeight() || 0);\n\n            let scrollTop;\n            if (itemTop < dropdownTop) {\n                scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n            } else if (itemBottom > dropdownBottom) {\n                scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n            }\n\n            if (typeof scrollTop !== 'undefined') {\n                $dropdown.stop(true).animate({scrollTop}, 100);\n            }\n        }\n    }\n\n    onsubmit(event?: Event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.attrs.resource) {\n            this.saveResource();\n\n            // Do not run the normal code - it might close the modal even if an error occurred\n            return;\n        }\n\n        if (this.attrs.onsubmit) this.attrs.onsubmit(this.selectedTerms);\n\n        app.modal.close();\n    }\n\n    saveResource() {\n        this.saving = true;\n\n        this.attrs.resource.save({\n            relationships: {\n                taxonomies: [\n                    {\n                        verbatim: true, // Flarum workaround, defined in flamarkt/core\n                        type: 'flamarkt-taxonomies',\n                        id: this.attrs.taxonomy.id(),\n                        relationships: {\n                            terms: {\n                                data: this.selectedTerms.map(termToIdentifier),\n                            },\n                        },\n                    },\n                ],\n            },\n        }).then(this.onsaved.bind(this), this.onerror.bind(this));\n    }\n\n    onsaved() {\n        // Need to check if DiscussionPage exists because in backoffice frontend the import will be undefined\n        if (DiscussionPage && app.current.matches(DiscussionPage)) {\n            app.current.get('stream').update();\n        }\n        this.saving = false;\n        m.redraw();\n\n        app.modal.close();\n    }\n\n    onerror() {\n        this.saving = false;\n        m.redraw();\n    }\n}\n","module.exports = flarum.core.compat['common/utils/extract'];","import Model from 'flarum/common/Model';\nimport Taxonomy from './Taxonomy';\n\nexport default class Term extends Model {\n    name = Model.attribute<string>('name');\n    slug = Model.attribute<string>('slug');\n    description = Model.attribute<string>('description');\n    color = Model.attribute<string>('color');\n    icon = Model.attribute<string>('icon');\n    order = Model.attribute<number>('order');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n\n    taxonomy = Model.hasOne<Taxonomy>('taxonomy');\n\n    protected apiEndpoint(): string {\n        // @ts-ignore data.id not type-hinted\n        return '/flamarkt/taxonomy-terms' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","import {Attributes, Vnode} from 'mithril';\nimport extract from 'flarum/common/utils/extract';\nimport termLabel from './termLabel';\nimport sortTerms from '../utils/sortTerms';\nimport Term from '../models/Term';\n\nexport default function termsLabel(terms: Term[], attrs: Attributes = {}) {\n    const children: Vnode[] = [];\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n\n    attrs.className = 'TaxonomiesLabel ' + (attrs.className || '');\n\n    if (terms) {\n        let taxonomy = extract(attrs, 'taxonomy');\n\n        if (!taxonomy) {\n            taxonomy = terms[0].taxonomy();\n        }\n\n        if (taxonomy) {\n            attrs['data-slug'] = taxonomy.slug();\n\n            if (taxonomy.showLabel()) {\n                children.push(termLabel(taxonomy, {\n                    className: 'TaxonomyParentLabel',\n                }));\n            }\n        }\n\n        sortTerms(terms).forEach(tag => {\n            if (tag || terms.length === 1) {\n                children.push(termLabel(tag, {discussionLink, userLink}));\n            }\n        });\n    } else {\n        children.push(termLabel());\n    }\n\n    return m('span', attrs, children);\n}\n","import Model from 'flarum/common/Model';\nimport Term from '../models/Term';\n\n/**\n * Prepares a model for a relationship payload\n * We need to keep the name value for custom terms\n */\nexport default function (term: Term) {\n    if (term.id()) {\n        return Model.getIdentifier(term);\n    }\n\n    return {\n        ...Model.getIdentifier(term),\n        attributes: {\n            name: term.name(),\n        },\n    }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import Term from '../models/Term';\n\nexport default function (terms: Term[]): Term[] {\n    return terms.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['common/helpers/icon'];","module.exports = flarum.core.compat['common/utils/ItemList'];","module.exports = flarum.core.compat['common/utils/classList'];","module.exports = flarum.core.compat['common/utils/extractText'];","import Model from 'flarum/common/Model';\n\nexport default class Taxonomy extends Model {\n    type = Model.attribute<string>('type');\n    name = Model.attribute<string>('name');\n    slug = Model.attribute<string>('slug');\n    description = Model.attribute<string>('description');\n    color = Model.attribute<string>('color');\n    icon = Model.attribute<string>('icon');\n    order = Model.attribute<number>('order');\n    showLabel = Model.attribute<boolean>('showLabel');\n    showFilter = Model.attribute<boolean>('showFilter');\n    allowCustomValues = Model.attribute<boolean>('allowCustomValues');\n    customValueValidation = Model.attribute<string | null>('customValueValidation');\n    customValueSlugger = Model.attribute<string | null>('customValueSlugger');\n    minTerms = Model.attribute<number>('minTerms');\n    maxTerms = Model.attribute<number>('maxTerms');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n    canSearch = Model.attribute<boolean>('canSearch');\n\n    protected apiEndpoint(): string {\n        // @ts-ignore data.id not type-hinted\n        return '/flamarkt/taxonomies' + (this.exists ? '/' + this.data.id : '');\n    }\n\n    apiOrderEndpoint(): string {\n        return this.apiEndpoint() + '/terms/order';\n    }\n\n    apiTermsEndpoint(): string {\n        return this.apiEndpoint() + '/terms';\n    }\n}\n","import {Attributes} from 'mithril';\nimport sortTaxonomies from '../utils/sortTaxonomies';\nimport termsLabel from './termsLabel';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\nexport default function (terms: Term[], attrs: Attributes = {}) {\n    const taxonomies: Taxonomy[] = [];\n\n    terms.forEach(term => {\n        const taxonomy = term.taxonomy();\n\n        if (taxonomy && taxonomies.indexOf(taxonomy) === -1) {\n            taxonomies.push(taxonomy);\n        }\n    });\n\n    return sortTaxonomies(taxonomies).map(taxonomy => {\n        return termsLabel(terms.filter(term => term.taxonomy() === taxonomy), {...attrs});\n    });\n}\n","import {Vnode, VnodeDOM} from 'mithril';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport icon from 'flarum/common/helpers/icon';\nimport ChooseTaxonomyTermsModal, {ChooseTaxonomyTermsModalAttrs} from './ChooseTaxonomyTermsModal';\nimport Term from '../models/Term';\n\nexport default class ChooseTaxonomyTermsDropdown extends ChooseTaxonomyTermsModal {\n    lastSaveState: 'success' | 'error' | 'neutral' = 'neutral'\n    dropdownIsFocused: boolean = false\n    onmousedown!: (event: Event) => void\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        this.navigator.when(event => {\n            // Same as the original when() in the modal\n            // (we are replacing the original since we can have a single callback)\n            if (event.key === ' ' && this.searchFilter === '') {\n                event.preventDefault();\n                this.select(event);\n\n                return false;\n            }\n\n            // We don't want Tab to act as select, as this prevent moving from field to field\n            return event.key !== 'Tab';\n        });\n    }\n\n    oncreate(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        // Not calling super because it just tries to do modal stuff\n        //super.oncreate(vnode);\n\n        // Since we are not calling the original Component.oncreate, we need to copy the dom reference manually\n        this.element = vnode.dom;\n\n        this.onmousedown = (event: Event) => {\n            const dropdown = vnode.dom.querySelector('.Dropdown-menu');\n\n            if (\n                dropdown &&\n                dropdown.contains(event.target as HTMLElement)\n            ) {\n                if (!this.dropdownIsFocused) {\n                    this.dropdownIsFocused = true;\n                    m.redraw();\n                }\n            } else {\n                if (this.dropdownIsFocused) {\n                    this.dropdownIsFocused = false;\n                    m.redraw();\n                }\n            }\n        };\n\n        document.addEventListener('mousedown', this.onmousedown);\n    }\n\n    onbeforeremove() {\n        // Do nothing. Prevent parent method from running because it will try to access this.attrs.state which isn't set\n    }\n\n    onremove(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.onremove(vnode);\n\n        document.removeEventListener('mousedown', this.onmousedown);\n    }\n\n    view() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.ChooseTaxonomyTermsDropdown', m('form', {\n            // The form element is only there to prevent any unwanted page POST submission\n            // It's also used so that onready() continues to focus the field when called\n            // Due to the jQuery selector in onready, the form cannot be the root element of view()\n            onsubmit(event: Event) {\n                event.preventDefault();\n            },\n        }, [\n            m('.ChooseTaxonomyTermsInput', [\n                m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n                // .ChooseTaxonomyTermsModal-list must be kept because it's used by the javascript of the keyboard navigation\n                this.listAvailableTerms(this.filteredAvailableTerms()),\n            ]),\n            description ? m('p', description) : null,\n        ]));\n    }\n\n    formItems() {\n        const items = super.formItems();\n\n        items.remove('submit');\n\n        let status = null;\n\n        if (this.saving) {\n            status = LoadingIndicator.component();\n        } else if (this.lastSaveState === 'success') {\n            status = icon('fas fa-check');\n        } else if (this.lastSaveState === 'error') {\n            status = icon('fas fa-times');\n        }\n\n        items.add('status', m('.ChooseTaxonomyTermsStatus', status));\n\n        return items;\n    }\n\n    listAvailableTerms(terms: Term[]) {\n        // We need two attributes to hold the dropdown open\n        // One is the input focus, managed by the modal\n        // The second one is needed because there's a short moment during a click where the focus is lost on the input\n        // mousedown triggers first, then the input blur, and only in mouseup can we put focus on the input again\n        if (!(this.inputIsFocused || this.dropdownIsFocused) || terms.length === 0) {\n            return null;\n        }\n\n        let content;\n\n        if (this.availableTerms === null) {\n            content = LoadingIndicator.component();\n        } else {\n            content = terms.map(this.listAvailableTerm.bind(this));\n        }\n\n        return m('ul.Dropdown-menu.ChooseTaxonomyTermsModal-list', content);\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li', super.listAvailableTerm(term, index));\n    }\n\n    toggleTerm(term: Term) {\n        super.toggleTerm(term);\n\n        // Auto-save\n        this.lastSaveState = 'neutral';\n        this.saveResource();\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case there's nothing to select\n        // We reset the typed value to force the user to enter something else and/or correctly reflect what is saved\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Same as original select(), but without the submission logic (because we auto-save)\n        // This now allows using Enter to remove a highlighted item as well\n        $element[0].dispatchEvent(new Event('click'));\n    }\n\n    onsaved() {\n        this.lastSaveState = 'success';\n        super.onsaved();\n    }\n\n    onerror() {\n        this.lastSaveState = 'error';\n        super.onerror();\n    }\n}\n","module.exports = flarum.core.compat['common/components/Modal'];","module.exports = flarum.core.compat['forum/components/DiscussionPage'];","module.exports = ((flarum.extensions['flamarkt-core']||{})['common']||{})['models/Product'];","module.exports = flarum.core.compat['common/components/LinkButton'];","import ChooseTaxonomyTermsDropdown from './components/ChooseTaxonomyTermsDropdown';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport labelsFromMultipleTaxonomiesList from './helpers/labelsFromMultipleTaxonomiesList';\nimport taxonomyIcon from './helpers/taxonomyIcon';\nimport termLabel from './helpers/termLabel';\nimport termsLabel from './helpers/termsLabel';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\nimport sortTaxonomies from './utils/sortTaxonomies';\nimport sortTerms from './utils/sortTerms';\nimport termToIdentifier from './utils/termToIdentifier';\n\nexport const common = {\n    'components/ChooseTaxonomyTermsDropdown': ChooseTaxonomyTermsDropdown,\n    'components/ChooseTaxonomyTermsModal': ChooseTaxonomyTermsModal,\n    'helpers/labelsFromMultipleTaxonomiesList': labelsFromMultipleTaxonomiesList,\n    'helpers/taxonomyIcon': taxonomyIcon,\n    'helpers/termLabel': termLabel,\n    'helpers/termsLabel': termsLabel,\n    'models/Taxonomy': Taxonomy,\n    'models/Term': Term,\n    'utils/sortTaxonomies': sortTaxonomies,\n    'utils/sortTerms': sortTerms,\n    'utils/termToIdentifier': termToIdentifier,\n}\n","module.exports = flarum.core.compat['common/helpers/highlight'];","module.exports = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['utils/KeyboardNavigatable'];","module.exports = flarum.core.compat['common/Component'];","import app from 'flarum/common/app';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Forum from 'flarum/common/models/Forum';\nimport User from 'flarum/common/models/User';\nimport Model from 'flarum/common/Model';\nimport Product from 'flamarkt/core/common/models/Product';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\n\nexport default function () {\n    app.store.models['flamarkt-taxonomies'] = Taxonomy;\n    app.store.models['flamarkt-taxonomy-terms'] = Term;\n\n    Forum.prototype.taxonomies = Model.hasMany('taxonomies');\n    Discussion.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    User.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n\n    if (Product) {\n        Product.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    }\n}\n","module.exports = flarum.core.compat['common/models/Discussion'];","module.exports = flarum.core.compat['common/models/Forum'];","module.exports = flarum.core.compat['common/models/User'];","module.exports = flarum.core.compat['forum/components/DiscussionComposer'];","module.exports = flarum.core.compat['forum/components/UserPage'];","module.exports = ((flarum.extensions['flamarkt-core']||{})['forum']||{})['layouts/ProductIndexLayout'];","module.exports = ((flarum.extensions['flamarkt-core']||{})['forum']||{})['pages/ProductIndexPage'];","module.exports = flarum.core.compat['common/components/Dropdown'];","module.exports = flarum.core.compat['forum/utils/DiscussionControls'];","module.exports = flarum.core.compat['forum/components/IndexPage'];","module.exports = flarum.core.compat['forum/states/DiscussionListState'];","module.exports = flarum.core.compat['forum/states/GlobalSearchState'];","module.exports = flarum.core.compat['forum/components/DiscussionListItem'];","module.exports = flarum.core.compat['forum/components/DiscussionHero'];","module.exports = flarum.core.compat['forum/utils/UserControls'];","import {Vnode} from 'mithril';\nimport app from 'flarum/forum/app';\nimport Component, {ComponentAttrs} from 'flarum/common/Component';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Button from 'flarum/common/components/Button';\nimport Dropdown from 'flarum/common/components/Dropdown';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Term from '../../common/models/Term';\nimport Taxonomy from '../../common/models/Taxonomy';\n\ninterface TaxonomyDropdownAttrs extends ComponentAttrs {\n    taxonomy: Taxonomy\n    onchange: (term: Term) => void\n    activeTermSlug?: string\n}\n\nexport default class TaxonomyDropdown extends Component<TaxonomyDropdownAttrs> {\n    termsInitialized: boolean = false;\n    terms: Term[] | null = null;\n\n    oninit(vnode: Vnode<TaxonomyDropdownAttrs>) {\n        super.oninit(vnode);\n\n        // If a term is active while the component inits, we're probably loading a page with pre-loaded filters\n        // We could retrieve the term from the store if it is present on discussion results\n        // But it's unreliable since a page with no results wouldn't have it but we want to show the term in the dropdown\n        if (this.attrs.activeTermSlug) {\n            this.loadTerms();\n        }\n    }\n\n    loadTerms() {\n        if (this.termsInitialized) {\n            return;\n        }\n\n        this.termsInitialized = true;\n\n        app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiTermsEndpoint(),\n        }).then(result => {\n            this.terms = app.store.pushPayload<Term[]>(result);\n\n            this.terms.forEach(term => {\n                term.pushData({\n                    relationships: {\n                        taxonomy: this.attrs.taxonomy,\n                    },\n                });\n            });\n\n            m.redraw();\n        });\n    }\n\n    view() {\n        let activeTerm = this.terms && this.terms.find(t => t.slug() === this.attrs.activeTermSlug);\n\n        return Dropdown.component({\n            buttonClassName: 'Button',\n            label: this.attrs.taxonomy.name() + (activeTerm ? ': ' + activeTerm.name() : ''),\n            onshow: () => {\n                this.loadTerms();\n            },\n        }, this.terms === null ? [\n            LoadingIndicator.component(),\n        ] : this.terms.map(term => {\n            const active = this.attrs.activeTermSlug === term.slug();\n\n            return Button.component({\n                icon: active ? 'fas fa-check' : true,\n                onclick: () => this.attrs.onchange(term),\n                active, // Remove after https://github.com/flarum/core/issues/2265\n            }, term.name());\n        }) as any);\n    }\n}\n","import {Vnode} from 'mithril';\nimport UserPage from 'flarum/forum/components/UserPage';\nimport sortTaxonomies from '../../common/utils/sortTaxonomies';\nimport termsLabel from '../../common/helpers/termsLabel';\nimport Taxonomy from '../../common/models/Taxonomy';\nimport Term from '../../common/models/Term';\n\n// @ts-ignore UserPage.view not type-hinted\nexport default class UserTaxonomyPage extends UserPage {\n    oninit(vnode: Vnode<any, this>) {\n        super.oninit(vnode);\n\n        this.loadUser(m.route.param('username'));\n    }\n\n    content() {\n        const terms: Term[] = this.user.taxonomyTerms();\n\n        if (!terms || !terms.length) {\n            return null;\n        }\n\n        const taxonomies: Taxonomy[] = [];\n\n        terms.forEach(term => {\n            const taxonomy = term.taxonomy();\n\n            if (taxonomy && taxonomies.indexOf(taxonomy) === -1) {\n                taxonomies.push(taxonomy);\n            }\n        });\n\n        return sortTaxonomies(taxonomies).map(taxonomy => [\n            m('h2', taxonomy.name()),\n            termsLabel(terms.filter(term => term.taxonomy() === taxonomy), {userLink: true}),\n        ]);\n    }\n}\n","import Taxonomy from '../../common/models/Taxonomy';\n\nexport default function (type: string) {\n    return (t: Taxonomy) => t.type() === type && t.canSearch() && t.showFilter();\n}\n","import TaxonomyDropdown from './components/TaxonomyDropdown';\nimport UserTaxonomyPage from './components/UserTaxonomyPage';\nimport showsFilterFor from './utils/showsFilterFor';\n\nexport const forum = {\n    'components/TaxonomyDropdown': TaxonomyDropdown,\n    'components/UserTaxonomyPage': UserTaxonomyPage,\n    'utils/showsFilterFor': showsFilterFor,\n}\n","import app from 'flarum/forum/app';\nimport {common} from '../common/compat';\nimport {forum} from './compat';\nimport addComposerControls from './addComposerControls';\nimport addDiscussionControls from './addDiscussionControls';\nimport addIndexFilters from './addIndexFilters';\nimport addLabels from './addLabels';\nimport addPages from './addPages';\nimport addProductFilters from './addProductFilters';\nimport addUserControls from './addUserControls';\nimport addModels from '../common/addModels';\nimport addUserDirectorySearchType from './addUserDirectorySearchType';\n\nexport {\n    common,\n    forum,\n};\n\napp.initializers.add('flamarkt-taxonomies', () => {\n    addComposerControls();\n    addDiscussionControls();\n    addIndexFilters();\n    addLabels();\n    addPages();\n    addProductFilters();\n    addUserControls();\n    addModels();\n    addUserDirectorySearchType();\n});\n","import app from 'flarum/forum/app';\nimport {extend, override} from 'flarum/common/extend';\nimport DiscussionComposer from 'flarum/forum/components/DiscussionComposer';\nimport icon from 'flarum/common/helpers/icon';\nimport ChooseTaxonomyTermsModal from '../common/components/ChooseTaxonomyTermsModal';\nimport termsLabel from '../common/helpers/termsLabel';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport termToIdentifier from '../common/utils/termToIdentifier';\nimport Term from '../common/models/Term';\n\nexport default function () {\n    extend(DiscussionComposer.prototype, 'oninit', function () {\n        this.selectedTaxonomyTerms = {};\n    });\n\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            const taxonomyId = taxonomy.id();\n\n            if (taxonomy.type() !== 'discussions' || !taxonomyId) {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), m('a.DiscussionComposer-changeTaxonomies', {\n                    onclick: () => {\n                        app.modal.show(ChooseTaxonomyTermsModal, {\n                            taxonomy,\n                            selectedTerms: (this.selectedTaxonomyTerms[taxonomyId] || []).slice(0),\n                            onsubmit: (terms: Term[]) => {\n                                this.selectedTaxonomyTerms[taxonomy.id()!] = terms;\n                                this.$('textarea').trigger('focus');\n                            },\n                        });\n                    },\n                }, this.selectedTaxonomyTerms[taxonomyId] && this.selectedTaxonomyTerms[taxonomyId].length\n                    ? termsLabel(this.selectedTaxonomyTerms[taxonomyId], {\n                        taxonomy,\n                    })\n                    : m('span.TaxonomyLabel.untagged', [\n                        taxonomy.icon() ? [icon(taxonomy.icon()), ' '] : null,\n                        app.translator.trans('flamarkt-taxonomies.forum.composer.choose', {\n                            taxonomy: taxonomy.name(),\n                        }),\n                    ])\n            ), 9); // Tags uses 10, we add ours right to the tagson the right of the tags\n        });\n    });\n\n    override(DiscussionComposer.prototype, 'onsubmit', function (original) {\n        // Zero timeout to change the execution thread and let the modal close in TagDiscussionModal / ChooseTaxonomyTermsModal\n        // before we try opening another one\n        const callbacks: ((resolve: () => void) => void)[] = [];\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            const taxonomyId = taxonomy.id();\n\n            if (taxonomy.type() !== 'discussions' || !taxonomyId) {\n                return;\n            }\n\n            const count = (this.selectedTaxonomyTerms[taxonomyId] || []).length;\n\n            if (taxonomy.minTerms() && count < taxonomy.minTerms()) {\n                callbacks.push(resolve => {\n                    app.modal.show(ChooseTaxonomyTermsModal, {\n                        taxonomy,\n                        selectedTags: (this.selectedTaxonomyTerms[taxonomyId] || []).slice(0),\n                        onsubmit: (terms: Term[]) => {\n                            this.selectedTaxonomyTerms[taxonomyId] = terms;\n                            resolve();\n                        },\n                    });\n                });\n            }\n        });\n\n        if (callbacks.length) {\n            const callNextCallback = () => {\n                if (!callbacks.length) {\n                    original();\n\n                    return;\n                }\n\n                new Promise(callbacks.shift() as any).then(() => {\n                    // We give time for the modal to close before opening another one\n                    // Opening a different modal without closing the first one is very difficult because app.modal.show\n                    // Would have to be called in the same thread that just called app.modal.close and it's very difficult\n                    // We also apply that delay after our last modal in case Tags' modal shows up after ours\n                    setTimeout(() => {\n                        callNextCallback();\n                    }, 400); // 300ms is bootstrap's default Modal.TRANSITION_DURATION and we add a bit of delay\n                });\n            }\n\n            if (app.modal.modal) {\n                // In case Tags' modal is currently visible (their override ran before ours) we wait for it to close\n                // We have no other option because our override is called from TagDiscussionModal.props.onsubmit\n                // at which point app.modal.close has not been called yet\n                setTimeout(() => {\n                    callNextCallback();\n                }, 400);\n            } else {\n                callNextCallback();\n            }\n        } else {\n            original();\n        }\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        const taxonomyData: any[] = [];\n\n        // We put all term IDs from all taxonomies together for the request\n        (app.forum.taxonomies() || []).forEach(taxonomy => {\n            const taxonomyId = taxonomy.id();\n\n            if (taxonomy.type() !== 'discussions' || !taxonomyId) {\n                return;\n            }\n\n            if (this.selectedTaxonomyTerms[taxonomyId] && this.selectedTaxonomyTerms[taxonomyId].length) {\n                taxonomyData.push({\n                    verbatim: true, // Flarum workaround, defined in flamarkt/core\n                    type: 'flamarkt-taxonomies',\n                    id: taxonomyId,\n                    relationships: {\n                        terms: {\n                            data: this.selectedTaxonomyTerms[taxonomyId].map(termToIdentifier),\n                        },\n                    },\n                });\n            }\n        });\n\n        data.relationships = data.relationships || {};\n        data.relationships.taxonomies = taxonomyData;\n    });\n}\n","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport Button from 'flarum/common/components/Button';\nimport ChooseTaxonomyTermsModal from '../common/components/ChooseTaxonomyTermsModal';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        if (!discussion.attribute('canEditTaxonomies')) {\n            return;\n        }\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'discussions') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), Button.component({\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(ChooseTaxonomyTermsModal, {\n                    resource: discussion,\n                    taxonomy,\n                }),\n            }, app.translator.trans('flamarkt-taxonomies.forum.discussion.edit', {\n                taxonomy: taxonomy.name(),\n            })));\n        });\n    });\n}\n","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport IndexPage from 'flarum/forum/components/IndexPage';\nimport DiscussionListState from 'flarum/forum/states/DiscussionListState';\nimport GlobalSearchState from 'flarum/forum/states/GlobalSearchState';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport TaxonomyDropdown from './components/TaxonomyDropdown';\nimport Term from '../common/models/Term';\nimport showsFilterFor from './utils/showsFilterFor';\n\nexport default function () {\n    extend(IndexPage.prototype, 'viewItems', function (items) {\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('discussions')).forEach(taxonomy => {\n            items.add('taxonomy-' + taxonomy.slug(), TaxonomyDropdown.component({\n                taxonomy,\n                activeTermSlug: app.search.params()[taxonomy.slug()],\n                onchange: (term: Term) => {\n                    const params = app.search.params();\n\n                    const currentFilterForTaxonomy = params[taxonomy.slug()];\n\n                    if (term.slug() === currentFilterForTaxonomy) {\n                        delete params[taxonomy.slug()];\n                    } else {\n                        params[taxonomy.slug()] = term.slug();\n                    }\n\n                    // @ts-ignore Flarum injects routeName as a page attr but this isn't type-hinted anywhere\n                    const {routeName} = this.attrs;\n\n                    m.route.set(app.route(routeName, params));\n                },\n            }));\n        });\n    });\n\n    extend(GlobalSearchState.prototype, 'stickyParams', function (params) {\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('discussions')).forEach(taxonomy => {\n            params[taxonomy.slug()] = m.route.param(taxonomy.slug());\n        });\n    });\n\n    extend(DiscussionListState.prototype, 'requestParams', function (params: any) {\n        // Include the taxonomies when navigating to the discussion list\n        // Same includes are pre-loaded in DiscussionAttributes.php\n        params.include.push('taxonomyTerms', 'taxonomyTerms.taxonomy');\n\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('discussions')).forEach(taxonomy => {\n            const filterTermSlug = this.params[taxonomy.slug()];\n\n            if (filterTermSlug) {\n                if (params.filter.q) {\n                    params.filter.q = (params.filter.q || '') + ' taxonomy:' + taxonomy.slug() + ':' + filterTermSlug;\n                } else {\n                    params.filter.taxonomy = (params.filter.taxonomy || {});\n                    params.filter.taxonomy[taxonomy.slug()] = filterTermSlug;\n                }\n            }\n        });\n    });\n}\n","import {extend} from 'flarum/common/extend';\nimport DiscussionListItem from 'flarum/forum/components/DiscussionListItem';\nimport DiscussionHero from 'flarum/forum/components/DiscussionHero';\nimport labelsFromMultipleTaxonomiesList from '../common/helpers/labelsFromMultipleTaxonomiesList';\n\nexport default function () {\n    extend(DiscussionListItem.prototype, 'infoItems', function (items) {\n        const terms = this.attrs.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', labelsFromMultipleTaxonomiesList(terms), 10);\n        }\n    });\n\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        const terms = this.attrs.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', labelsFromMultipleTaxonomiesList(terms, {discussionLink: true}), 5);\n        }\n    });\n}\n","import app from 'flarum/forum/app';\nimport UserTaxonomyPage from './components/UserTaxonomyPage';\n\nexport default function () {\n    app.routes.flamarktTaxonomiesUser = {\n        path: '/u/:username/taxonomies',\n        component: UserTaxonomyPage,\n    };\n\n    app.route.flamarktTaxonomiesUser = user => {\n        return app.route('flamarktTaxonomiesUser', {\n            username: user.username(),\n        });\n    };\n}\n","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport ProductIndexLayout from 'flamarkt/core/forum/layouts/ProductIndexLayout';\nimport ProductIndexPage from 'flamarkt/core/forum/pages/ProductIndexPage';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport TaxonomyDropdown from './components/TaxonomyDropdown';\nimport Term from '../common/models/Term';\nimport showsFilterFor from './utils/showsFilterFor';\n\nexport default function () {\n    if (!ProductIndexLayout || !ProductIndexPage) {\n        return;\n    }\n\n    extend(ProductIndexLayout.prototype, 'filters', function (items) {\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('products')).forEach(taxonomy => {\n            items.add('taxonomy-' + taxonomy.slug(), TaxonomyDropdown.component({\n                taxonomy,\n                activeTermSlug: m.route.param()[taxonomy.slug()],\n                onchange: (term: Term) => {\n                    const params = {...m.route.param()};\n\n                    delete params.key;\n\n                    const currentFilterForTaxonomy = params[taxonomy.slug()];\n\n                    if (term.slug() === currentFilterForTaxonomy) {\n                        delete params[taxonomy.slug()];\n                    } else {\n                        params[taxonomy.slug()] = term.slug();\n                    }\n\n                    // @ts-ignore\n                    const {routeName} = app.current.data;\n\n                    //TODO: also apply to the filters. Right now it's just the URL that changes\n                    m.route.set(app.route(routeName, params));\n                },\n            }));\n        });\n    });\n\n    extend(ProductIndexPage.prototype, 'initState', function (state) {\n        const params = m.route.param();\n\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('products')).forEach(taxonomy => {\n            const filterTermSlug = params[taxonomy.slug()];\n\n            if (filterTermSlug) {\n                // Same implementation as addIndexFilters()\n                state.params.q = (state.params.q || '') + ' taxonomy:' + taxonomy.slug() + ':' + filterTermSlug;\n            }\n        });\n    });\n}\n","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport UserControls from 'flarum/forum/utils/UserControls';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport User from 'flarum/common/models/User';\nimport Button from 'flarum/common/components/Button';\nimport UserPage from 'flarum/forum/components/UserPage';\nimport LinkButton from 'flarum/common/components/LinkButton';\nimport ChooseTaxonomyTermsModal from '../common/components/ChooseTaxonomyTermsModal';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\n\nexport default function () {\n    extend(UserControls, 'userControls', function (items: ItemList<any>, user: User) {\n        if (!user.attribute('canEditTaxonomies')) {\n            return;\n        }\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'users') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), Button.component({\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(ChooseTaxonomyTermsModal, {\n                    resource: user,\n                    taxonomy,\n                }),\n            }, app.translator.trans('flamarkt-taxonomies.forum.user.edit', {\n                taxonomy: taxonomy.name(),\n            })));\n        });\n    });\n\n    extend(UserPage.prototype, 'navItems', function (items) {\n        const userTaxonomiesExist = sortTaxonomies(app.forum.taxonomies()).some(taxonomy => {\n            return taxonomy.type() === 'users';\n        });\n\n        if (!userTaxonomiesExist) {\n            return;\n        }\n\n        items.add(\n            'taxonomies',\n            LinkButton.component({\n                href: app.route.flamarktTaxonomiesUser(this.user),\n                icon: 'fas fa-tags',\n            }, app.translator.trans('flamarkt-taxonomies.forum.user.nav')),\n            120\n        );\n    });\n}\n","import app from 'flarum/forum/app';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport {extend} from 'flarum/common/extend';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Taxonomy from '../common/models/Taxonomy';\nimport Term from '../common/models/Term';\nimport showsFilterFor from './utils/showsFilterFor';\n\nexport default function () {\n    // Verify User Directory is enabled and exports all the classes we need\n    if (\n        !flarum.extensions['fof-user-directory'] ||\n        !flarum.extensions['fof-user-directory'].searchTypes ||\n        !flarum.extensions['fof-user-directory'].searchTypes.AbstractType ||\n        !flarum.extensions['fof-user-directory'].components ||\n        !flarum.extensions['fof-user-directory'].components.SearchField\n    ) {\n        return;\n    }\n\n    // Class must be defined here because it needs to extend the base class\n    // Which might not be available yet when imports are resolved\n    class TaxonomyTermType extends flarum.extensions['fof-user-directory'].searchTypes.AbstractType {\n        allTerms: Term[] | null = null\n        loadingAllTermsPromise: Promise<any> | null = null\n        loading: boolean = false\n        suggestions: Term[] = []\n\n        resourceType() {\n            return 'flamarkt-taxonomy-terms';\n        }\n\n        search(query: string) {\n            this.loading = true;\n\n            this.loadTerms().then(() => {\n                this.loading = false;\n                this.suggestions = [];\n\n                if (!query) {\n                    m.redraw();\n\n                    return;\n                }\n\n                query = query.toLowerCase();\n\n                this.allTerms!.forEach(term => {\n                    if (term.name().toLowerCase().indexOf(query) !== -1) {\n                        this.suggestions.push(term);\n                    }\n                });\n\n                m.redraw();\n            });\n        }\n\n        loadTerms() {\n            if (this.loadingAllTermsPromise) {\n                return this.loadingAllTermsPromise;\n            }\n\n            if (this.allTerms !== null) {\n                return Promise.resolve(null);\n            }\n\n            this.allTerms = [];\n\n            const promises: Promise<void>[] = [];\n\n            app.store.all<Taxonomy>('flamarkt-taxonomies').filter(showsFilterFor('users')).forEach(taxonomy => {\n                promises.push(app.request<ApiPayloadPlural>({\n                    method: 'GET',\n                    url: app.forum.attribute('apiUrl') + taxonomy.apiEndpoint() + '/terms',\n                }).then(result => {\n                    const terms = app.store.pushPayload<Term[]>(result);\n\n                    terms.forEach(term => {\n                        term.pushData({\n                            relationships: {\n                                taxonomy,\n                            },\n                        });\n                    });\n\n                    this.allTerms!.push(...terms);\n                }));\n            });\n\n            this.loadingAllTermsPromise = Promise.all(promises);\n\n            return this.loadingAllTermsPromise!.then(() => {\n                this.loadingAllTermsPromise = null;\n            });\n        }\n\n        renderKind(term: Term) {\n            const taxonomy = term.taxonomy();\n\n            return taxonomy && taxonomy.name();\n        }\n\n        renderLabel(term: Term) {\n            return m('.UserDirectorySearchLabel', term.color() ? {\n                className: 'colored',\n                style: {\n                    backgroundColor: term.color(),\n                },\n            } : {}, [\n                term.icon() ? [\n                    icon(term.icon()),\n                    ' ',\n                ] : null,\n                term.name(),\n            ]);\n        }\n\n        applyFilter(params: any, resource: any) {\n            params.q = params.q ? params.q + ' ' : '';\n            params.q += 'taxonomy:' + resource.taxonomy().slug() + ':' + resource.slug();\n        }\n\n        initializeFromParams(params: any) {\n            if (!params.q) {\n                return Promise.resolve([]);\n            }\n\n            const gambits: string[] = (params.q as string).split(' ').filter(word => word.indexOf('taxonomy:') === 0);\n\n            if (!gambits.length) {\n                return Promise.resolve([]);\n            }\n\n            return this.loadTerms().then(() => {\n                const terms: Term[] = [];\n\n                gambits.forEach(gambit => {\n                    const parts = gambit.split(':');\n\n                    if (parts.length < 3) {\n                        return;\n                    }\n\n                    const term = this.allTerms!.find(t => t.slug() === parts[2] && t.taxonomy().slug() === parts[1]);\n\n                    if (term) {\n                        terms.push(term);\n                    }\n                });\n\n                return terms;\n            });\n        }\n    }\n\n    extend(flarum.extensions['fof-user-directory'].components.SearchField.prototype, 'filterTypes', function (items: ItemList<any>) {\n        items.add('flamarkt-taxonomies', new TaxonomyTermType(), 15);\n    });\n}\n"],"sourceRoot":""}