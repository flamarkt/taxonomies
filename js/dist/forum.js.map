{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@flamarkt/taxonomies/webpack/bootstrap","webpack://@flamarkt/taxonomies/webpack/runtime/compat get default export","webpack://@flamarkt/taxonomies/webpack/runtime/define property getters","webpack://@flamarkt/taxonomies/webpack/runtime/hasOwnProperty shorthand","webpack://@flamarkt/taxonomies/webpack/runtime/make namespace object","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/app']\"","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/app']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Button']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Switch']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/helpers/highlight']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/classList']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/extractText']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['utils/KeyboardNavigatable']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Link']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/extract']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/Model']\"","webpack://@flamarkt/taxonomies/./src/common/models/Term.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/taxonomyIcon.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/termLabel.ts","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@flamarkt/taxonomies/./src/common/utils/termToIdentifier.ts","webpack://@flamarkt/taxonomies/./src/common/utils/retrieveTerms.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsModal.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsDropdown.ts","webpack://@flamarkt/taxonomies/./src/common/utils/sortTaxonomies.ts","webpack://@flamarkt/taxonomies/./src/common/utils/sortTerms.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/termsLabel.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/labelsFromMultipleTaxonomiesList.ts","webpack://@flamarkt/taxonomies/./src/common/models/Taxonomy.ts","webpack://@flamarkt/taxonomies/./src/common/compat.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/Component']\"","webpack://@flamarkt/taxonomies/./src/forum/components/ProductTaxonomySection.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Dropdown']\"","webpack://@flamarkt/taxonomies/./src/forum/components/TaxonomyDropdown.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/UserPage']\"","webpack://@flamarkt/taxonomies/./src/forum/components/UserTaxonomyPage.ts","webpack://@flamarkt/taxonomies/./src/forum/utils/showsFilterFor.ts","webpack://@flamarkt/taxonomies/./src/forum/compat.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/extend']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/DiscussionComposer']\"","webpack://@flamarkt/taxonomies/./src/forum/addComposerControls.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@flamarkt/taxonomies/./src/forum/addDiscussionControls.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/IndexPage']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/states/DiscussionListState']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/states/GlobalSearchState']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/DiscussionListItem']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/DiscussionHero']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-core']||{})['forum']||{})['layouts/ProductShowLayout']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-core']||{})['forum']||{})['layouts/ProductIndexLayout']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-core']||{})['forum']||{})['pages/ProductIndexPage']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/utils/UserControls']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/LinkButton']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/Forum']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/User']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-core']||{})['common']||{})['models/Product']\"","webpack://@flamarkt/taxonomies/./src/forum/index.ts","webpack://@flamarkt/taxonomies/./src/forum/addFoFDraftsSupport.ts","webpack://@flamarkt/taxonomies/./src/forum/addBlogContent.ts","webpack://@flamarkt/taxonomies/./src/forum/addIndexFilters.ts","webpack://@flamarkt/taxonomies/./src/forum/addLabels.ts","webpack://@flamarkt/taxonomies/./src/forum/addPages.ts","webpack://@flamarkt/taxonomies/./src/forum/addProductDescription.ts","webpack://@flamarkt/taxonomies/./src/forum/addProductFilters.ts","webpack://@flamarkt/taxonomies/./src/forum/addUserControls.ts","webpack://@flamarkt/taxonomies/./src/common/addModels.ts","webpack://@flamarkt/taxonomies/./src/forum/addUserDirectorySearchType.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Modal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Switch'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/highlight'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/classList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extractText'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['utils/KeyboardNavigatable'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extract'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","import Model from 'flarum/common/Model';\nimport Taxonomy from './Taxonomy';\n\nexport default class Term extends Model {\n    name = Model.attribute<string>('name');\n    slug = Model.attribute<string>('slug');\n    description = Model.attribute<string>('description');\n    color = Model.attribute<string>('color');\n    icon = Model.attribute<string>('icon');\n    order = Model.attribute<number>('order');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n\n    taxonomy = Model.hasOne<Taxonomy>('taxonomy');\n\n    protected apiEndpoint(): string {\n        // @ts-ignore data.id not type-hinted\n        return '/flamarkt/taxonomy-terms' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","import {Attributes} from 'mithril';\nimport classList from 'flarum/common/utils/classList';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\ninterface Settings {\n    useColor?: boolean\n}\n\nexport default function taxonomyIcon(term: Taxonomy | Term, attrs: Attributes = {}, settings: Settings = {}) {\n    const hasIcon = term && term.icon();\n    const {useColor = true} = settings;\n\n    attrs.className = classList([\n        attrs.className,\n        'icon',\n        hasIcon ? term.icon() : 'TaxonomyIcon',\n    ]);\n\n    if (term) {\n        attrs.style = attrs.style || {};\n\n        if (hasIcon) {\n            attrs.style.color = useColor ? term.color() : '';\n        } else {\n            attrs.style.backgroundColor = term.color();\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return hasIcon ? m('i', attrs) : m('span', attrs);\n}\n","import {Attributes} from 'mithril';\nimport app from 'flarum/common/app';\nimport Link from 'flarum/common/components/Link';\nimport extract from 'flarum/common/utils/extract';\nimport Term from '../models/Term';\nimport taxonomyIcon from './taxonomyIcon';\nimport Taxonomy from '../models/Taxonomy';\n\nexport default function termLabel(term: Taxonomy | Term | null = null, attrs: Attributes = {}) {\n    attrs.style = attrs.style || {};\n    attrs.className = 'TaxonomyLabel ' + (attrs.className || '');\n\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n    const productLink = extract(attrs, 'productLink');\n    const tagText = term ? term.name() : app.translator.trans('flarum-tags.lib.deleted_tag_text');\n    let tag: any = 'span';\n\n    if (term) {\n        const color = term.color();\n        if (color) {\n            attrs.style.backgroundColor = attrs.style.color = color;\n            attrs.className += ' colored';\n        }\n        attrs.title = term.description() || undefined;\n\n        const taxonomy = (term instanceof Term) && term.taxonomy();\n\n        // We need to check for instanceof because this method is also used with a taxonomy passed as a value\n        if (taxonomy && taxonomy.canSearch()) {\n            let href: string | null = null;\n\n            if (discussionLink) {\n                href = app.route('index', {[taxonomy.slug()]: term.slug()});\n            }\n\n            // Only generate user taxonomy links if fof/user-directory is enabled\n            if (userLink && app.routes.fof_user_directory) {\n                href = app.route('fof_user_directory', {q: 'taxonomy:' + taxonomy.slug() + ':' + term.slug()});\n            }\n\n            if (productLink) {\n                href = app.route('flamarkt.products.index', {[taxonomy.slug()]: term.slug()});\n            }\n\n            if (href) {\n                attrs.href = href;\n                tag = Link;\n            }\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return m(tag, attrs, m('span.TaxonomyLabel-text', [\n        term && term.icon() && taxonomyIcon(term, {}, {useColor: false}),\n        ' ' + tagText,\n    ]));\n}\n","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","import Model from 'flarum/common/Model';\nimport Term from '../models/Term';\n\n/**\n * Prepares a model for a relationship payload\n * We need to keep the name value for custom terms\n */\nexport default function (term: Term) {\n    if (term.id()) {\n        return Model.getIdentifier(term);\n    }\n\n    return {\n        ...Model.getIdentifier(term),\n        attributes: {\n            name: term.name(),\n        },\n    }\n}\n","import app from 'flarum/common/app';\nimport {ApiPayloadPlural, ApiResponsePlural} from 'flarum/common/Store';\nimport Taxonomy from '../models/Taxonomy';\nimport Term from '../models/Term';\n\nexport default function (taxonomy: Taxonomy): Promise<ApiResponsePlural<Term>> {\n    return app.request<ApiPayloadPlural>({\n        method: 'GET',\n        url: app.forum.attribute('apiUrl') + taxonomy.apiTermsEndpoint(),\n    }).then(result => {\n        const terms = app.store.pushPayload<Term[]>(result);\n\n        // For consistency, we will always set the \"inverse\" relationship while retrieving\n        // Since most of the code relies on this relationship being loaded\n        terms.forEach(term => {\n            term.pushData({\n                relationships: {\n                    taxonomy,\n                },\n            });\n        })\n\n        return terms;\n    });\n}\n","import {Children, Vnode} from 'mithril';\nimport app from 'flarum/common/app';\nimport Modal, {IInternalModalAttrs} from 'flarum/common/components/Modal';\nimport Model from 'flarum/common/Model';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Switch from 'flarum/common/components/Switch';\nimport highlight from 'flarum/common/helpers/highlight';\nimport classList from 'flarum/common/utils/classList';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport extractText from 'flarum/common/utils/extractText';\n\nimport KeyboardNavigatable from 'flamarkt/backoffice/common/utils/KeyboardNavigatable';\n\nimport termLabel from '../helpers/termLabel';\nimport taxonomyIcon from '../helpers/taxonomyIcon';\nimport termToIdentifier from '../utils/termToIdentifier';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\nimport retrieveTerms from '../utils/retrieveTerms';\n\n/**\n * Comparing objects directly is unreliable because we will be creating some new records as well\n * So we use this method to do a proper deep check\n */\nfunction isSameTerm(a: Term, b: Term) {\n    if (a.data.type !== b.data.type) {\n        return false;\n    }\n\n    // If both have an ID and it's different\n    if (a.id() && b.id()) {\n        return a.id() === b.id();\n    }\n\n    // If only one has an ID, it's different\n    if (!a.id() !== !b.id()) {\n        return false;\n    }\n\n    // If both don't have an ID, it's a new value and we compare the name\n    return a.name() === b.name();\n}\n\nexport interface ChooseTaxonomyTermsModalAttrs extends IInternalModalAttrs {\n    resource: Model\n    taxonomy: Taxonomy\n    selectedTerms: Term[]\n    onsubmit?: (terms: Term[]) => void\n}\n\n/**\n * Based on Flarum's TagDiscussionModal\n */\nexport default class ChooseTaxonomyTermsModal extends Modal<ChooseTaxonomyTermsModalAttrs> {\n    availableTerms: Term[] | null = null;\n    selectedTerms: Term[] = [];\n    searchFilter: string = '';\n    activeListIndex: number = 0;\n    inputIsFocused: boolean = false;\n    saving: boolean = false;\n    bypassReqs: boolean = false;\n    navigator!: KeyboardNavigatable;\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        if (this.attrs.selectedTerms) {\n            this.attrs.selectedTerms.forEach(this.addTerm.bind(this));\n        } else if (this.attrs.resource) {\n            this.attrs.resource.taxonomyTerms().forEach((term: Term) => {\n                if (term.taxonomy().id() === this.attrs.taxonomy.id()) {\n                    this.addTerm(term);\n                }\n            });\n        }\n\n        retrieveTerms(this.attrs.taxonomy).then(terms => {\n            this.availableTerms = terms;\n\n            m.redraw();\n        });\n\n        this.navigator = new KeyboardNavigatable();\n        this.navigator\n            .onUp(() => this.setIndex(this.activeListIndex - 1, true))\n            .onDown(() => this.setIndex(this.activeListIndex + 1, true))\n            .onSelect(this.select.bind(this))\n            .onRemove(() => {\n                if (!this.selectedTerms.length) {\n                    return;\n                }\n\n                this.toggleTerm(this.selectedTerms[this.selectedTerms.length - 1]);\n            })\n            .when(event => {\n                // We want to allow selecting with space because it's a common way to select\n                // However this interferes with the ability to enter spaces\n                // So we will have space act as select, but only if nothing is typed yet\n                if (event.key === ' ' && this.searchFilter === '') {\n                    event.preventDefault();\n                    this.select(event);\n\n                    return false;\n                }\n\n                return true;\n            });\n    }\n\n    indexInSelectedTerms(term: Term) {\n        return this.selectedTerms.findIndex(t => isSameTerm(t, term));\n    }\n\n    addTerm(term: Term) {\n        this.selectedTerms.push(term);\n    }\n\n    removeTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.selectedTerms.splice(index, 1);\n        }\n    }\n\n    className() {\n        return 'ChooseTaxonomyTermsModal';\n    }\n\n    title() {\n        return this.attrs.resource\n            ? app.translator.trans('flamarkt-taxonomies.lib.modal.title.edit', {\n                taxonomy: this.attrs.taxonomy.name(),\n                title: m('em', this.attrs.resource.title ? this.attrs.resource.title() : this.attrs.resource.displayName()),\n            })\n            : app.translator.trans('flamarkt-taxonomies.lib.modal.title.new', {\n                taxonomy: this.attrs.taxonomy.name(),\n            });\n    }\n\n    getInstruction() {\n        if (this.bypassReqs) {\n            return '';\n        }\n\n        const count = this.selectedTerms.length;\n\n        if (this.attrs.taxonomy.minTerms() && count < this.attrs.taxonomy.minTerms()) {\n            const remaining = this.attrs.taxonomy.minTerms() - count;\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholder', {\n                count: remaining,\n            });\n        } else if (count === 0) {\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholderOptional');\n        }\n\n        return '';\n    }\n\n    filteredAvailableTerms() {\n        let availableTerms = this.availableTerms === null ? [] : this.availableTerms;\n        const filter = this.searchFilter.toLowerCase();\n\n        if (filter) {\n            availableTerms = availableTerms.filter(term => term.name().substr(0, filter.length).toLowerCase() === filter);\n\n            if (\n                this.attrs.taxonomy.allowCustomValues() &&\n                !availableTerms.some(term => term.name().toLowerCase() === filter)\n            ) {\n                const validation = this.attrs.taxonomy.customValueValidation();\n                let regex: RegExp | null = null;\n\n                if (validation === 'alpha_num') {\n                    regex = /^[a-z0-9]$/i;\n                } else if (validation === 'alpha_dash') {\n                    regex = /^[a-z0-9_-]$/i;\n                } else if (validation.indexOf('/') === 0) {\n                    const parts = validation.split('/');\n                    if (parts.length === 3) {\n                        regex = new RegExp(parts[1], parts[2]);\n                    }\n                }\n\n                if (!regex || regex.test(this.searchFilter)) {\n                    availableTerms.push(app.store.createRecord('flamarkt-taxonomy-terms', {\n                        attributes: {\n                            name: this.searchFilter,\n                        },\n                    }));\n                }\n            }\n        }\n\n        if (!this.bypassReqs && this.attrs.taxonomy.maxTerms() && this.selectedTerms.length >= this.attrs.taxonomy.maxTerms()) {\n            availableTerms = [];\n        }\n\n        return availableTerms;\n    }\n\n    content() {\n        return this.contentItems().toArray();\n    }\n\n    contentItems() {\n        const items = new ItemList();\n\n        items.add('form', this.viewForm(), 20);\n\n        items.add('terms', this.listAvailableTerms(this.filteredAvailableTerms()), 10);\n\n        if (this.attrs.taxonomy.canBypassTermCounts() && (this.attrs.taxonomy.minTerms() || this.attrs.taxonomy.maxTerms())) {\n            items.add('bypass', m('.Modal-body.ChooseTaxonomyTermsModal-form-bypass', Switch.component({\n                state: this.bypassReqs,\n                onchange: (checked: boolean) => {\n                    this.bypassReqs = checked;\n                },\n            }, app.translator.trans('flamarkt-taxonomies.lib.modal.bypassTermCounts'))), -10);\n        }\n\n        return items;\n    }\n\n    viewForm() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.Modal-body', [\n            description ? m('p', description) : null,\n            m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n        ]);\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('input', m('.ChooseTaxonomyTermsModal-form-input', m('.TermsInput.FormControl', {\n            className: this.inputIsFocused ? 'focus' : '',\n        }, this.inputItems().toArray())), 20);\n\n        items.add('submit', m('.ChooseTaxonomyTermsModal-form-submit.App-primaryControl', Button.component({\n            type: 'submit',\n            className: 'Button Button--primary',\n            disabled: !this.bypassReqs && this.attrs.taxonomy.minTerms() && this.selectedTerms.length < this.attrs.taxonomy.minTerms(),\n            icon: 'fas fa-check',\n            loading: this.saving,\n        }, app.translator.trans('flamarkt-taxonomies.lib.modal.submit'))), 10);\n\n        return items;\n    }\n\n    inputItems() {\n        const items = new ItemList();\n\n        items.add('selected', this.selectedTerms.map(term => {\n            return m('span.TermsInput-term', {\n                onclick: () => {\n                    this.toggleTerm(term);\n                    this.onready();\n                },\n            }, termLabel(term));\n        }), 20);\n\n        items.add('control', m('input.FormControl', {\n            placeholder: extractText(this.getInstruction()),\n            value: this.searchFilter,\n            oninput: (event: Event) => {\n                this.searchFilter = (event.target as HTMLInputElement).value;\n                this.activeListIndex = 0;\n            },\n            onkeydown: this.navigator.navigate.bind(this.navigator),\n            // Use local methods so that other extensions can extend behaviour\n            onfocus: this.oninputfocus.bind(this),\n            onblur: this.oninputblur.bind(this),\n        }), 10);\n\n        return items;\n    }\n\n    oninputfocus() {\n        this.inputIsFocused = true;\n    }\n\n    oninputblur() {\n        this.inputIsFocused = false;\n    }\n\n    listAvailableTerms(terms: Term[]): Children {\n        return m('.Modal-footer', this.availableTerms === null ?\n            LoadingIndicator.component() :\n            m('ul.ChooseTaxonomyTermsModal-list.SelectTermList', {\n                className: terms.some(term => term.description()) ? 'SelectTermList--with-descriptions' : '',\n            }, terms.map(this.listAvailableTerm.bind(this)))\n        );\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li.SelectTermListItem', {\n            'data-index': index,\n            className: classList({\n                colored: !!term.color(),\n                selected: this.indexInSelectedTerms(term) !== -1,\n                active: this.activeListIndex === index,\n            }),\n            style: {color: term.color()},\n            onmouseover: () => this.activeListIndex = index,\n            onclick: this.toggleTerm.bind(this, term),\n        }, [\n            taxonomyIcon(term),\n            m('span.SelectTermListItem-name', term.exists ? highlight(term.name(), this.searchFilter) : app.translator.trans('flamarkt-taxonomies.lib.modal.custom', {\n                value: m('em', term.name()),\n            })),\n            term.description() ? m('span.SelectTermListItem-description', term.description()) : '',\n        ]);\n    }\n\n    toggleTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.removeTerm(term);\n        } else {\n            this.addTerm(term);\n        }\n\n        if (this.searchFilter) {\n            this.searchFilter = '';\n            this.activeListIndex = 0;\n        }\n\n        // Defer re-focusing to next browser draw\n        setTimeout(() => {\n            this.onready();\n        });\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case we don't want to submit just yet, but we will delete the text\n        // so that typing enter multiple times does end up submitting\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Ctrl + Enter submits the selection, just Enter completes the current entry\n        if (e.metaKey || e.ctrlKey || $element.is('.selected')) {\n            if (this.selectedTerms.length) {\n                // Calling .trigger() on the form with jQuery doesn't seem to trigger the onsubmit, so we'll just do that directly instead\n                this.onsubmit();\n            }\n        } else {\n            $element[0].dispatchEvent(new Event('click'));\n        }\n    }\n\n    getDomElement(index: number) {\n        return this.$(`.SelectTermListItem[data-index=\"${index}\"]`);\n    }\n\n    setIndex(index: number, scrollToItem: boolean) {\n        const $dropdown = this.$('.ChooseTaxonomyTermsModal-list');\n\n        const indexLength = this.$('.SelectTermListItem').length;\n\n        if (index < 0) {\n            index = indexLength - 1;\n        } else if (index >= indexLength) {\n            index = 0;\n        }\n\n        const $item = this.getDomElement(index);\n        this.activeListIndex = index;\n\n        m.redraw();\n\n        if (scrollToItem) {\n            const dropdownScroll = $dropdown.scrollTop() || 0;\n            const dropdownTop = $dropdown.offset()?.top || 0;\n            const dropdownBottom = dropdownTop + ($dropdown.outerHeight() || 0);\n            const itemTop = $item.offset()?.top || 0;\n            const itemBottom = itemTop + ($item.outerHeight() || 0);\n\n            let scrollTop;\n            if (itemTop < dropdownTop) {\n                scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n            } else if (itemBottom > dropdownBottom) {\n                scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n            }\n\n            if (typeof scrollTop !== 'undefined') {\n                $dropdown.stop(true).animate({scrollTop}, 100);\n            }\n        }\n    }\n\n    onsubmit(event?: Event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.attrs.resource) {\n            this.saveResource();\n\n            // Do not run the normal code - it might close the modal even if an error occurred\n            return;\n        }\n\n        if (this.attrs.onsubmit) this.attrs.onsubmit(this.selectedTerms);\n\n        app.modal.close();\n    }\n\n    saveResource() {\n        this.saving = true;\n\n        this.attrs.resource.save({\n            relationships: {\n                taxonomies: [\n                    {\n                        verbatim: true, // Flarum workaround, defined in flamarkt/core\n                        type: 'flamarkt-taxonomies',\n                        id: this.attrs.taxonomy.id(),\n                        relationships: {\n                            terms: {\n                                data: this.selectedTerms.map(termToIdentifier),\n                            },\n                        },\n                    },\n                ],\n            },\n        }).then(this.onsaved.bind(this), this.onerror.bind(this));\n    }\n\n    onsaved() {\n        // Need to check if DiscussionPage exists because in backoffice frontend the import will be undefined\n        if (DiscussionPage && app.current.matches(DiscussionPage)) {\n            app.current.get('stream').update();\n        }\n        this.saving = false;\n        m.redraw();\n\n        app.modal.close();\n    }\n\n    onerror() {\n        this.saving = false;\n        m.redraw();\n    }\n}\n","import {Vnode, VnodeDOM} from 'mithril';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport icon from 'flarum/common/helpers/icon';\nimport ChooseTaxonomyTermsModal, {ChooseTaxonomyTermsModalAttrs} from './ChooseTaxonomyTermsModal';\nimport Term from '../models/Term';\n\nexport default class ChooseTaxonomyTermsDropdown extends ChooseTaxonomyTermsModal {\n    lastSaveState: 'success' | 'error' | 'neutral' = 'neutral'\n    dropdownIsFocused: boolean = false\n    onmousedown!: (event: Event) => void\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        this.navigator.when(event => {\n            // Same as the original when() in the modal\n            // (we are replacing the original since we can have a single callback)\n            if (event.key === ' ' && this.searchFilter === '') {\n                event.preventDefault();\n                this.select(event);\n\n                return false;\n            }\n\n            // We don't want Tab to act as select, as this prevent moving from field to field\n            return event.key !== 'Tab';\n        });\n    }\n\n    oncreate(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        // Not calling super because it just tries to do modal stuff\n        //super.oncreate(vnode);\n\n        // Since we are not calling the original Component.oncreate, we need to copy the dom reference manually\n        this.element = vnode.dom;\n\n        this.onmousedown = (event: Event) => {\n            const dropdown = vnode.dom.querySelector('.Dropdown-menu');\n\n            if (\n                dropdown &&\n                dropdown.contains(event.target as HTMLElement)\n            ) {\n                if (!this.dropdownIsFocused) {\n                    this.dropdownIsFocused = true;\n                    m.redraw();\n                }\n            } else {\n                if (this.dropdownIsFocused) {\n                    this.dropdownIsFocused = false;\n                    m.redraw();\n                }\n            }\n        };\n\n        document.addEventListener('mousedown', this.onmousedown);\n    }\n\n    onbeforeremove() {\n        // Do nothing. Prevent parent method from running because it will try to access this.attrs.state which isn't set\n    }\n\n    onremove(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.onremove(vnode);\n\n        document.removeEventListener('mousedown', this.onmousedown);\n    }\n\n    view() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.ChooseTaxonomyTermsDropdown', m('form', {\n            // The form element is only there to prevent any unwanted page POST submission\n            // It's also used so that onready() continues to focus the field when called\n            // Due to the jQuery selector in onready, the form cannot be the root element of view()\n            onsubmit(event: Event) {\n                event.preventDefault();\n            },\n        }, [\n            m('.ChooseTaxonomyTermsInput', [\n                m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n                // .ChooseTaxonomyTermsModal-list must be kept because it's used by the javascript of the keyboard navigation\n                this.listAvailableTerms(this.filteredAvailableTerms()),\n            ]),\n            description ? m('p', description) : null,\n        ]));\n    }\n\n    formItems() {\n        const items = super.formItems();\n\n        items.remove('submit');\n\n        let status = null;\n\n        if (this.saving) {\n            status = LoadingIndicator.component();\n        } else if (this.lastSaveState === 'success') {\n            status = icon('fas fa-check');\n        } else if (this.lastSaveState === 'error') {\n            status = icon('fas fa-times');\n        }\n\n        items.add('status', m('.ChooseTaxonomyTermsStatus', status));\n\n        return items;\n    }\n\n    listAvailableTerms(terms: Term[]) {\n        // We need two attributes to hold the dropdown open\n        // One is the input focus, managed by the modal\n        // The second one is needed because there's a short moment during a click where the focus is lost on the input\n        // mousedown triggers first, then the input blur, and only in mouseup can we put focus on the input again\n        if (!(this.inputIsFocused || this.dropdownIsFocused) || terms.length === 0) {\n            return null;\n        }\n\n        let content;\n\n        if (this.availableTerms === null) {\n            content = LoadingIndicator.component();\n        } else {\n            content = terms.map(this.listAvailableTerm.bind(this));\n        }\n\n        return m('ul.Dropdown-menu.ChooseTaxonomyTermsModal-list', content);\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li', super.listAvailableTerm(term, index));\n    }\n\n    toggleTerm(term: Term) {\n        super.toggleTerm(term);\n\n        // Auto-save\n        this.lastSaveState = 'neutral';\n        this.saveResource();\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case there's nothing to select\n        // We reset the typed value to force the user to enter something else and/or correctly reflect what is saved\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Same as original select(), but without the submission logic (because we auto-save)\n        // This now allows using Enter to remove a highlighted item as well\n        $element[0].dispatchEvent(new Event('click'));\n    }\n\n    onsaved() {\n        this.lastSaveState = 'success';\n        super.onsaved();\n    }\n\n    onerror() {\n        this.lastSaveState = 'error';\n        super.onerror();\n    }\n}\n","import Taxonomy from '../models/Taxonomy';\n\nexport default function (taxonomies: Taxonomy[] | false): Taxonomy[] {\n    // Special case for when retrieving an empty relationship from the store\n    if (taxonomies === false) {\n        taxonomies = [];\n    }\n\n    return taxonomies.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","import Term from '../models/Term';\n\nexport default function (terms: Term[]): Term[] {\n    return terms.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","import {Attributes, Vnode} from 'mithril';\nimport extract from 'flarum/common/utils/extract';\nimport termLabel from './termLabel';\nimport sortTerms from '../utils/sortTerms';\nimport Term from '../models/Term';\n\nexport default function termsLabel(terms: Term[], attrs: Attributes = {}) {\n    const children: Vnode[] = [];\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n    const productLink = extract(attrs, 'productLink');\n\n    attrs.className = 'TaxonomiesLabel ' + (attrs.className || '');\n\n    if (terms) {\n        let taxonomy = extract(attrs, 'taxonomy');\n\n        if (!taxonomy) {\n            taxonomy = terms[0].taxonomy();\n        }\n\n        if (taxonomy) {\n            attrs['data-slug'] = taxonomy.slug();\n\n            if (taxonomy.showLabel()) {\n                children.push(termLabel(taxonomy, {\n                    className: 'TaxonomyParentLabel',\n                }));\n            }\n        }\n\n        sortTerms(terms).forEach(tag => {\n            if (tag || terms.length === 1) {\n                children.push(termLabel(tag, {discussionLink, userLink, productLink}));\n            }\n        });\n    } else {\n        children.push(termLabel());\n    }\n\n    return m('span', attrs, children);\n}\n","import {Attributes} from 'mithril';\nimport sortTaxonomies from '../utils/sortTaxonomies';\nimport termsLabel from './termsLabel';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\nexport default function (terms: Term[], attrs: Attributes = {}) {\n    const taxonomies: Taxonomy[] = [];\n\n    terms.forEach(term => {\n        const taxonomy = term.taxonomy();\n\n        if (taxonomy && taxonomies.indexOf(taxonomy) === -1) {\n            taxonomies.push(taxonomy);\n        }\n    });\n\n    return sortTaxonomies(taxonomies).map(taxonomy => {\n        return termsLabel(terms.filter(term => term.taxonomy() === taxonomy), {...attrs});\n    });\n}\n","import Model from 'flarum/common/Model';\n\nexport default class Taxonomy extends Model {\n    type = Model.attribute<string>('type');\n    name = Model.attribute<string>('name');\n    slug = Model.attribute<string>('slug');\n    description = Model.attribute<string>('description');\n    color = Model.attribute<string>('color');\n    icon = Model.attribute<string>('icon');\n    order = Model.attribute<number>('order');\n    showLabel = Model.attribute<boolean>('showLabel');\n    showFilter = Model.attribute<boolean>('showFilter');\n    enableFilter = Model.attribute<boolean>('enableFilter');\n    enableFulltextSearch = Model.attribute<boolean>('enableFulltextSearch');\n    allowCustomValues = Model.attribute<boolean>('allowCustomValues');\n    customValueValidation = Model.attribute<string | null>('customValueValidation');\n    customValueSlugger = Model.attribute<string | null>('customValueSlugger');\n    minTerms = Model.attribute<number>('minTerms');\n    maxTerms = Model.attribute<number>('maxTerms');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n    canSearch = Model.attribute<boolean>('canSearch');\n    canBypassTermCounts = Model.attribute<boolean>('canBypassTermCounts');\n    tagIds = Model.attribute<string[]>('tagIds');\n\n    protected apiEndpoint(): string {\n        // @ts-ignore data.id not type-hinted\n        return '/flamarkt/taxonomies' + (this.exists ? '/' + this.data.id : '');\n    }\n\n    apiOrderEndpoint(): string {\n        return this.apiEndpoint() + '/terms/order';\n    }\n\n    apiTermsEndpoint(): string {\n        return this.apiEndpoint() + '/terms';\n    }\n}\n","import ChooseTaxonomyTermsDropdown from './components/ChooseTaxonomyTermsDropdown';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport labelsFromMultipleTaxonomiesList from './helpers/labelsFromMultipleTaxonomiesList';\nimport taxonomyIcon from './helpers/taxonomyIcon';\nimport termLabel from './helpers/termLabel';\nimport termsLabel from './helpers/termsLabel';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\nimport retrieveTerms from './utils/retrieveTerms';\nimport sortTaxonomies from './utils/sortTaxonomies';\nimport sortTerms from './utils/sortTerms';\nimport termToIdentifier from './utils/termToIdentifier';\n\nexport const common = {\n    'components/ChooseTaxonomyTermsDropdown': ChooseTaxonomyTermsDropdown,\n    'components/ChooseTaxonomyTermsModal': ChooseTaxonomyTermsModal,\n    'helpers/labelsFromMultipleTaxonomiesList': labelsFromMultipleTaxonomiesList,\n    'helpers/taxonomyIcon': taxonomyIcon,\n    'helpers/termLabel': termLabel,\n    'helpers/termsLabel': termsLabel,\n    'models/Taxonomy': Taxonomy,\n    'models/Term': Term,\n    'utils/retrieveTerms': retrieveTerms,\n    'utils/sortTaxonomies': sortTaxonomies,\n    'utils/sortTerms': sortTerms,\n    'utils/termToIdentifier': termToIdentifier,\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","import Product from 'flamarkt/core/common/models/Product';\nimport Component, {ComponentAttrs} from 'flarum/common/Component';\nimport sortTaxonomies from '../../common/utils/sortTaxonomies';\nimport termsLabel from '../../common/helpers/termsLabel';\nimport Taxonomy from '../../common/models/Taxonomy';\nimport Term from '../../common/models/Term';\n\nexport interface ProductTaxonomySectionAttrs extends ComponentAttrs {\n    product: Product\n    originalProduct: Product\n}\n\nexport default class ProductTaxonomySection extends Component<ProductTaxonomySectionAttrs> {\n    view() {\n        const terms: Term[] = this.attrs.product.taxonomyTerms() || [];\n\n        // If we are showing a product variant, merge the parent taxonomies with the child\n        if (this.attrs.originalProduct !== this.attrs.product) {\n            (this.attrs.originalProduct.taxonomyTerms() || []).forEach(term => {\n                if (terms.indexOf(term) === -1) {\n                    terms.push(term);\n                }\n            });\n        }\n\n        const taxonomies: Taxonomy[] = [];\n\n        terms.forEach(term => {\n            const taxonomy = term.taxonomy();\n\n            if (taxonomy && taxonomies.indexOf(taxonomy) === -1) {\n                taxonomies.push(taxonomy);\n            }\n        });\n\n        return m('section.ProductShowSection.ProductShowSection--taxonomies', m('.ProductTaxonomies-list', sortTaxonomies(taxonomies).map(taxonomy => m('dl.ProductTaxonomies-taxonomy', [\n            m('dt', taxonomy.name()),\n            m('dd', termsLabel(terms.filter(term => term.taxonomy() === taxonomy), {productLink: true})),\n        ]))));\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Dropdown'];","import {Vnode} from 'mithril';\nimport Component, {ComponentAttrs} from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport Dropdown from 'flarum/common/components/Dropdown';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Term from '../../common/models/Term';\nimport Taxonomy from '../../common/models/Taxonomy';\nimport retrieveTerms from '../../common/utils/retrieveTerms';\n\ninterface TaxonomyDropdownAttrs extends ComponentAttrs {\n    taxonomy: Taxonomy\n    onchange: (term: Term) => void\n    activeTermSlug?: string\n}\n\nexport default class TaxonomyDropdown extends Component<TaxonomyDropdownAttrs> {\n    termsInitialized: boolean = false;\n    terms: Term[] | null = null;\n\n    oninit(vnode: Vnode<TaxonomyDropdownAttrs>) {\n        super.oninit(vnode);\n\n        // If a term is active while the component inits, we're probably loading a page with pre-loaded filters\n        // We could retrieve the term from the store if it is present on discussion results\n        // But it's unreliable since a page with no results wouldn't have it but we want to show the term in the dropdown\n        if (this.attrs.activeTermSlug) {\n            this.loadTerms();\n        }\n    }\n\n    loadTerms() {\n        if (this.termsInitialized) {\n            return;\n        }\n\n        this.termsInitialized = true;\n\n\n        retrieveTerms(this.attrs.taxonomy).then(terms => {\n            this.terms = terms;\n            m.redraw();\n        });\n    }\n\n    view() {\n        let activeTerm = this.terms && this.terms.find(t => t.slug() === this.attrs.activeTermSlug);\n\n        return Dropdown.component({\n            buttonClassName: 'Button',\n            label: this.attrs.taxonomy.name() + (activeTerm ? ': ' + activeTerm.name() : ''),\n            onshow: () => {\n                this.loadTerms();\n            },\n        }, this.terms === null ? [\n            LoadingIndicator.component(),\n        ] : this.terms.map(term => {\n            const active = this.attrs.activeTermSlug === term.slug();\n\n            return Button.component({\n                icon: active ? 'fas fa-check' : true,\n                onclick: () => this.attrs.onchange(term),\n                active, // Remove after https://github.com/flarum/core/issues/2265\n            }, term.name());\n        }) as any);\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/UserPage'];","import {Vnode} from 'mithril';\nimport UserPage from 'flarum/forum/components/UserPage';\nimport sortTaxonomies from '../../common/utils/sortTaxonomies';\nimport termsLabel from '../../common/helpers/termsLabel';\nimport Taxonomy from '../../common/models/Taxonomy';\nimport Term from '../../common/models/Term';\n\n// @ts-ignore UserPage.view not type-hinted\nexport default class UserTaxonomyPage extends UserPage {\n    oninit(vnode: Vnode<any, this>) {\n        super.oninit(vnode);\n\n        this.loadUser(m.route.param('username'));\n    }\n\n    content() {\n        const terms: Term[] = this.user.taxonomyTerms();\n\n        if (!terms || !terms.length) {\n            return null;\n        }\n\n        const taxonomies: Taxonomy[] = [];\n\n        terms.forEach(term => {\n            const taxonomy = term.taxonomy();\n\n            if (taxonomy && taxonomies.indexOf(taxonomy) === -1) {\n                taxonomies.push(taxonomy);\n            }\n        });\n\n        return sortTaxonomies(taxonomies).map(taxonomy => [\n            m('h2', taxonomy.name()),\n            termsLabel(terms.filter(term => term.taxonomy() === taxonomy), {userLink: true}),\n        ]);\n    }\n}\n","import Taxonomy from '../../common/models/Taxonomy';\n\n/**\n * Checks if filters should be made available.\n * There are 2 different levels:\n * \"alsoParamOnly\" just checks whether the filter should be made available via the URL.\n * (default) checks whether the filter should be shown in the UI to the user.\n * @param type\n * @param alsoParamOnly\n */\nexport default function (type: string, alsoParamOnly: boolean = false) {\n    return (t: Taxonomy) => t.type() === type && t.canSearch() && (t.showFilter() || alsoParamOnly);\n}\n","import ProductTaxonomySection from './components/ProductTaxonomySection';\nimport TaxonomyDropdown from './components/TaxonomyDropdown';\nimport UserTaxonomyPage from './components/UserTaxonomyPage';\nimport showsFilterFor from './utils/showsFilterFor';\n\nexport const forum = {\n    'components/ProductTaxonomySection': ProductTaxonomySection,\n    'components/TaxonomyDropdown': TaxonomyDropdown,\n    'components/UserTaxonomyPage': UserTaxonomyPage,\n    'utils/showsFilterFor': showsFilterFor,\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionComposer'];","import app from 'flarum/forum/app';\nimport {extend, override} from 'flarum/common/extend';\nimport DiscussionComposer from 'flarum/forum/components/DiscussionComposer';\nimport icon from 'flarum/common/helpers/icon';\nimport ChooseTaxonomyTermsModal from '../common/components/ChooseTaxonomyTermsModal';\nimport termsLabel from '../common/helpers/termsLabel';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport termToIdentifier from '../common/utils/termToIdentifier';\nimport Term from '../common/models/Term';\nimport Taxonomy from '../common/models/Taxonomy';\n\nfunction applies(taxonomy: Taxonomy, instance: DiscussionComposer): boolean {\n    if (!app.forum.attribute('canUseTaxonomiesOnNewDiscussion')) {\n        return false;\n    }\n\n    if (taxonomy.tagIds().length === 0) {\n        return true;\n    }\n\n    const selectedTags = instance.composer.fields.tags;\n\n    // While no tags have been selected in the composer, don't show any scoped taxonomy\n    if (!Array.isArray(selectedTags)) {\n        return false;\n    }\n\n    // Show scoped taxonomies if one of their tag has been selected in the composer\n    return selectedTags.some(tag => {\n        return taxonomy.tagIds().indexOf(tag.id()!) !== -1;\n    });\n}\n\nexport default function () {\n    extend(DiscussionComposer.prototype, 'oninit', function () {\n        if (!this.composer.fields.taxonomyTerms) {\n            this.composer.fields.taxonomyTerms = {};\n        }\n    });\n\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            const taxonomyId = taxonomy.id();\n\n            if (taxonomy.type() !== 'discussions' || !taxonomyId) {\n                return;\n            }\n\n            if (!applies(taxonomy, this)) {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), m('a.DiscussionComposer-changeTaxonomies', {\n                    // This data-attribute isn't used by Taxonomies itself, but it's an easy shortcut for an extension that modifies the template and needs access to the field name\n                    'data-taxonomy-name': taxonomy.name(),\n                    href: '#', // Without an href value, the button can't be accessed via the keyboard\n                    onclick: (event: Event) => {\n                        event.preventDefault();\n\n                        app.modal.show(ChooseTaxonomyTermsModal, {\n                            taxonomy,\n                            selectedTerms: (this.composer.fields.taxonomyTerms[taxonomyId] || []).slice(0),\n                            onsubmit: (terms: Term[]) => {\n                                this.composer.fields.taxonomyTerms[taxonomy.id()!] = terms;\n                                this.$('textarea').trigger('focus');\n                            },\n                        });\n                    },\n                }, this.composer.fields.taxonomyTerms[taxonomyId] && this.composer.fields.taxonomyTerms[taxonomyId].length\n                    ? termsLabel(this.composer.fields.taxonomyTerms[taxonomyId], {\n                        taxonomy,\n                    })\n                    : m('span.TaxonomyLabel.untagged', [\n                        taxonomy.icon() ? [icon(taxonomy.icon()), ' '] : null,\n                        app.translator.trans('flamarkt-taxonomies.forum.composer.choose', {\n                            taxonomy: taxonomy.name(),\n                        }),\n                    ])\n            ), 9); // Tags uses 10, we add ours right to the tagson the right of the tags\n        });\n    });\n\n    override(DiscussionComposer.prototype, 'onsubmit', function (original) {\n        // Zero timeout to change the execution thread and let the modal close in TagDiscussionModal / ChooseTaxonomyTermsModal\n        // before we try opening another one\n        const callbacks: ((resolve: () => void) => void)[] = [];\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            const taxonomyId = taxonomy.id();\n\n            if (taxonomy.type() !== 'discussions' || !taxonomyId) {\n                return;\n            }\n\n            if (!applies(taxonomy, this)) {\n                return;\n            }\n\n            const count = (this.composer.fields.taxonomyTerms[taxonomyId] || []).length;\n\n            if (taxonomy.minTerms() && count < taxonomy.minTerms()) {\n                callbacks.push(resolve => {\n                    app.modal.show(ChooseTaxonomyTermsModal, {\n                        taxonomy,\n                        selectedTags: (this.composer.fields.taxonomyTerms[taxonomyId] || []).slice(0),\n                        onsubmit: (terms: Term[]) => {\n                            this.composer.fields.taxonomyTerms[taxonomyId] = terms;\n                            resolve();\n                        },\n                    });\n                });\n            }\n        });\n\n        if (callbacks.length) {\n            const callNextCallback = () => {\n                if (!callbacks.length) {\n                    original();\n\n                    return;\n                }\n\n                new Promise(callbacks.shift() as any).then(() => {\n                    // We give time for the modal to close before opening another one\n                    // Opening a different modal without closing the first one is very difficult because app.modal.show\n                    // Would have to be called in the same thread that just called app.modal.close and it's very difficult\n                    // We also apply that delay after our last modal in case Tags' modal shows up after ours\n                    setTimeout(() => {\n                        callNextCallback();\n                    }, 400); // 300ms is bootstrap's default Modal.TRANSITION_DURATION and we add a bit of delay\n                });\n            }\n\n            if (app.modal.modal) {\n                // In case Tags' modal is currently visible (their override ran before ours) we wait for it to close\n                // We have no other option because our override is called from TagDiscussionModal.props.onsubmit\n                // at which point app.modal.close has not been called yet\n                setTimeout(() => {\n                    callNextCallback();\n                }, 400);\n            } else {\n                callNextCallback();\n            }\n        } else {\n            original();\n        }\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data: any) {\n        // fof/drafts calls this method before oninit, which causes the code to fail without any error message\n        // So if this happens we'll just exit early, there won't be any taxonomy selected yet anyway\n        if (!this.composer.fields.taxonomyTerms) {\n            return;\n        }\n\n        const taxonomyData: any[] = [];\n\n        // We put all term IDs from all taxonomies together for the request\n        (app.forum.taxonomies() || []).forEach(taxonomy => {\n            const taxonomyId = taxonomy.id();\n\n            if (taxonomy.type() !== 'discussions' || !taxonomyId) {\n                return;\n            }\n\n            if (!applies(taxonomy, this)) {\n                return;\n            }\n\n            if (this.composer.fields.taxonomyTerms[taxonomyId] && this.composer.fields.taxonomyTerms[taxonomyId].length) {\n                taxonomyData.push({\n                    verbatim: true, // Flarum workaround, defined in flamarkt/core\n                    type: 'flamarkt-taxonomies',\n                    id: taxonomyId,\n                    relationships: {\n                        terms: {\n                            data: this.composer.fields.taxonomyTerms[taxonomyId].map(termToIdentifier),\n                        },\n                    },\n                });\n            }\n        });\n\n        data.relationships = data.relationships || {};\n        data.relationships.taxonomies = taxonomyData;\n    });\n\n    extend(DiscussionComposer.prototype, 'view', function (vdom: any) {\n        // If there are too many element (no matter if taxonomies or other), apply the compact class\n        if ((this.taxonomiesHeaderItemsCount || 0) < 5) {\n            return;\n        }\n\n        (vdom.children || []).forEach((vdom: any) => {\n            if (!vdom || !vdom.attrs || !vdom.attrs.className) {\n                return;\n            }\n\n            if (vdom.attrs.className.indexOf('ComposerBody ') === -1) {\n                return;\n            }\n\n            vdom.attrs.className += ' ComposerBody--taxonomies-compact';\n        });\n    });\n}\n\n// Try to do this after all other extensions\nexport function delayedComposerHooks() {\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        this.taxonomiesHeaderItemsCount = Object.keys(items.toObject()).length;\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport Button from 'flarum/common/components/Button';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Discussion from 'flarum/common/models/Discussion';\nimport ChooseTaxonomyTermsModal from '../common/components/ChooseTaxonomyTermsModal';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\n\nfunction addControls(items: ItemList<any>, discussion: Discussion) {\n    if (!discussion.attribute('canEditTaxonomies')) {\n        return;\n    }\n\n    sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n        if (taxonomy.type() !== 'discussions') {\n            return;\n        }\n\n        if (taxonomy.tagIds().length) {\n            if (!('flarum-tags' in flarum.extensions)) {\n                return;\n            }\n\n            const tags = discussion.tags();\n\n            // This probably would not happen regularly, but we make sure to not crash the app in case it does\n            if (!Array.isArray(tags)) {\n                return;\n            }\n\n            if (!tags.some(tag => {\n                return taxonomy.tagIds().indexOf(tag.id()) !== -1;\n            })) {\n                return;\n            }\n        }\n\n        items.add('taxonomy-' + taxonomy.slug(), Button.component({\n            icon: 'fas fa-tag',\n            onclick: () => app.modal.show(ChooseTaxonomyTermsModal, {\n                resource: discussion,\n                taxonomy,\n            }),\n        }, app.translator.trans('flamarkt-taxonomies.forum.discussion.edit', {\n            taxonomy: taxonomy.name(),\n        })));\n    });\n}\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        addControls(items, discussion);\n    });\n\n    if ('v17development/blog/components/BlogPostController' in flarum.core.compat) {\n        extend(flarum.core.compat['v17development/blog/components/BlogPostController'].prototype, 'manageArticleButtons', function (items) {\n            addControls(items, this.attrs.article);\n        });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/IndexPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/DiscussionListState'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/GlobalSearchState'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionListItem'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionHero'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-core']||{})['forum']||{})['layouts/ProductShowLayout'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-core']||{})['forum']||{})['layouts/ProductIndexLayout'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-core']||{})['forum']||{})['pages/ProductIndexPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/UserControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LinkButton'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Forum'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/User'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-core']||{})['common']||{})['models/Product'];","import app from 'flarum/forum/app';\nimport {common} from '../common/compat';\nimport {forum} from './compat';\nimport addBlogContent from './addBlogContent';\nimport addComposerControls, {delayedComposerHooks} from './addComposerControls';\nimport addDiscussionControls from './addDiscussionControls';\nimport addFoFDraftsSupport from './addFoFDraftsSupport';\nimport addIndexFilters from './addIndexFilters';\nimport addLabels from './addLabels';\nimport addPages from './addPages';\nimport addProductDescription from './addProductDescription';\nimport addProductFilters from './addProductFilters';\nimport addUserControls from './addUserControls';\nimport addModels from '../common/addModels';\nimport addUserDirectorySearchType from './addUserDirectorySearchType';\n\nexport {\n    common,\n    forum,\n};\n\napp.initializers.add('flamarkt-taxonomies', () => {\n    addBlogContent();\n    addComposerControls();\n    addDiscussionControls();\n    addFoFDraftsSupport();\n    addIndexFilters();\n    addLabels();\n    addPages();\n    addProductDescription();\n    addProductFilters();\n    addUserControls();\n    addModels();\n    addUserDirectorySearchType();\n});\n\napp.initializers.add('flamarkt-taxonomies-delayed', delayedComposerHooks, -500);\n","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport Model from 'flarum/common/Model';\nimport Term from '../common/models/Term';\nimport Taxonomy from '../common/models/Taxonomy';\nimport retrieveTerms from '../common/utils/retrieveTerms';\n\ninterface Draft extends Model {\n    relationships(): any\n\n    loadRelationships(): any\n}\n\nexport default function () {\n    const fofDraftsExports: any = flarum.extensions['fof-drafts'];\n\n    if (fofDraftsExports && fofDraftsExports.models && fofDraftsExports.models.Draft) {\n        extend(fofDraftsExports.models.Draft.prototype, 'loadRelationships', function (this: Draft, loadedRelationships: any) {\n            const relationships = this.relationships();\n\n            if (relationships && relationships.taxonomies && relationships.taxonomies.data.length) {\n                // fof/drafts first saves the value to this.loadedRelationships before returning it\n                // Since it's passed by reference we should be able to just edit the extended value and the property on the model will also update\n                loadedRelationships.taxonomyTerms = {};\n\n                relationships.taxonomies.data.forEach((taxonomyData: any) => {\n                    if (!taxonomyData) {\n                        console.warn('[flamarkt-taxonomies + fof/drafts] No data for taxonomy in saved relationship');\n                        return;\n                    }\n\n                    const taxonomyOfGroup = app.store.getById<Taxonomy>('flamarkt-taxonomies', taxonomyData.id);\n\n                    if (!taxonomyOfGroup) {\n                        console.warn('[flamarkt-taxonomies + fof/drafts] Invalid taxonomy #' + taxonomyData.id);\n                        return;\n                    }\n\n                    if (taxonomyOfGroup.type() !== 'discussions') {\n                        console.warn('[flamarkt-taxonomies + fof/drafts] Invalid taxonomy #' + taxonomyData.id);\n                        return;\n                    }\n\n                    // Unfortunately there is no easy way to check applies() because we don't have access to the composer here\n\n                    if (taxonomyData.relationships && taxonomyData.relationships.terms && taxonomyData.relationships.terms.data && taxonomyData.relationships.terms.data.length) {\n                        const termIdsToLoadAsynchronously: string[] = [];\n\n                        function addTerm(term: Term) {\n                            const idAsString = taxonomyOfGroup!.id()!;\n                            if (!loadedRelationships.taxonomyTerms[idAsString]) {\n                                loadedRelationships.taxonomyTerms[idAsString] = [];\n                            }\n\n                            loadedRelationships.taxonomyTerms[idAsString].push(term);\n                        }\n\n                        taxonomyData.relationships.terms.data.forEach((termData: any) => {\n                            if (termData.id) {\n                                // Try to retrieve term from store\n                                const term = app.store.getById<any>('flamarkt-taxonomy-terms', termData.id);\n\n                                // Not in store, load all available terms\n                                if (!term) {\n                                    termIdsToLoadAsynchronously.push(termData.id);\n                                    return;\n                                }\n\n                                const taxonomy = term.taxonomy();\n\n                                if (!taxonomy) {\n                                    console.warn('[flamarkt-taxonomies + fof/drafts] Taxonomy for Term #' + termData.id + ' not available');\n                                    return;\n                                }\n\n                                if (taxonomy !== taxonomyOfGroup) {\n                                    console.warn('[flamarkt-taxonomies + fof/drafts] Invalid Term #' + termData.id + '; taxonomy mismatch');\n                                    return;\n                                }\n\n                                addTerm(term);\n                            } else if (termData.attributes && termData.attributes.name) {\n                                addTerm(app.store.createRecord('flamarkt-taxonomy-terms', {\n                                    attributes: {\n                                        name: termData.attributes.name,\n                                    },\n                                }));\n                            }\n                        });\n\n                        if (termIdsToLoadAsynchronously.length) {\n                            // This request should be skipped next time since all terms will have been found in the store\n                            // Unfortunately we still get a bunch of identical requests at once when loading the drafts dropdown since this method is called when drawing the list\n                            retrieveTerms(taxonomyOfGroup).then(terms => {\n                                terms.forEach(term => {\n                                    const index = termIdsToLoadAsynchronously.indexOf(term.id()!);\n\n                                    if (index !== -1) {\n                                        // We should still be able to add to the original object asynchronously\n                                        // Since it will then be copied by reference\n                                        addTerm(term);\n\n                                        termIdsToLoadAsynchronously.splice(index, 1);\n                                    }\n                                });\n\n                                termIdsToLoadAsynchronously.forEach(id => {\n                                    console.warn('[flamarkt-taxonomies + fof/drafts] Failed to load term #' + id + '; asynchronously: not found');\n                                });\n\n                                m.redraw();\n                            });\n                        }\n                    }\n                });\n            }\n        });\n    }\n}\n","import {extend} from 'flarum/common/extend';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport app from 'flarum/forum/app';\nimport labelsFromMultipleTaxonomiesList from '../common/helpers/labelsFromMultipleTaxonomiesList';\n\nexport default function () {\n    if ('v17development/blog/components/BlogItemSidebar' in flarum.core.compat) {\n        extend(flarum.core.compat['v17development/blog/components/BlogItemSidebar'].prototype, 'items', function (items: ItemList<any>) {\n            // All items have the same priority in the original extension, so we'll move author even more to the top so we can squeeze below it\n            // Same code and priority as in clarkwinkelmann-discussion-lists\n            items.setPriority('author', 50);\n            items.setPriority('categories', 30);\n\n            const {article} = this.attrs;\n\n            if (!article) {\n                return;\n            }\n\n            const terms = article.taxonomyTerms();\n\n            if (terms && terms.length) {\n                items.add('taxonomies', m('.BlogTaxonomies.BlogSideWidget', [\n                    m('h3', app.translator.trans('flamarkt-taxonomies.forum.blog.widget.title')),\n                    m('.BlogTaxonomiesContainer', labelsFromMultipleTaxonomiesList(terms, {discussionLink: true})),\n                ]), 29);\n            }\n        });\n    }\n}\n","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport IndexPage from 'flarum/forum/components/IndexPage';\nimport DiscussionListState from 'flarum/forum/states/DiscussionListState';\nimport GlobalSearchState from 'flarum/forum/states/GlobalSearchState';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport TaxonomyDropdown from './components/TaxonomyDropdown';\nimport Term from '../common/models/Term';\nimport showsFilterFor from './utils/showsFilterFor';\n\nexport default function () {\n    extend(IndexPage.prototype, 'viewItems', function (items) {\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('discussions')).forEach(taxonomy => {\n            // If the taxonomy is not scoped, or if it's scoped to more than 1 tag, show the filter all the time\n            // Only filters for one specific tag will be hidden by default\n            if (taxonomy.tagIds().length === 1 && ('flarum-tags' in flarum.extensions)) {\n                const tag = this.currentTag();\n\n                if (!tag) {\n                    return;\n                }\n\n                if (taxonomy.tagIds().indexOf(tag.id()) === -1) {\n                    const parent = tag.parent();\n\n                    if (!parent) {\n                        return;\n                    }\n\n                    if (taxonomy.tagIds().indexOf(parent.id()) === -1) {\n                        return;\n                    }\n                }\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), TaxonomyDropdown.component({\n                taxonomy,\n                activeTermSlug: app.search.params()[taxonomy.slug()],\n                onchange: (term: Term) => {\n                    const params = app.search.params();\n\n                    const currentFilterForTaxonomy = params[taxonomy.slug()];\n\n                    if (term.slug() === currentFilterForTaxonomy) {\n                        delete params[taxonomy.slug()];\n                    } else {\n                        params[taxonomy.slug()] = term.slug();\n                    }\n\n                    // @ts-ignore Flarum injects routeName as a page attr but this isn't type-hinted anywhere\n                    const {routeName} = this.attrs;\n\n                    m.route.set(app.route(routeName, params));\n                },\n            }));\n        });\n    });\n\n    extend(GlobalSearchState.prototype, 'stickyParams', function (params) {\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('discussions', true)).forEach(taxonomy => {\n            params[taxonomy.slug()] = m.route.param(taxonomy.slug());\n        });\n    });\n\n    extend(DiscussionListState.prototype, 'requestParams', function (params: any) {\n        // Include the taxonomies when navigating to the discussion list\n        // Same includes are pre-loaded in DiscussionAttributes.php\n        params.include.push('taxonomyTerms', 'taxonomyTerms.taxonomy');\n\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('discussions', true)).forEach(taxonomy => {\n            const filterTermSlug = this.params[taxonomy.slug()];\n\n            if (filterTermSlug) {\n                if (params.filter.q) {\n                    params.filter.q = (params.filter.q || '') + ' taxonomy:' + taxonomy.slug() + ':' + filterTermSlug;\n                } else {\n                    params.filter.taxonomy = (params.filter.taxonomy || {});\n                    params.filter.taxonomy[taxonomy.slug()] = filterTermSlug;\n                }\n            }\n        });\n    });\n}\n","import {extend} from 'flarum/common/extend';\nimport DiscussionListItem from 'flarum/forum/components/DiscussionListItem';\nimport DiscussionHero from 'flarum/forum/components/DiscussionHero';\nimport labelsFromMultipleTaxonomiesList from '../common/helpers/labelsFromMultipleTaxonomiesList';\n\nexport default function () {\n    extend(DiscussionListItem.prototype, 'infoItems', function (items) {\n        const terms = this.attrs.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', labelsFromMultipleTaxonomiesList(terms), 10);\n        }\n    });\n\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        const terms = this.attrs.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', labelsFromMultipleTaxonomiesList(terms, {discussionLink: true}), 5);\n        }\n    });\n}\n","import app from 'flarum/forum/app';\nimport UserTaxonomyPage from './components/UserTaxonomyPage';\n\nexport default function () {\n    app.routes.flamarktTaxonomiesUser = {\n        path: '/u/:username/taxonomies',\n        component: UserTaxonomyPage,\n    };\n\n    app.route.flamarktTaxonomiesUser = user => {\n        return app.route('flamarktTaxonomiesUser', {\n            username: user.username(),\n        });\n    };\n}\n","import {extend} from 'flarum/common/extend';\nimport ProductShowLayout from 'flamarkt/core/forum/layouts/ProductShowLayout';\nimport ProductTaxonomySection from './components/ProductTaxonomySection';\n\nexport default function () {\n    if (!ProductShowLayout) {\n        return;\n    }\n\n    extend(ProductShowLayout.prototype, 'sections', function (sections, product) {\n        // Check both current product and original product for compatibility with Variants\n        if ((product.taxonomyTerms() || []).length < 1 && (this.attrs.product!.taxonomyTerms() || []).length < 1) {\n            return;\n        }\n\n        sections.add('taxonomies', ProductTaxonomySection.component({\n            product,\n            originalProduct: this.attrs.product,\n        }));\n    });\n}\n","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport ProductIndexLayout from 'flamarkt/core/forum/layouts/ProductIndexLayout';\nimport ProductIndexPage from 'flamarkt/core/forum/pages/ProductIndexPage';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport TaxonomyDropdown from './components/TaxonomyDropdown';\nimport Term from '../common/models/Term';\nimport showsFilterFor from './utils/showsFilterFor';\n\nexport default function () {\n    if (!ProductIndexLayout || !ProductIndexPage) {\n        return;\n    }\n\n    extend(ProductIndexLayout.prototype, 'filters', function (items) {\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('products')).forEach(taxonomy => {\n            items.add('taxonomy-' + taxonomy.slug(), TaxonomyDropdown.component({\n                taxonomy,\n                activeTermSlug: m.route.param()[taxonomy.slug()],\n                onchange: (term: Term) => {\n                    const params = {...m.route.param()};\n\n                    delete params.key;\n\n                    const currentFilterForTaxonomy = params[taxonomy.slug()];\n\n                    if (term.slug() === currentFilterForTaxonomy) {\n                        delete params[taxonomy.slug()];\n                    } else {\n                        params[taxonomy.slug()] = term.slug();\n                    }\n\n                    // @ts-ignore\n                    const {routeName} = app.current.data;\n\n                    //TODO: also apply to the filters. Right now it's just the URL that changes\n                    m.route.set(app.route(routeName, params));\n                },\n            }));\n        });\n    });\n\n    extend(ProductIndexPage.prototype, 'initState', function (state) {\n        const params = m.route.param();\n\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('products', true)).forEach(taxonomy => {\n            const filterTermSlug = params[taxonomy.slug()];\n\n            if (filterTermSlug) {\n                // Same implementation as addIndexFilters()\n                state.params.q = (state.params.q || '') + ' taxonomy:' + taxonomy.slug() + ':' + filterTermSlug;\n            }\n        });\n    });\n}\n","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport UserControls from 'flarum/forum/utils/UserControls';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport User from 'flarum/common/models/User';\nimport Button from 'flarum/common/components/Button';\nimport UserPage from 'flarum/forum/components/UserPage';\nimport LinkButton from 'flarum/common/components/LinkButton';\nimport ChooseTaxonomyTermsModal from '../common/components/ChooseTaxonomyTermsModal';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\n\nexport default function () {\n    extend(UserControls, 'userControls', function (items: ItemList<any>, user: User) {\n        if (!user.attribute('canEditTaxonomies')) {\n            return;\n        }\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'users') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), Button.component({\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(ChooseTaxonomyTermsModal, {\n                    resource: user,\n                    taxonomy,\n                }),\n            }, app.translator.trans('flamarkt-taxonomies.forum.user.edit', {\n                taxonomy: taxonomy.name(),\n            })));\n        });\n    });\n\n    extend(UserPage.prototype, 'navItems', function (items) {\n        const userTaxonomiesExist = sortTaxonomies(app.forum.taxonomies()).some(taxonomy => {\n            return taxonomy.type() === 'users';\n        });\n\n        if (!userTaxonomiesExist) {\n            return;\n        }\n\n        items.add(\n            'taxonomies',\n            LinkButton.component({\n                href: app.route.flamarktTaxonomiesUser(this.user),\n                icon: 'fas fa-tags',\n            }, app.translator.trans('flamarkt-taxonomies.forum.user.nav')),\n            120\n        );\n    });\n}\n","import app from 'flarum/common/app';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Forum from 'flarum/common/models/Forum';\nimport User from 'flarum/common/models/User';\nimport Model from 'flarum/common/Model';\nimport Product from 'flamarkt/core/common/models/Product';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\n\nexport default function () {\n    app.store.models['flamarkt-taxonomies'] = Taxonomy;\n    app.store.models['flamarkt-taxonomy-terms'] = Term;\n\n    Forum.prototype.taxonomies = Model.hasMany('taxonomies');\n    Discussion.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    User.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n\n    if (Product) {\n        Product.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    }\n}\n","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Taxonomy from '../common/models/Taxonomy';\nimport Term from '../common/models/Term';\nimport showsFilterFor from './utils/showsFilterFor';\nimport retrieveTerms from '../common/utils/retrieveTerms';\n\nexport default function () {\n    // Verify User Directory is enabled and exports all the classes we need\n    if (\n        !flarum.extensions['fof-user-directory'] ||\n        !flarum.extensions['fof-user-directory'].searchTypes ||\n        !flarum.extensions['fof-user-directory'].searchTypes.AbstractType ||\n        !flarum.extensions['fof-user-directory'].components ||\n        !flarum.extensions['fof-user-directory'].components.SearchField\n    ) {\n        return;\n    }\n\n    // Class must be defined here because it needs to extend the base class\n    // Which might not be available yet when imports are resolved\n    class TaxonomyTermType extends flarum.extensions['fof-user-directory'].searchTypes.AbstractType {\n        allTerms: Term[] | null = null\n        loadingAllTermsPromise: Promise<any> | null = null\n        loading: boolean = false\n        suggestions: Term[] = []\n\n        resourceType() {\n            return 'flamarkt-taxonomy-terms';\n        }\n\n        search(query: string) {\n            this.loading = true;\n\n            this.loadTerms().then(() => {\n                this.loading = false;\n                this.suggestions = [];\n\n                if (!query) {\n                    m.redraw();\n\n                    return;\n                }\n\n                query = query.toLowerCase();\n\n                this.allTerms!.forEach(term => {\n                    if (term.name().toLowerCase().indexOf(query) !== -1) {\n                        this.suggestions.push(term);\n                    }\n                });\n\n                m.redraw();\n            });\n        }\n\n        loadTerms() {\n            if (this.loadingAllTermsPromise) {\n                return this.loadingAllTermsPromise;\n            }\n\n            if (this.allTerms !== null) {\n                return Promise.resolve(null);\n            }\n\n            this.allTerms = [];\n\n            const promises: Promise<void>[] = [];\n\n            app.store.all<Taxonomy>('flamarkt-taxonomies').filter(showsFilterFor('users')).forEach(taxonomy => {\n                promises.push(retrieveTerms(taxonomy).then(terms => {\n                    this.allTerms!.push(...terms);\n                }));\n            });\n\n            this.loadingAllTermsPromise = Promise.all(promises);\n\n            return this.loadingAllTermsPromise!.then(() => {\n                this.loadingAllTermsPromise = null;\n            });\n        }\n\n        renderKind(term: Term) {\n            const taxonomy = term.taxonomy();\n\n            return taxonomy && taxonomy.name();\n        }\n\n        renderLabel(term: Term) {\n            return m('.UserDirectorySearchLabel', term.color() ? {\n                className: 'colored',\n                style: {\n                    backgroundColor: term.color(),\n                },\n            } : {}, [\n                term.icon() ? [\n                    icon(term.icon()),\n                    ' ',\n                ] : null,\n                term.name(),\n            ]);\n        }\n\n        applyFilter(params: any, resource: any) {\n            params.q = params.q ? params.q + ' ' : '';\n            params.q += 'taxonomy:' + resource.taxonomy().slug() + ':' + resource.slug();\n        }\n\n        initializeFromParams(params: any) {\n            if (!params.q) {\n                return Promise.resolve([]);\n            }\n\n            const gambits: string[] = (params.q as string).split(' ').filter(word => word.indexOf('taxonomy:') === 0);\n\n            if (!gambits.length) {\n                return Promise.resolve([]);\n            }\n\n            return this.loadTerms().then(() => {\n                const terms: Term[] = [];\n\n                gambits.forEach(gambit => {\n                    const parts = gambit.split(':');\n\n                    if (parts.length < 3) {\n                        return;\n                    }\n\n                    const term = this.allTerms!.find(t => t.slug() === parts[2] && t.taxonomy().slug() === parts[1]);\n\n                    if (term) {\n                        terms.push(term);\n                    }\n                });\n\n                return terms;\n            });\n        }\n    }\n\n    extend(flarum.extensions['fof-user-directory'].components.SearchField.prototype, 'filterTypes', function (items: ItemList<any>) {\n        items.add('flamarkt-taxonomies', new TaxonomyTermType(), 15);\n    });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","extensions","Term","_Model","_this","_len","arguments","length","args","Array","_key","apply","concat","name","Model","slug","description","color","icon","order","createdAt","taxonomy","apiEndpoint","this","exists","data","id","taxonomyIcon","term","attrs","settings","hasIcon","_settings$useColor","useColor","className","classList","style","backgroundColor","m","termLabel","discussionLink","extract","userLink","productLink","tagText","app","tag","title","undefined","canSearch","_app$route","_app$route2","href","q","Link","_extends","assign","target","i","source","attributes","method","url","apiTermsEndpoint","then","result","terms","forEach","pushData","relationships","ChooseTaxonomyTermsModal","_Modal","availableTerms","selectedTerms","searchFilter","activeListIndex","inputIsFocused","saving","bypassReqs","navigator","_proto","oninit","vnode","_this2","addTerm","resource","taxonomyTerms","retrieveTerms","redraw","KeyboardNavigatable","onUp","setIndex","onDown","onSelect","select","onRemove","toggleTerm","when","event","preventDefault","indexInSelectedTerms","findIndex","t","b","type","push","removeTerm","index","splice","displayName","getInstruction","count","minTerms","remaining","filteredAvailableTerms","filter","toLowerCase","substr","allowCustomValues","some","validation","customValueValidation","regex","indexOf","parts","split","RegExp","test","maxTerms","content","contentItems","toArray","_this3","items","ItemList","add","viewForm","listAvailableTerms","canBypassTermCounts","Switch","state","onchange","checked","formItems","inputItems","Button","disabled","loading","_this4","map","onclick","onready","placeholder","extractText","oninput","onkeydown","navigate","onfocus","oninputfocus","onblur","oninputblur","LoadingIndicator","listAvailableTerm","_this5","colored","selected","active","onmouseover","highlight","_this6","setTimeout","e","$element","getDomElement","metaKey","ctrlKey","is","onsubmit","dispatchEvent","Event","$","scrollToItem","$dropdown","indexLength","$item","_$dropdown$offset","_$item$offset","scrollTop","dropdownScroll","dropdownTop","offset","top","dropdownBottom","outerHeight","itemTop","itemBottom","parseInt","css","stop","animate","saveResource","save","taxonomies","verbatim","termToIdentifier","onsaved","onerror","DiscussionPage","update","Modal","ChooseTaxonomyTermsDropdown","_ChooseTaxonomyTermsM","lastSaveState","dropdownIsFocused","onmousedown","oncreate","element","dom","dropdown","querySelector","contains","document","addEventListener","onbeforeremove","onremove","removeEventListener","view","remove","status","slice","sort","termsLabel","children","showLabel","sortTerms","sortTaxonomies","Taxonomy","showFilter","enableFilter","enableFulltextSearch","customValueSlugger","tagIds","apiOrderEndpoint","common","labelsFromMultipleTaxonomiesList","ProductTaxonomySection","_Component","product","originalProduct","Component","TaxonomyDropdown","termsInitialized","activeTermSlug","loadTerms","activeTerm","find","Dropdown","buttonClassName","label","onshow","UserTaxonomyPage","_UserPage","loadUser","route","param","user","UserPage","alsoParamOnly","forum","showsFilterFor","applies","instance","selectedTags","composer","fields","tags","isArray","addControls","discussion","attribute","fofDraftsExports","extend","setPriority","article","DiscussionComposer","taxonomyId","trigger","override","original","callbacks","resolve","callNextCallback","Promise","shift","taxonomyData","vdom","taxonomiesHeaderItemsCount","DiscussionControls","models","Draft","loadedRelationships","taxonomyOfGroup","idAsString","termIdsToLoadAsynchronously","termData","console","warn","IndexPage","currentTag","parent","component","params","currentFilterForTaxonomy","routeName","set","GlobalSearchState","DiscussionListState","include","filterTermSlug","DiscussionListItem","DiscussionHero","path","username","ProductShowLayout","sections","ProductIndexLayout","ProductIndexPage","UserControls","LinkButton","Forum","Discussion","User","Product","searchTypes","AbstractType","components","SearchField","TaxonomyTermType","_flarum$extensions$fo","allTerms","loadingAllTermsPromise","suggestions","resourceType","search","query","promises","_ref","all","renderKind","renderLabel","applyFilter","initializeFromParams","gambits","word","gambit","addUserDirectorySearchType","keys","toObject"],"sourceRoot":""}