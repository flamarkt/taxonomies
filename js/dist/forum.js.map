{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@flamarkt/taxonomies/webpack/bootstrap","webpack://@flamarkt/taxonomies/webpack/runtime/compat get default export","webpack://@flamarkt/taxonomies/webpack/runtime/define property getters","webpack://@flamarkt/taxonomies/webpack/runtime/hasOwnProperty shorthand","webpack://@flamarkt/taxonomies/webpack/runtime/make namespace object","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/app']\"","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/app']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Button']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Switch']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/helpers/highlight']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/classList']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/extractText']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['utils/KeyboardNavigatable']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/utils/extract']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/Model']\"","webpack://@flamarkt/taxonomies/./src/common/models/Term.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/taxonomyIcon.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/termLabel.ts","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@flamarkt/taxonomies/./src/common/utils/termToIdentifier.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsModal.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsDropdown.ts","webpack://@flamarkt/taxonomies/./src/common/utils/sortTaxonomies.ts","webpack://@flamarkt/taxonomies/./src/common/utils/sortTerms.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/termsLabel.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/labelsFromMultipleTaxonomiesList.ts","webpack://@flamarkt/taxonomies/./src/common/models/Taxonomy.ts","webpack://@flamarkt/taxonomies/./src/common/compat.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/Component']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/Dropdown']\"","webpack://@flamarkt/taxonomies/./src/forum/components/TaxonomyDropdown.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/UserPage']\"","webpack://@flamarkt/taxonomies/./src/forum/components/UserTaxonomyPage.ts","webpack://@flamarkt/taxonomies/./src/forum/utils/showsFilterFor.ts","webpack://@flamarkt/taxonomies/./src/forum/compat.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/extend']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/DiscussionComposer']\"","webpack://@flamarkt/taxonomies/./src/forum/addComposerControls.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@flamarkt/taxonomies/./src/forum/addDiscussionControls.ts","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/IndexPage']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/states/DiscussionListState']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/states/GlobalSearchState']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/DiscussionListItem']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/components/DiscussionHero']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-core']||{})['forum']||{})['layouts/ProductIndexLayout']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-core']||{})['forum']||{})['pages/ProductIndexPage']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['forum/utils/UserControls']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/components/LinkButton']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/Forum']\"","webpack://@flamarkt/taxonomies/external root \"flarum.core.compat['common/models/User']\"","webpack://@flamarkt/taxonomies/external root \"((flarum.extensions['flamarkt-core']||{})['common']||{})['models/Product']\"","webpack://@flamarkt/taxonomies/./src/forum/index.ts","webpack://@flamarkt/taxonomies/./src/forum/addBlogContent.ts","webpack://@flamarkt/taxonomies/./src/forum/addIndexFilters.ts","webpack://@flamarkt/taxonomies/./src/forum/addLabels.ts","webpack://@flamarkt/taxonomies/./src/forum/addPages.ts","webpack://@flamarkt/taxonomies/./src/forum/addProductFilters.ts","webpack://@flamarkt/taxonomies/./src/forum/addUserControls.ts","webpack://@flamarkt/taxonomies/./src/common/addModels.ts","webpack://@flamarkt/taxonomies/./src/forum/addUserDirectorySearchType.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingIndicator'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Modal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Switch'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/highlight'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/classList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extractText'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-backoffice']||{})['common']||{})['utils/KeyboardNavigatable'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extract'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","import Model from 'flarum/common/Model';\nimport Taxonomy from './Taxonomy';\n\nexport default class Term extends Model {\n    name = Model.attribute<string>('name');\n    slug = Model.attribute<string>('slug');\n    description = Model.attribute<string>('description');\n    color = Model.attribute<string>('color');\n    icon = Model.attribute<string>('icon');\n    order = Model.attribute<number>('order');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n\n    taxonomy = Model.hasOne<Taxonomy>('taxonomy');\n\n    protected apiEndpoint(): string {\n        // @ts-ignore data.id not type-hinted\n        return '/flamarkt/taxonomy-terms' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","import {Attributes} from 'mithril';\nimport classList from 'flarum/common/utils/classList';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\ninterface Settings {\n    useColor?: boolean\n}\n\nexport default function taxonomyIcon(term: Taxonomy | Term, attrs: Attributes = {}, settings: Settings = {}) {\n    const hasIcon = term && term.icon();\n    const {useColor = true} = settings;\n\n    attrs.className = classList([\n        attrs.className,\n        'icon',\n        hasIcon ? term.icon() : 'TaxonomyIcon',\n    ]);\n\n    if (term) {\n        attrs.style = attrs.style || {};\n\n        if (hasIcon) {\n            attrs.style.color = useColor ? term.color() : '';\n        } else {\n            attrs.style.backgroundColor = term.color();\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return hasIcon ? m('i', attrs) : m('span', attrs);\n}\n","import {Attributes} from 'mithril';\nimport app from 'flarum/common/app';\nimport extract from 'flarum/common/utils/extract';\nimport Term from '../models/Term';\nimport taxonomyIcon from './taxonomyIcon';\nimport Taxonomy from '../models/Taxonomy';\n\nexport default function termLabel(term: Taxonomy | Term | null = null, attrs: Attributes = {}) {\n    attrs.style = attrs.style || {};\n    attrs.className = 'TaxonomyLabel ' + (attrs.className || '');\n\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n    const tagText = term ? term.name() : app.translator.trans('flarum-tags.lib.deleted_tag_text');\n    let tag = 'span';\n\n    if (term) {\n        const color = term.color();\n        if (color) {\n            attrs.style.backgroundColor = attrs.style.color = color;\n            attrs.className += ' colored';\n        }\n\n        // We need to check for instanceof because this method is also used with a taxonomy passed as a value\n        if (term instanceof Term && term.taxonomy() && term.taxonomy().showFilter()) {\n            if (discussionLink) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('index', {[term.taxonomy().slug()]: term.slug()});\n                attrs.config = m.route;\n                tag = 'a';\n            }\n\n            // Only generate user taxonomy links if fof/user-directory is enabled\n            if (userLink && app.routes.fof_user_directory) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('fof_user_directory', {q: 'taxonomy:' + term.taxonomy().slug() + ':' + term.slug()});\n                attrs.config = m.route;\n                tag = 'a';\n            }\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return m(tag, attrs, m('span.TaxonomyLabel-text', [\n        term && term.icon() && taxonomyIcon(term, {}, {useColor: false}),\n        ' ' + tagText,\n    ]));\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import Model from 'flarum/common/Model';\nimport Term from '../models/Term';\n\n/**\n * Prepares a model for a relationship payload\n * We need to keep the name value for custom terms\n */\nexport default function (term: Term) {\n    if (term.id()) {\n        return Model.getIdentifier(term);\n    }\n\n    return {\n        ...Model.getIdentifier(term),\n        attributes: {\n            name: term.name(),\n        },\n    }\n}\n","import {Children, Vnode} from 'mithril';\nimport app from 'flarum/common/app';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Modal, {IInternalModalAttrs} from 'flarum/common/components/Modal';\nimport Model from 'flarum/common/Model';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Switch from 'flarum/common/components/Switch';\nimport highlight from 'flarum/common/helpers/highlight';\nimport classList from 'flarum/common/utils/classList';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport extractText from 'flarum/common/utils/extractText';\n\nimport KeyboardNavigatable from 'flamarkt/backoffice/common/utils/KeyboardNavigatable';\n\nimport termLabel from '../helpers/termLabel';\nimport taxonomyIcon from '../helpers/taxonomyIcon';\nimport termToIdentifier from '../utils/termToIdentifier';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\n/**\n * Comparing objects directly is unreliable because we will be creating some new records as well\n * So we use this method to do a proper deep check\n */\nfunction isSameTerm(a: Term, b: Term) {\n    if (a.data.type !== b.data.type) {\n        return false;\n    }\n\n    // If both have an ID and it's different\n    if (a.id() && b.id()) {\n        return a.id() === b.id();\n    }\n\n    // If only one has an ID, it's different\n    if (!a.id() !== !b.id()) {\n        return false;\n    }\n\n    // If both don't have an ID, it's a new value and we compare the name\n    return a.name() === b.name();\n}\n\nexport interface ChooseTaxonomyTermsModalAttrs extends IInternalModalAttrs {\n    resource: Model\n    taxonomy: Taxonomy\n    selectedTerms: Term[]\n    onsubmit?: (terms: Term[]) => void\n}\n\n/**\n * Based on Flarum's TagDiscussionModal\n */\nexport default class ChooseTaxonomyTermsModal extends Modal<ChooseTaxonomyTermsModalAttrs> {\n    availableTerms: Term[] | null = null;\n    selectedTerms: Term[] = [];\n    searchFilter: string = '';\n    activeListIndex: number = 0;\n    inputIsFocused: boolean = false;\n    saving: boolean = false;\n    bypassReqs: boolean = false;\n    navigator!: KeyboardNavigatable;\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        if (this.attrs.selectedTerms) {\n            this.attrs.selectedTerms.forEach(this.addTerm.bind(this));\n        } else if (this.attrs.resource) {\n            this.attrs.resource.taxonomyTerms().forEach((term: Term) => {\n                if (term.taxonomy().id() === this.attrs.taxonomy.id()) {\n                    this.addTerm(term);\n                }\n            });\n        }\n\n        app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiEndpoint() + '/terms',\n        }).then(result => {\n            this.availableTerms = app.store.pushPayload<Term[]>(result);\n\n            m.redraw();\n        });\n\n        this.navigator = new KeyboardNavigatable();\n        this.navigator\n            .onUp(() => this.setIndex(this.activeListIndex - 1, true))\n            .onDown(() => this.setIndex(this.activeListIndex + 1, true))\n            .onSelect(this.select.bind(this))\n            .onRemove(() => {\n                if (!this.selectedTerms.length) {\n                    return;\n                }\n\n                this.toggleTerm(this.selectedTerms[this.selectedTerms.length - 1]);\n            })\n            .when(event => {\n                // We want to allow selecting with space because it's a common way to select\n                // However this interferes with the ability to enter spaces\n                // So we will have space act as select, but only if nothing is typed yet\n                if (event.key === ' ' && this.searchFilter === '') {\n                    event.preventDefault();\n                    this.select(event);\n\n                    return false;\n                }\n\n                return true;\n            });\n    }\n\n    indexInSelectedTerms(term: Term) {\n        return this.selectedTerms.findIndex(t => isSameTerm(t, term));\n    }\n\n    addTerm(term: Term) {\n        this.selectedTerms.push(term);\n    }\n\n    removeTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.selectedTerms.splice(index, 1);\n        }\n    }\n\n    className() {\n        return 'ChooseTaxonomyTermsModal';\n    }\n\n    title() {\n        return this.attrs.resource\n            ? app.translator.trans('flamarkt-taxonomies.lib.modal.title.edit', {\n                taxonomy: this.attrs.taxonomy.name(),\n                title: m('em', this.attrs.resource.title ? this.attrs.resource.title() : this.attrs.resource.displayName()),\n            })\n            : app.translator.trans('flamarkt-taxonomies.lib.modal.title.new', {\n                taxonomy: this.attrs.taxonomy.name(),\n            });\n    }\n\n    getInstruction() {\n        if (this.bypassReqs) {\n            return '';\n        }\n\n        const count = this.selectedTerms.length;\n\n        if (this.attrs.taxonomy.minTerms() && count < this.attrs.taxonomy.minTerms()) {\n            const remaining = this.attrs.taxonomy.minTerms() - count;\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholder', {\n                count: remaining,\n            });\n        } else if (count === 0) {\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholderOptional');\n        }\n\n        return '';\n    }\n\n    filteredAvailableTerms() {\n        let availableTerms = this.availableTerms === null ? [] : this.availableTerms;\n        const filter = this.searchFilter.toLowerCase();\n\n        if (filter) {\n            availableTerms = availableTerms.filter(term => term.name().substr(0, filter.length).toLowerCase() === filter);\n\n            if (\n                this.attrs.taxonomy.allowCustomValues() &&\n                !availableTerms.some(term => term.name().toLowerCase() === filter)\n            ) {\n                const validation = this.attrs.taxonomy.customValueValidation();\n                let regex: RegExp | null = null;\n\n                if (validation === 'alpha_num') {\n                    regex = /^[a-z0-9]$/i;\n                } else if (validation === 'alpha_dash') {\n                    regex = /^[a-z0-9_-]$/i;\n                } else if (validation.indexOf('/') === 0) {\n                    const parts = validation.split('/');\n                    if (parts.length === 3) {\n                        regex = new RegExp(parts[1], parts[2]);\n                    }\n                }\n\n                if (!regex || regex.test(this.searchFilter)) {\n                    availableTerms.push(app.store.createRecord('flamarkt-taxonomy-terms', {\n                        attributes: {\n                            name: this.searchFilter,\n                        },\n                    }));\n                }\n            }\n        }\n\n        if (!this.bypassReqs && this.attrs.taxonomy.maxTerms() && this.selectedTerms.length >= this.attrs.taxonomy.maxTerms()) {\n            availableTerms = [];\n        }\n\n        return availableTerms;\n    }\n\n    content() {\n        return this.contentItems().toArray();\n    }\n\n    contentItems() {\n        const items = new ItemList();\n\n        items.add('form', this.viewForm(), 20);\n\n        items.add('terms', this.listAvailableTerms(this.filteredAvailableTerms()), 10);\n\n        if (this.attrs.taxonomy.canBypassTermCounts() && (this.attrs.taxonomy.minTerms() || this.attrs.taxonomy.maxTerms())) {\n            items.add('bypass', m('.Modal-body.ChooseTaxonomyTermsModal-form-bypass', Switch.component({\n                state: this.bypassReqs,\n                onchange: (checked: boolean) => {\n                    this.bypassReqs = checked;\n                },\n            }, app.translator.trans('flamarkt-taxonomies.lib.modal.bypassTermCounts'))), -10);\n        }\n\n        return items;\n    }\n\n    viewForm() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.Modal-body', [\n            description ? m('p', description) : null,\n            m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n        ]);\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('input', m('.ChooseTaxonomyTermsModal-form-input', m('.TermsInput.FormControl', {\n            className: this.inputIsFocused ? 'focus' : '',\n        }, this.inputItems().toArray())), 20);\n\n        items.add('submit', m('.ChooseTaxonomyTermsModal-form-submit.App-primaryControl', Button.component({\n            type: 'submit',\n            className: 'Button Button--primary',\n            disabled: !this.bypassReqs && this.attrs.taxonomy.minTerms() && this.selectedTerms.length < this.attrs.taxonomy.minTerms(),\n            icon: 'fas fa-check',\n            loading: this.saving,\n        }, app.translator.trans('flamarkt-taxonomies.lib.modal.submit'))), 10);\n\n        return items;\n    }\n\n    inputItems() {\n        const items = new ItemList();\n\n        items.add('selected', this.selectedTerms.map(term => {\n            return m('span.TermsInput-term', {\n                onclick: () => {\n                    this.toggleTerm(term);\n                    this.onready();\n                },\n            }, termLabel(term));\n        }), 20);\n\n        items.add('control', m('input.FormControl', {\n            placeholder: extractText(this.getInstruction()),\n            value: this.searchFilter,\n            oninput: (event: Event) => {\n                this.searchFilter = (event.target as HTMLInputElement).value;\n                this.activeListIndex = 0;\n            },\n            onkeydown: this.navigator.navigate.bind(this.navigator),\n            // Use local methods so that other extensions can extend behaviour\n            onfocus: this.oninputfocus.bind(this),\n            onblur: this.oninputblur.bind(this),\n        }), 10);\n\n        return items;\n    }\n\n    oninputfocus() {\n        this.inputIsFocused = true;\n    }\n\n    oninputblur() {\n        this.inputIsFocused = false;\n    }\n\n    listAvailableTerms(terms: Term[]): Children {\n        return m('.Modal-footer', this.availableTerms === null ?\n            LoadingIndicator.component() :\n            m('ul.ChooseTaxonomyTermsModal-list.SelectTermList', {\n                className: terms.some(term => term.description()) ? 'SelectTermList--with-descriptions' : '',\n            }, terms.map(this.listAvailableTerm.bind(this)))\n        );\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li.SelectTermListItem', {\n            'data-index': index,\n            className: classList({\n                colored: !!term.color(),\n                selected: this.indexInSelectedTerms(term) !== -1,\n                active: this.activeListIndex === index,\n            }),\n            style: {color: term.color()},\n            onmouseover: () => this.activeListIndex = index,\n            onclick: this.toggleTerm.bind(this, term),\n        }, [\n            taxonomyIcon(term),\n            m('span.SelectTermListItem-name', term.exists ? highlight(term.name(), this.searchFilter) : app.translator.trans('flamarkt-taxonomies.lib.modal.custom', {\n                value: m('em', term.name()),\n            })),\n            term.description() ? m('span.SelectTermListItem-description', term.description()) : '',\n        ]);\n    }\n\n    toggleTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.removeTerm(term);\n        } else {\n            this.addTerm(term);\n        }\n\n        if (this.searchFilter) {\n            this.searchFilter = '';\n            this.activeListIndex = 0;\n        }\n\n        // Defer re-focusing to next browser draw\n        setTimeout(() => {\n            this.onready();\n        });\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case we don't want to submit just yet, but we will delete the text\n        // so that typing enter multiple times does end up submitting\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Ctrl + Enter submits the selection, just Enter completes the current entry\n        if (e.metaKey || e.ctrlKey || $element.is('.selected')) {\n            if (this.selectedTerms.length) {\n                // Calling .trigger() on the form with jQuery doesn't seem to trigger the onsubmit, so we'll just do that directly instead\n                this.onsubmit();\n            }\n        } else {\n            $element[0].dispatchEvent(new Event('click'));\n        }\n    }\n\n    getDomElement(index: number) {\n        return this.$(`.SelectTermListItem[data-index=\"${index}\"]`);\n    }\n\n    setIndex(index: number, scrollToItem: boolean) {\n        const $dropdown = this.$('.ChooseTaxonomyTermsModal-list');\n\n        const indexLength = this.$('.SelectTermListItem').length;\n\n        if (index < 0) {\n            index = indexLength - 1;\n        } else if (index >= indexLength) {\n            index = 0;\n        }\n\n        const $item = this.getDomElement(index);\n        this.activeListIndex = index;\n\n        m.redraw();\n\n        if (scrollToItem) {\n            const dropdownScroll = $dropdown.scrollTop() || 0;\n            const dropdownTop = $dropdown.offset()?.top || 0;\n            const dropdownBottom = dropdownTop + ($dropdown.outerHeight() || 0);\n            const itemTop = $item.offset()?.top || 0;\n            const itemBottom = itemTop + ($item.outerHeight() || 0);\n\n            let scrollTop;\n            if (itemTop < dropdownTop) {\n                scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n            } else if (itemBottom > dropdownBottom) {\n                scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n            }\n\n            if (typeof scrollTop !== 'undefined') {\n                $dropdown.stop(true).animate({scrollTop}, 100);\n            }\n        }\n    }\n\n    onsubmit(event?: Event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.attrs.resource) {\n            this.saveResource();\n\n            // Do not run the normal code - it might close the modal even if an error occurred\n            return;\n        }\n\n        if (this.attrs.onsubmit) this.attrs.onsubmit(this.selectedTerms);\n\n        app.modal.close();\n    }\n\n    saveResource() {\n        this.saving = true;\n\n        this.attrs.resource.save({\n            relationships: {\n                taxonomies: [\n                    {\n                        verbatim: true, // Flarum workaround, defined in flamarkt/core\n                        type: 'flamarkt-taxonomies',\n                        id: this.attrs.taxonomy.id(),\n                        relationships: {\n                            terms: {\n                                data: this.selectedTerms.map(termToIdentifier),\n                            },\n                        },\n                    },\n                ],\n            },\n        }).then(this.onsaved.bind(this), this.onerror.bind(this));\n    }\n\n    onsaved() {\n        // Need to check if DiscussionPage exists because in backoffice frontend the import will be undefined\n        if (DiscussionPage && app.current.matches(DiscussionPage)) {\n            app.current.get('stream').update();\n        }\n        this.saving = false;\n        m.redraw();\n\n        app.modal.close();\n    }\n\n    onerror() {\n        this.saving = false;\n        m.redraw();\n    }\n}\n","import {Vnode, VnodeDOM} from 'mithril';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport icon from 'flarum/common/helpers/icon';\nimport ChooseTaxonomyTermsModal, {ChooseTaxonomyTermsModalAttrs} from './ChooseTaxonomyTermsModal';\nimport Term from '../models/Term';\n\nexport default class ChooseTaxonomyTermsDropdown extends ChooseTaxonomyTermsModal {\n    lastSaveState: 'success' | 'error' | 'neutral' = 'neutral'\n    dropdownIsFocused: boolean = false\n    onmousedown!: (event: Event) => void\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        this.navigator.when(event => {\n            // Same as the original when() in the modal\n            // (we are replacing the original since we can have a single callback)\n            if (event.key === ' ' && this.searchFilter === '') {\n                event.preventDefault();\n                this.select(event);\n\n                return false;\n            }\n\n            // We don't want Tab to act as select, as this prevent moving from field to field\n            return event.key !== 'Tab';\n        });\n    }\n\n    oncreate(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        // Not calling super because it just tries to do modal stuff\n        //super.oncreate(vnode);\n\n        // Since we are not calling the original Component.oncreate, we need to copy the dom reference manually\n        this.element = vnode.dom;\n\n        this.onmousedown = (event: Event) => {\n            const dropdown = vnode.dom.querySelector('.Dropdown-menu');\n\n            if (\n                dropdown &&\n                dropdown.contains(event.target as HTMLElement)\n            ) {\n                if (!this.dropdownIsFocused) {\n                    this.dropdownIsFocused = true;\n                    m.redraw();\n                }\n            } else {\n                if (this.dropdownIsFocused) {\n                    this.dropdownIsFocused = false;\n                    m.redraw();\n                }\n            }\n        };\n\n        document.addEventListener('mousedown', this.onmousedown);\n    }\n\n    onbeforeremove() {\n        // Do nothing. Prevent parent method from running because it will try to access this.attrs.state which isn't set\n    }\n\n    onremove(vnode: VnodeDOM<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.onremove(vnode);\n\n        document.removeEventListener('mousedown', this.onmousedown);\n    }\n\n    view() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.ChooseTaxonomyTermsDropdown', m('form', {\n            // The form element is only there to prevent any unwanted page POST submission\n            // It's also used so that onready() continues to focus the field when called\n            // Due to the jQuery selector in onready, the form cannot be the root element of view()\n            onsubmit(event: Event) {\n                event.preventDefault();\n            },\n        }, [\n            m('.ChooseTaxonomyTermsInput', [\n                m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n                // .ChooseTaxonomyTermsModal-list must be kept because it's used by the javascript of the keyboard navigation\n                this.listAvailableTerms(this.filteredAvailableTerms()),\n            ]),\n            description ? m('p', description) : null,\n        ]));\n    }\n\n    formItems() {\n        const items = super.formItems();\n\n        items.remove('submit');\n\n        let status = null;\n\n        if (this.saving) {\n            status = LoadingIndicator.component();\n        } else if (this.lastSaveState === 'success') {\n            status = icon('fas fa-check');\n        } else if (this.lastSaveState === 'error') {\n            status = icon('fas fa-times');\n        }\n\n        items.add('status', m('.ChooseTaxonomyTermsStatus', status));\n\n        return items;\n    }\n\n    listAvailableTerms(terms: Term[]) {\n        // We need two attributes to hold the dropdown open\n        // One is the input focus, managed by the modal\n        // The second one is needed because there's a short moment during a click where the focus is lost on the input\n        // mousedown triggers first, then the input blur, and only in mouseup can we put focus on the input again\n        if (!(this.inputIsFocused || this.dropdownIsFocused) || terms.length === 0) {\n            return null;\n        }\n\n        let content;\n\n        if (this.availableTerms === null) {\n            content = LoadingIndicator.component();\n        } else {\n            content = terms.map(this.listAvailableTerm.bind(this));\n        }\n\n        return m('ul.Dropdown-menu.ChooseTaxonomyTermsModal-list', content);\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li', super.listAvailableTerm(term, index));\n    }\n\n    toggleTerm(term: Term) {\n        super.toggleTerm(term);\n\n        // Auto-save\n        this.lastSaveState = 'neutral';\n        this.saveResource();\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case there's nothing to select\n        // We reset the typed value to force the user to enter something else and/or correctly reflect what is saved\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Same as original select(), but without the submission logic (because we auto-save)\n        // This now allows using Enter to remove a highlighted item as well\n        $element[0].dispatchEvent(new Event('click'));\n    }\n\n    onsaved() {\n        this.lastSaveState = 'success';\n        super.onsaved();\n    }\n\n    onerror() {\n        this.lastSaveState = 'error';\n        super.onerror();\n    }\n}\n","import Taxonomy from '../models/Taxonomy';\n\nexport default function (taxonomies: Taxonomy[] | false): Taxonomy[] {\n    // Special case for when retrieving an empty relationship from the store\n    if (taxonomies === false) {\n        taxonomies = [];\n    }\n\n    return taxonomies.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","import Term from '../models/Term';\n\nexport default function (terms: Term[]): Term[] {\n    return terms.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","import {Attributes, Vnode} from 'mithril';\nimport extract from 'flarum/common/utils/extract';\nimport termLabel from './termLabel';\nimport sortTerms from '../utils/sortTerms';\nimport Term from '../models/Term';\n\nexport default function termsLabel(terms: Term[], attrs: Attributes = {}) {\n    const children: Vnode[] = [];\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n\n    attrs.className = 'TaxonomiesLabel ' + (attrs.className || '');\n\n    if (terms) {\n        let taxonomy = extract(attrs, 'taxonomy');\n\n        if (!taxonomy) {\n            taxonomy = terms[0].taxonomy();\n        }\n\n        if (taxonomy) {\n            attrs['data-slug'] = taxonomy.slug();\n\n            if (taxonomy.showLabel()) {\n                children.push(termLabel(taxonomy, {\n                    className: 'TaxonomyParentLabel',\n                }));\n            }\n        }\n\n        sortTerms(terms).forEach(tag => {\n            if (tag || terms.length === 1) {\n                children.push(termLabel(tag, {discussionLink, userLink}));\n            }\n        });\n    } else {\n        children.push(termLabel());\n    }\n\n    return m('span', attrs, children);\n}\n","import {Attributes} from 'mithril';\nimport sortTaxonomies from '../utils/sortTaxonomies';\nimport termsLabel from './termsLabel';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\n\nexport default function (terms: Term[], attrs: Attributes = {}) {\n    const taxonomies: Taxonomy[] = [];\n\n    terms.forEach(term => {\n        const taxonomy = term.taxonomy();\n\n        if (taxonomy && taxonomies.indexOf(taxonomy) === -1) {\n            taxonomies.push(taxonomy);\n        }\n    });\n\n    return sortTaxonomies(taxonomies).map(taxonomy => {\n        return termsLabel(terms.filter(term => term.taxonomy() === taxonomy), {...attrs});\n    });\n}\n","import Model from 'flarum/common/Model';\n\nexport default class Taxonomy extends Model {\n    type = Model.attribute<string>('type');\n    name = Model.attribute<string>('name');\n    slug = Model.attribute<string>('slug');\n    description = Model.attribute<string>('description');\n    color = Model.attribute<string>('color');\n    icon = Model.attribute<string>('icon');\n    order = Model.attribute<number>('order');\n    showLabel = Model.attribute<boolean>('showLabel');\n    showFilter = Model.attribute<boolean>('showFilter');\n    allowCustomValues = Model.attribute<boolean>('allowCustomValues');\n    customValueValidation = Model.attribute<string | null>('customValueValidation');\n    customValueSlugger = Model.attribute<string | null>('customValueSlugger');\n    minTerms = Model.attribute<number>('minTerms');\n    maxTerms = Model.attribute<number>('maxTerms');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n    canSearch = Model.attribute<boolean>('canSearch');\n    canBypassTermCounts = Model.attribute<boolean>('canBypassTermCounts');\n    tagIds = Model.attribute<string[]>('tagIds');\n\n    protected apiEndpoint(): string {\n        // @ts-ignore data.id not type-hinted\n        return '/flamarkt/taxonomies' + (this.exists ? '/' + this.data.id : '');\n    }\n\n    apiOrderEndpoint(): string {\n        return this.apiEndpoint() + '/terms/order';\n    }\n\n    apiTermsEndpoint(): string {\n        return this.apiEndpoint() + '/terms';\n    }\n}\n","import ChooseTaxonomyTermsDropdown from './components/ChooseTaxonomyTermsDropdown';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport labelsFromMultipleTaxonomiesList from './helpers/labelsFromMultipleTaxonomiesList';\nimport taxonomyIcon from './helpers/taxonomyIcon';\nimport termLabel from './helpers/termLabel';\nimport termsLabel from './helpers/termsLabel';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\nimport sortTaxonomies from './utils/sortTaxonomies';\nimport sortTerms from './utils/sortTerms';\nimport termToIdentifier from './utils/termToIdentifier';\n\nexport const common = {\n    'components/ChooseTaxonomyTermsDropdown': ChooseTaxonomyTermsDropdown,\n    'components/ChooseTaxonomyTermsModal': ChooseTaxonomyTermsModal,\n    'helpers/labelsFromMultipleTaxonomiesList': labelsFromMultipleTaxonomiesList,\n    'helpers/taxonomyIcon': taxonomyIcon,\n    'helpers/termLabel': termLabel,\n    'helpers/termsLabel': termsLabel,\n    'models/Taxonomy': Taxonomy,\n    'models/Term': Term,\n    'utils/sortTaxonomies': sortTaxonomies,\n    'utils/sortTerms': sortTerms,\n    'utils/termToIdentifier': termToIdentifier,\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Dropdown'];","import {Vnode} from 'mithril';\nimport app from 'flarum/forum/app';\nimport Component, {ComponentAttrs} from 'flarum/common/Component';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport Button from 'flarum/common/components/Button';\nimport Dropdown from 'flarum/common/components/Dropdown';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Term from '../../common/models/Term';\nimport Taxonomy from '../../common/models/Taxonomy';\n\ninterface TaxonomyDropdownAttrs extends ComponentAttrs {\n    taxonomy: Taxonomy\n    onchange: (term: Term) => void\n    activeTermSlug?: string\n}\n\nexport default class TaxonomyDropdown extends Component<TaxonomyDropdownAttrs> {\n    termsInitialized: boolean = false;\n    terms: Term[] | null = null;\n\n    oninit(vnode: Vnode<TaxonomyDropdownAttrs>) {\n        super.oninit(vnode);\n\n        // If a term is active while the component inits, we're probably loading a page with pre-loaded filters\n        // We could retrieve the term from the store if it is present on discussion results\n        // But it's unreliable since a page with no results wouldn't have it but we want to show the term in the dropdown\n        if (this.attrs.activeTermSlug) {\n            this.loadTerms();\n        }\n    }\n\n    loadTerms() {\n        if (this.termsInitialized) {\n            return;\n        }\n\n        this.termsInitialized = true;\n\n        app.request<ApiPayloadPlural>({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiTermsEndpoint(),\n        }).then(result => {\n            this.terms = app.store.pushPayload<Term[]>(result);\n\n            this.terms.forEach(term => {\n                term.pushData({\n                    relationships: {\n                        taxonomy: this.attrs.taxonomy,\n                    },\n                });\n            });\n\n            m.redraw();\n        });\n    }\n\n    view() {\n        let activeTerm = this.terms && this.terms.find(t => t.slug() === this.attrs.activeTermSlug);\n\n        return Dropdown.component({\n            buttonClassName: 'Button',\n            label: this.attrs.taxonomy.name() + (activeTerm ? ': ' + activeTerm.name() : ''),\n            onshow: () => {\n                this.loadTerms();\n            },\n        }, this.terms === null ? [\n            LoadingIndicator.component(),\n        ] : this.terms.map(term => {\n            const active = this.attrs.activeTermSlug === term.slug();\n\n            return Button.component({\n                icon: active ? 'fas fa-check' : true,\n                onclick: () => this.attrs.onchange(term),\n                active, // Remove after https://github.com/flarum/core/issues/2265\n            }, term.name());\n        }) as any);\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/UserPage'];","import {Vnode} from 'mithril';\nimport UserPage from 'flarum/forum/components/UserPage';\nimport sortTaxonomies from '../../common/utils/sortTaxonomies';\nimport termsLabel from '../../common/helpers/termsLabel';\nimport Taxonomy from '../../common/models/Taxonomy';\nimport Term from '../../common/models/Term';\n\n// @ts-ignore UserPage.view not type-hinted\nexport default class UserTaxonomyPage extends UserPage {\n    oninit(vnode: Vnode<any, this>) {\n        super.oninit(vnode);\n\n        this.loadUser(m.route.param('username'));\n    }\n\n    content() {\n        const terms: Term[] = this.user.taxonomyTerms();\n\n        if (!terms || !terms.length) {\n            return null;\n        }\n\n        const taxonomies: Taxonomy[] = [];\n\n        terms.forEach(term => {\n            const taxonomy = term.taxonomy();\n\n            if (taxonomy && taxonomies.indexOf(taxonomy) === -1) {\n                taxonomies.push(taxonomy);\n            }\n        });\n\n        return sortTaxonomies(taxonomies).map(taxonomy => [\n            m('h2', taxonomy.name()),\n            termsLabel(terms.filter(term => term.taxonomy() === taxonomy), {userLink: true}),\n        ]);\n    }\n}\n","import Taxonomy from '../../common/models/Taxonomy';\n\nexport default function (type: string) {\n    return (t: Taxonomy) => t.type() === type && t.canSearch() && t.showFilter();\n}\n","import TaxonomyDropdown from './components/TaxonomyDropdown';\nimport UserTaxonomyPage from './components/UserTaxonomyPage';\nimport showsFilterFor from './utils/showsFilterFor';\n\nexport const forum = {\n    'components/TaxonomyDropdown': TaxonomyDropdown,\n    'components/UserTaxonomyPage': UserTaxonomyPage,\n    'utils/showsFilterFor': showsFilterFor,\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionComposer'];","import app from 'flarum/forum/app';\nimport {extend, override} from 'flarum/common/extend';\nimport DiscussionComposer from 'flarum/forum/components/DiscussionComposer';\nimport icon from 'flarum/common/helpers/icon';\nimport ChooseTaxonomyTermsModal from '../common/components/ChooseTaxonomyTermsModal';\nimport termsLabel from '../common/helpers/termsLabel';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport termToIdentifier from '../common/utils/termToIdentifier';\nimport Term from '../common/models/Term';\nimport Taxonomy from '../common/models/Taxonomy';\n\nfunction applies(taxonomy: Taxonomy, instance: DiscussionComposer): boolean {\n    if (!app.forum.attribute('canUseTaxonomiesOnNewDiscussion')) {\n        return false;\n    }\n\n    if (taxonomy.tagIds().length === 0) {\n        return true;\n    }\n\n    const selectedTags = instance.composer.fields.tags;\n\n    // While no tags have been selected in the composer, don't show any scoped taxonomy\n    if (!Array.isArray(selectedTags)) {\n        return false;\n    }\n\n    // Show scoped taxonomies if one of their tag has been selected in the composer\n    return selectedTags.some(tag => {\n        return taxonomy.tagIds().indexOf(tag.id()) !== -1;\n    });\n}\n\nexport default function () {\n    extend(DiscussionComposer.prototype, 'oninit', function () {\n        this.selectedTaxonomyTerms = {};\n    });\n\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            const taxonomyId = taxonomy.id();\n\n            if (taxonomy.type() !== 'discussions' || !taxonomyId) {\n                return;\n            }\n\n            if (!applies(taxonomy, this)) {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), m('a.DiscussionComposer-changeTaxonomies', {\n                    onclick: () => {\n                        app.modal.show(ChooseTaxonomyTermsModal, {\n                            taxonomy,\n                            selectedTerms: (this.selectedTaxonomyTerms[taxonomyId] || []).slice(0),\n                            onsubmit: (terms: Term[]) => {\n                                this.selectedTaxonomyTerms[taxonomy.id()!] = terms;\n                                this.$('textarea').trigger('focus');\n                            },\n                        });\n                    },\n                }, this.selectedTaxonomyTerms[taxonomyId] && this.selectedTaxonomyTerms[taxonomyId].length\n                    ? termsLabel(this.selectedTaxonomyTerms[taxonomyId], {\n                        taxonomy,\n                    })\n                    : m('span.TaxonomyLabel.untagged', [\n                        taxonomy.icon() ? [icon(taxonomy.icon()), ' '] : null,\n                        app.translator.trans('flamarkt-taxonomies.forum.composer.choose', {\n                            taxonomy: taxonomy.name(),\n                        }),\n                    ])\n            ), 9); // Tags uses 10, we add ours right to the tagson the right of the tags\n        });\n    });\n\n    override(DiscussionComposer.prototype, 'onsubmit', function (original) {\n        // Zero timeout to change the execution thread and let the modal close in TagDiscussionModal / ChooseTaxonomyTermsModal\n        // before we try opening another one\n        const callbacks: ((resolve: () => void) => void)[] = [];\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            const taxonomyId = taxonomy.id();\n\n            if (taxonomy.type() !== 'discussions' || !taxonomyId) {\n                return;\n            }\n\n            if (!applies(taxonomy, this)) {\n                return;\n            }\n\n            const count = (this.selectedTaxonomyTerms[taxonomyId] || []).length;\n\n            if (taxonomy.minTerms() && count < taxonomy.minTerms()) {\n                callbacks.push(resolve => {\n                    app.modal.show(ChooseTaxonomyTermsModal, {\n                        taxonomy,\n                        selectedTags: (this.selectedTaxonomyTerms[taxonomyId] || []).slice(0),\n                        onsubmit: (terms: Term[]) => {\n                            this.selectedTaxonomyTerms[taxonomyId] = terms;\n                            resolve();\n                        },\n                    });\n                });\n            }\n        });\n\n        if (callbacks.length) {\n            const callNextCallback = () => {\n                if (!callbacks.length) {\n                    original();\n\n                    return;\n                }\n\n                new Promise(callbacks.shift() as any).then(() => {\n                    // We give time for the modal to close before opening another one\n                    // Opening a different modal without closing the first one is very difficult because app.modal.show\n                    // Would have to be called in the same thread that just called app.modal.close and it's very difficult\n                    // We also apply that delay after our last modal in case Tags' modal shows up after ours\n                    setTimeout(() => {\n                        callNextCallback();\n                    }, 400); // 300ms is bootstrap's default Modal.TRANSITION_DURATION and we add a bit of delay\n                });\n            }\n\n            if (app.modal.modal) {\n                // In case Tags' modal is currently visible (their override ran before ours) we wait for it to close\n                // We have no other option because our override is called from TagDiscussionModal.props.onsubmit\n                // at which point app.modal.close has not been called yet\n                setTimeout(() => {\n                    callNextCallback();\n                }, 400);\n            } else {\n                callNextCallback();\n            }\n        } else {\n            original();\n        }\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        const taxonomyData: any[] = [];\n\n        // We put all term IDs from all taxonomies together for the request\n        (app.forum.taxonomies() || []).forEach(taxonomy => {\n            const taxonomyId = taxonomy.id();\n\n            if (taxonomy.type() !== 'discussions' || !taxonomyId) {\n                return;\n            }\n\n            if (!applies(taxonomy, this)) {\n                return;\n            }\n\n            if (this.selectedTaxonomyTerms[taxonomyId] && this.selectedTaxonomyTerms[taxonomyId].length) {\n                taxonomyData.push({\n                    verbatim: true, // Flarum workaround, defined in flamarkt/core\n                    type: 'flamarkt-taxonomies',\n                    id: taxonomyId,\n                    relationships: {\n                        terms: {\n                            data: this.selectedTaxonomyTerms[taxonomyId].map(termToIdentifier),\n                        },\n                    },\n                });\n            }\n        });\n\n        data.relationships = data.relationships || {};\n        data.relationships.taxonomies = taxonomyData;\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport Button from 'flarum/common/components/Button';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Discussion from 'flarum/common/models/Discussion';\nimport ChooseTaxonomyTermsModal from '../common/components/ChooseTaxonomyTermsModal';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\n\nfunction addControls(items: ItemList<any>, discussion: Discussion) {\n    if (!discussion.attribute('canEditTaxonomies')) {\n        return;\n    }\n\n    sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n        if (taxonomy.type() !== 'discussions') {\n            return;\n        }\n\n        if (taxonomy.tagIds().length) {\n            if (!('flarum-tags' in flarum.extensions)) {\n                return;\n            }\n\n            const tags = discussion.tags();\n\n            // This probably would not happen regularly, but we make sure to not crash the app in case it does\n            if (!Array.isArray(tags)) {\n                return;\n            }\n\n            if (!tags.some(tag => {\n                return taxonomy.tagIds().indexOf(tag.id()) !== -1;\n            })) {\n                return;\n            }\n        }\n\n        items.add('taxonomy-' + taxonomy.slug(), Button.component({\n            icon: 'fas fa-tag',\n            onclick: () => app.modal.show(ChooseTaxonomyTermsModal, {\n                resource: discussion,\n                taxonomy,\n            }),\n        }, app.translator.trans('flamarkt-taxonomies.forum.discussion.edit', {\n            taxonomy: taxonomy.name(),\n        })));\n    });\n}\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        addControls(items, discussion);\n    });\n\n    if ('v17development/blog/components/BlogPostController' in flarum.core.compat) {\n        extend(flarum.core.compat['v17development/blog/components/BlogPostController'].prototype, 'manageArticleButtons', function (items) {\n            addControls(items, this.attrs.article);\n        });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/IndexPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/DiscussionListState'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/GlobalSearchState'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionListItem'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionHero'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-core']||{})['forum']||{})['layouts/ProductIndexLayout'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-core']||{})['forum']||{})['pages/ProductIndexPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/UserControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LinkButton'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Forum'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/User'];","const __WEBPACK_NAMESPACE_OBJECT__ = ((flarum.extensions['flamarkt-core']||{})['common']||{})['models/Product'];","import app from 'flarum/forum/app';\nimport {common} from '../common/compat';\nimport {forum} from './compat';\nimport addBlogContent from './addBlogContent';\nimport addComposerControls from './addComposerControls';\nimport addDiscussionControls from './addDiscussionControls';\nimport addIndexFilters from './addIndexFilters';\nimport addLabels from './addLabels';\nimport addPages from './addPages';\nimport addProductFilters from './addProductFilters';\nimport addUserControls from './addUserControls';\nimport addModels from '../common/addModels';\nimport addUserDirectorySearchType from './addUserDirectorySearchType';\n\nexport {\n    common,\n    forum,\n};\n\napp.initializers.add('flamarkt-taxonomies', () => {\n    addBlogContent();\n    addComposerControls();\n    addDiscussionControls();\n    addIndexFilters();\n    addLabels();\n    addPages();\n    addProductFilters();\n    addUserControls();\n    addModels();\n    addUserDirectorySearchType();\n});\n","import {extend} from 'flarum/common/extend';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport app from 'flarum/forum/app';\nimport labelsFromMultipleTaxonomiesList from '../common/helpers/labelsFromMultipleTaxonomiesList';\n\nexport default function () {\n    if ('v17development/blog/components/BlogItemSidebar' in flarum.core.compat) {\n        extend(flarum.core.compat['v17development/blog/components/BlogItemSidebar'].prototype, 'items', function (items: ItemList<any>) {\n            // All items have the same priority in the original extension, so we'll move author even more to the top so we can squeeze below it\n            // Same code and priority as in clarkwinkelmann-discussion-lists\n            items.setPriority('author', 50);\n            items.setPriority('categories', 30);\n\n            const {article} = this.attrs;\n\n            if (!article) {\n                return;\n            }\n\n            const terms = article.taxonomyTerms();\n\n            if (terms && terms.length) {\n                items.add('taxonomies', m('.BlogTaxonomies.BlogSideWidget', [\n                    m('h3', app.translator.trans('flamarkt-taxonomies.forum.blog.widget.title')),\n                    m('.BlogTaxonomiesContainer', labelsFromMultipleTaxonomiesList(terms, {discussionLink: true})),\n                ]), 29);\n            }\n        });\n    }\n}\n","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport IndexPage from 'flarum/forum/components/IndexPage';\nimport DiscussionListState from 'flarum/forum/states/DiscussionListState';\nimport GlobalSearchState from 'flarum/forum/states/GlobalSearchState';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport TaxonomyDropdown from './components/TaxonomyDropdown';\nimport Term from '../common/models/Term';\nimport showsFilterFor from './utils/showsFilterFor';\n\nexport default function () {\n    extend(IndexPage.prototype, 'viewItems', function (items) {\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('discussions')).forEach(taxonomy => {\n            // If the taxonomy is not scoped, or if it's scoped to more than 1 tag, show the filter all the time\n            // Only filters for one specific tag will be hidden by default\n            if (taxonomy.tagIds().length === 1 && ('flarum-tags' in flarum.extensions)) {\n                const tag = this.currentTag();\n\n                if (!tag) {\n                    return;\n                }\n\n                if (taxonomy.tagIds().indexOf(tag.id()) === -1) {\n                    const parent = tag.parent();\n\n                    if (!parent) {\n                        return;\n                    }\n\n                    if (taxonomy.tagIds().indexOf(parent.id()) === -1) {\n                        return;\n                    }\n                }\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), TaxonomyDropdown.component({\n                taxonomy,\n                activeTermSlug: app.search.params()[taxonomy.slug()],\n                onchange: (term: Term) => {\n                    const params = app.search.params();\n\n                    const currentFilterForTaxonomy = params[taxonomy.slug()];\n\n                    if (term.slug() === currentFilterForTaxonomy) {\n                        delete params[taxonomy.slug()];\n                    } else {\n                        params[taxonomy.slug()] = term.slug();\n                    }\n\n                    // @ts-ignore Flarum injects routeName as a page attr but this isn't type-hinted anywhere\n                    const {routeName} = this.attrs;\n\n                    m.route.set(app.route(routeName, params));\n                },\n            }));\n        });\n    });\n\n    extend(GlobalSearchState.prototype, 'stickyParams', function (params) {\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('discussions')).forEach(taxonomy => {\n            params[taxonomy.slug()] = m.route.param(taxonomy.slug());\n        });\n    });\n\n    extend(DiscussionListState.prototype, 'requestParams', function (params: any) {\n        // Include the taxonomies when navigating to the discussion list\n        // Same includes are pre-loaded in DiscussionAttributes.php\n        params.include.push('taxonomyTerms', 'taxonomyTerms.taxonomy');\n\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('discussions')).forEach(taxonomy => {\n            const filterTermSlug = this.params[taxonomy.slug()];\n\n            if (filterTermSlug) {\n                if (params.filter.q) {\n                    params.filter.q = (params.filter.q || '') + ' taxonomy:' + taxonomy.slug() + ':' + filterTermSlug;\n                } else {\n                    params.filter.taxonomy = (params.filter.taxonomy || {});\n                    params.filter.taxonomy[taxonomy.slug()] = filterTermSlug;\n                }\n            }\n        });\n    });\n}\n","import {extend} from 'flarum/common/extend';\nimport DiscussionListItem from 'flarum/forum/components/DiscussionListItem';\nimport DiscussionHero from 'flarum/forum/components/DiscussionHero';\nimport labelsFromMultipleTaxonomiesList from '../common/helpers/labelsFromMultipleTaxonomiesList';\n\nexport default function () {\n    extend(DiscussionListItem.prototype, 'infoItems', function (items) {\n        const terms = this.attrs.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', labelsFromMultipleTaxonomiesList(terms), 10);\n        }\n    });\n\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        const terms = this.attrs.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', labelsFromMultipleTaxonomiesList(terms, {discussionLink: true}), 5);\n        }\n    });\n}\n","import app from 'flarum/forum/app';\nimport UserTaxonomyPage from './components/UserTaxonomyPage';\n\nexport default function () {\n    app.routes.flamarktTaxonomiesUser = {\n        path: '/u/:username/taxonomies',\n        component: UserTaxonomyPage,\n    };\n\n    app.route.flamarktTaxonomiesUser = user => {\n        return app.route('flamarktTaxonomiesUser', {\n            username: user.username(),\n        });\n    };\n}\n","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport ProductIndexLayout from 'flamarkt/core/forum/layouts/ProductIndexLayout';\nimport ProductIndexPage from 'flamarkt/core/forum/pages/ProductIndexPage';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport TaxonomyDropdown from './components/TaxonomyDropdown';\nimport Term from '../common/models/Term';\nimport showsFilterFor from './utils/showsFilterFor';\n\nexport default function () {\n    if (!ProductIndexLayout || !ProductIndexPage) {\n        return;\n    }\n\n    extend(ProductIndexLayout.prototype, 'filters', function (items) {\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('products')).forEach(taxonomy => {\n            items.add('taxonomy-' + taxonomy.slug(), TaxonomyDropdown.component({\n                taxonomy,\n                activeTermSlug: m.route.param()[taxonomy.slug()],\n                onchange: (term: Term) => {\n                    const params = {...m.route.param()};\n\n                    delete params.key;\n\n                    const currentFilterForTaxonomy = params[taxonomy.slug()];\n\n                    if (term.slug() === currentFilterForTaxonomy) {\n                        delete params[taxonomy.slug()];\n                    } else {\n                        params[taxonomy.slug()] = term.slug();\n                    }\n\n                    // @ts-ignore\n                    const {routeName} = app.current.data;\n\n                    //TODO: also apply to the filters. Right now it's just the URL that changes\n                    m.route.set(app.route(routeName, params));\n                },\n            }));\n        });\n    });\n\n    extend(ProductIndexPage.prototype, 'initState', function (state) {\n        const params = m.route.param();\n\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('products')).forEach(taxonomy => {\n            const filterTermSlug = params[taxonomy.slug()];\n\n            if (filterTermSlug) {\n                // Same implementation as addIndexFilters()\n                state.params.q = (state.params.q || '') + ' taxonomy:' + taxonomy.slug() + ':' + filterTermSlug;\n            }\n        });\n    });\n}\n","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport UserControls from 'flarum/forum/utils/UserControls';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport User from 'flarum/common/models/User';\nimport Button from 'flarum/common/components/Button';\nimport UserPage from 'flarum/forum/components/UserPage';\nimport LinkButton from 'flarum/common/components/LinkButton';\nimport ChooseTaxonomyTermsModal from '../common/components/ChooseTaxonomyTermsModal';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\n\nexport default function () {\n    extend(UserControls, 'userControls', function (items: ItemList<any>, user: User) {\n        if (!user.attribute('canEditTaxonomies')) {\n            return;\n        }\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'users') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), Button.component({\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(ChooseTaxonomyTermsModal, {\n                    resource: user,\n                    taxonomy,\n                }),\n            }, app.translator.trans('flamarkt-taxonomies.forum.user.edit', {\n                taxonomy: taxonomy.name(),\n            })));\n        });\n    });\n\n    extend(UserPage.prototype, 'navItems', function (items) {\n        const userTaxonomiesExist = sortTaxonomies(app.forum.taxonomies()).some(taxonomy => {\n            return taxonomy.type() === 'users';\n        });\n\n        if (!userTaxonomiesExist) {\n            return;\n        }\n\n        items.add(\n            'taxonomies',\n            LinkButton.component({\n                href: app.route.flamarktTaxonomiesUser(this.user),\n                icon: 'fas fa-tags',\n            }, app.translator.trans('flamarkt-taxonomies.forum.user.nav')),\n            120\n        );\n    });\n}\n","import app from 'flarum/common/app';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Forum from 'flarum/common/models/Forum';\nimport User from 'flarum/common/models/User';\nimport Model from 'flarum/common/Model';\nimport Product from 'flamarkt/core/common/models/Product';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\n\nexport default function () {\n    app.store.models['flamarkt-taxonomies'] = Taxonomy;\n    app.store.models['flamarkt-taxonomy-terms'] = Term;\n\n    Forum.prototype.taxonomies = Model.hasMany('taxonomies');\n    Discussion.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    User.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n\n    if (Product) {\n        Product.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    }\n}\n","import app from 'flarum/forum/app';\nimport {ApiPayloadPlural} from 'flarum/common/Store';\nimport {extend} from 'flarum/common/extend';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Taxonomy from '../common/models/Taxonomy';\nimport Term from '../common/models/Term';\nimport showsFilterFor from './utils/showsFilterFor';\n\nexport default function () {\n    // Verify User Directory is enabled and exports all the classes we need\n    if (\n        !flarum.extensions['fof-user-directory'] ||\n        !flarum.extensions['fof-user-directory'].searchTypes ||\n        !flarum.extensions['fof-user-directory'].searchTypes.AbstractType ||\n        !flarum.extensions['fof-user-directory'].components ||\n        !flarum.extensions['fof-user-directory'].components.SearchField\n    ) {\n        return;\n    }\n\n    // Class must be defined here because it needs to extend the base class\n    // Which might not be available yet when imports are resolved\n    class TaxonomyTermType extends flarum.extensions['fof-user-directory'].searchTypes.AbstractType {\n        allTerms: Term[] | null = null\n        loadingAllTermsPromise: Promise<any> | null = null\n        loading: boolean = false\n        suggestions: Term[] = []\n\n        resourceType() {\n            return 'flamarkt-taxonomy-terms';\n        }\n\n        search(query: string) {\n            this.loading = true;\n\n            this.loadTerms().then(() => {\n                this.loading = false;\n                this.suggestions = [];\n\n                if (!query) {\n                    m.redraw();\n\n                    return;\n                }\n\n                query = query.toLowerCase();\n\n                this.allTerms!.forEach(term => {\n                    if (term.name().toLowerCase().indexOf(query) !== -1) {\n                        this.suggestions.push(term);\n                    }\n                });\n\n                m.redraw();\n            });\n        }\n\n        loadTerms() {\n            if (this.loadingAllTermsPromise) {\n                return this.loadingAllTermsPromise;\n            }\n\n            if (this.allTerms !== null) {\n                return Promise.resolve(null);\n            }\n\n            this.allTerms = [];\n\n            const promises: Promise<void>[] = [];\n\n            app.store.all<Taxonomy>('flamarkt-taxonomies').filter(showsFilterFor('users')).forEach(taxonomy => {\n                promises.push(app.request<ApiPayloadPlural>({\n                    method: 'GET',\n                    url: app.forum.attribute('apiUrl') + taxonomy.apiEndpoint() + '/terms',\n                }).then(result => {\n                    const terms = app.store.pushPayload<Term[]>(result);\n\n                    terms.forEach(term => {\n                        term.pushData({\n                            relationships: {\n                                taxonomy,\n                            },\n                        });\n                    });\n\n                    this.allTerms!.push(...terms);\n                }));\n            });\n\n            this.loadingAllTermsPromise = Promise.all(promises);\n\n            return this.loadingAllTermsPromise!.then(() => {\n                this.loadingAllTermsPromise = null;\n            });\n        }\n\n        renderKind(term: Term) {\n            const taxonomy = term.taxonomy();\n\n            return taxonomy && taxonomy.name();\n        }\n\n        renderLabel(term: Term) {\n            return m('.UserDirectorySearchLabel', term.color() ? {\n                className: 'colored',\n                style: {\n                    backgroundColor: term.color(),\n                },\n            } : {}, [\n                term.icon() ? [\n                    icon(term.icon()),\n                    ' ',\n                ] : null,\n                term.name(),\n            ]);\n        }\n\n        applyFilter(params: any, resource: any) {\n            params.q = params.q ? params.q + ' ' : '';\n            params.q += 'taxonomy:' + resource.taxonomy().slug() + ':' + resource.slug();\n        }\n\n        initializeFromParams(params: any) {\n            if (!params.q) {\n                return Promise.resolve([]);\n            }\n\n            const gambits: string[] = (params.q as string).split(' ').filter(word => word.indexOf('taxonomy:') === 0);\n\n            if (!gambits.length) {\n                return Promise.resolve([]);\n            }\n\n            return this.loadTerms().then(() => {\n                const terms: Term[] = [];\n\n                gambits.forEach(gambit => {\n                    const parts = gambit.split(':');\n\n                    if (parts.length < 3) {\n                        return;\n                    }\n\n                    const term = this.allTerms!.find(t => t.slug() === parts[2] && t.taxonomy().slug() === parts[1]);\n\n                    if (term) {\n                        terms.push(term);\n                    }\n                });\n\n                return terms;\n            });\n        }\n    }\n\n    extend(flarum.extensions['fof-user-directory'].components.SearchField.prototype, 'filterTypes', function (items: ItemList<any>) {\n        items.add('flamarkt-taxonomies', new TaxonomyTermType(), 15);\n    });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","create","constructor","extensions","Term","name","Model","slug","description","color","icon","order","createdAt","taxonomy","apiEndpoint","this","exists","data","id","taxonomyIcon","term","attrs","settings","hasIcon","useColor","className","classList","style","backgroundColor","m","termLabel","discussionLink","extract","userLink","tagText","app","tag","showFilter","title","href","config","route","q","_extends","assign","target","i","arguments","length","source","apply","attributes","ChooseTaxonomyTermsModal","availableTerms","selectedTerms","searchFilter","activeListIndex","inputIsFocused","saving","bypassReqs","navigator","oninit","vnode","forEach","addTerm","bind","resource","taxonomyTerms","method","url","then","result","redraw","KeyboardNavigatable","onUp","setIndex","onDown","onSelect","select","onRemove","toggleTerm","when","event","preventDefault","indexInSelectedTerms","findIndex","t","b","type","push","removeTerm","index","splice","displayName","getInstruction","count","minTerms","remaining","filteredAvailableTerms","filter","toLowerCase","substr","allowCustomValues","some","validation","customValueValidation","regex","indexOf","parts","split","RegExp","test","maxTerms","content","contentItems","toArray","items","ItemList","add","viewForm","listAvailableTerms","canBypassTermCounts","Switch","state","onchange","checked","formItems","inputItems","Button","disabled","loading","map","onclick","onready","placeholder","extractText","oninput","onkeydown","navigate","onfocus","oninputfocus","onblur","oninputblur","terms","LoadingIndicator","listAvailableTerm","colored","selected","active","onmouseover","highlight","setTimeout","e","$element","getDomElement","metaKey","ctrlKey","is","onsubmit","dispatchEvent","Event","$","scrollToItem","$dropdown","indexLength","$item","scrollTop","dropdownScroll","dropdownTop","offset","top","dropdownBottom","outerHeight","itemTop","itemBottom","parseInt","css","stop","animate","saveResource","save","relationships","taxonomies","verbatim","termToIdentifier","onsaved","onerror","DiscussionPage","update","Modal","ChooseTaxonomyTermsDropdown","lastSaveState","dropdownIsFocused","onmousedown","oncreate","element","dom","dropdown","querySelector","contains","document","addEventListener","onbeforeremove","onremove","removeEventListener","view","remove","status","slice","sort","termsLabel","children","showLabel","sortTerms","sortTaxonomies","Taxonomy","customValueSlugger","canSearch","tagIds","apiOrderEndpoint","apiTermsEndpoint","common","labelsFromMultipleTaxonomiesList","TaxonomyDropdown","termsInitialized","activeTermSlug","loadTerms","pushData","activeTerm","find","Dropdown","buttonClassName","label","onshow","Component","UserTaxonomyPage","loadUser","param","user","UserPage","forum","showsFilterFor","applies","instance","selectedTags","composer","fields","tags","Array","isArray","addControls","discussion","attribute","extend","setPriority","article","DiscussionComposer","selectedTaxonomyTerms","taxonomyId","trigger","override","original","callbacks","resolve","callNextCallback","Promise","shift","taxonomyData","DiscussionControls","IndexPage","currentTag","parent","component","params","currentFilterForTaxonomy","routeName","set","GlobalSearchState","DiscussionListState","include","filterTermSlug","DiscussionListItem","DiscussionHero","path","username","ProductIndexLayout","ProductIndexPage","UserControls","LinkButton","Forum","Discussion","User","Product","searchTypes","AbstractType","components","SearchField","TaxonomyTermType","allTerms","loadingAllTermsPromise","suggestions","resourceType","search","query","promises","all","renderKind","renderLabel","applyFilter","initializeFromParams","gambits","word","gambit","addUserDirectorySearchType"],"sourceRoot":""}