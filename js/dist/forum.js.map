{"version":3,"sources":["webpack://@flamarkt/taxonomies/webpack/bootstrap","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/Model']\"","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/extend']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/Button']\"","webpack://@flamarkt/taxonomies/./src/common/utils/sortTaxonomies.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/LoadingIndicator']\"","webpack://@flamarkt/taxonomies/./src/common/helpers/taxonomyIcon.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/extract']\"","webpack://@flamarkt/taxonomies/./src/common/utils/KeyboardNavigatable.ts","webpack://@flamarkt/taxonomies/./src/common/components/ChooseTaxonomyTermsModal.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/extractText']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/classList']\"","webpack://@flamarkt/taxonomies/./src/common/models/Term.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/termLabel.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/helpers/icon']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/Modal']\"","webpack://@flamarkt/taxonomies/./src/common/utils/termToIdentifier.ts","webpack://@flamarkt/taxonomies/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/utils/ItemList']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/LinkButton']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/Component']\"","webpack://@flamarkt/taxonomies/./src/common/utils/sortTerms.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/models/Discussion']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/models/Forum']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/models/User']\"","webpack://@flamarkt/taxonomies/external \"flarum.extensions['flamarkt-core']['common']['models/Product']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/helpers/highlight']\"","webpack://@flamarkt/taxonomies/./src/common/models/Taxonomy.ts","webpack://@flamarkt/taxonomies/./src/common/addModels.ts","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/components/DiscussionComposer']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/components/UserPage']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/components/IndexPage']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/states/DiscussionListState']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/states/GlobalSearchState']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['common/components/Dropdown']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/components/DiscussionListItem']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/components/DiscussionHero']\"","webpack://@flamarkt/taxonomies/external \"flarum.extensions['flamarkt-core']['forum']['layouts/ProductIndexLayout']\"","webpack://@flamarkt/taxonomies/external \"flarum.extensions['flamarkt-core']['forum']['pages/ProductIndexPage']\"","webpack://@flamarkt/taxonomies/external \"flarum.core.compat['forum/utils/UserControls']\"","webpack://@flamarkt/taxonomies/./src/common/helpers/termsLabel.ts","webpack://@flamarkt/taxonomies/./src/forum/components/TaxonomyDropdown.ts","webpack://@flamarkt/taxonomies/./src/forum/utils/showsFilterFor.ts","webpack://@flamarkt/taxonomies/./src/common/helpers/labelsFromMultipleTaxonomiesList.ts","webpack://@flamarkt/taxonomies/./src/forum/components/UserTaxonomyPage.ts","webpack://@flamarkt/taxonomies/./src/forum/index.ts","webpack://@flamarkt/taxonomies/./src/forum/addComposerControls.ts","webpack://@flamarkt/taxonomies/./src/forum/addDiscussionControls.ts","webpack://@flamarkt/taxonomies/./src/forum/addIndexFilters.ts","webpack://@flamarkt/taxonomies/./src/forum/addLabels.ts","webpack://@flamarkt/taxonomies/./src/forum/addPages.ts","webpack://@flamarkt/taxonomies/./src/forum/addProductFilters.ts","webpack://@flamarkt/taxonomies/./src/forum/addUserControls.ts","webpack://@flamarkt/taxonomies/./src/forum/addUserDirectorySearchType.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_setPrototypeOf","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","constructor","taxonomies","slice","sort","a","b","order","taxonomyIcon","term","attrs","settings","hasIcon","icon","useColor","className","classList","style","color","backgroundColor","KeyboardNavigatable","callbacks","Map","whenCallback","event","onUp","callback","this","set","e","preventDefault","onDown","onSelect","handler","onCancel","stopPropagation","onRemove","target","selectionStart","selectionEnd","when","bindTo","$element","on","navigate","keyCallback","which","ChooseTaxonomyTermsModal","availableTerms","selectedTerms","searchFilter","activeListIndex","inputIsFocused","saving","navigator","oninit","vnode","forEach","addTerm","resource","taxonomyTerms","taxonomy","id","app","request","method","url","forum","attribute","apiEndpoint","then","result","store","pushPayload","redraw","setIndex","select","length","toggleTerm","indexInSelectedTerms","findIndex","data","type","push","removeTerm","index","splice","title","translator","trans","displayName","getInstruction","count","minTerms","remaining","filteredAvailableTerms","filter","toLowerCase","substr","allowCustomValues","some","validation","customValueValidation","regex","indexOf","parts","split","RegExp","test","createRecord","attributes","maxTerms","content","viewForm","listAvailableTerms","description","formItems","toArray","items","ItemList","add","inputItems","Button","component","disabled","loading","map","onclick","onready","termLabel","placeholder","extractText","oninput","onkeydown","onfocus","oninputfocus","onblur","oninputblur","terms","LoadingIndicator","listAvailableTerm","colored","selected","active","onmouseover","exists","highlight","setTimeout","getDomElement","metaKey","ctrlKey","is","onsubmit","dispatchEvent","Event","$","scrollToItem","$dropdown","indexLength","$item","scrollTop","dropdownScroll","dropdownTop","offset","top","dropdownBottom","outerHeight","itemTop","itemBottom","parseInt","css","stop","animate","saveResource","modal","close","save","relationships","verbatim","termToIdentifier","onsaved","onerror","DiscussionPage","current","matches","update","Modal","Term","Model","slug","createdAt","transformDate","hasOne","discussionLink","extract","userLink","tagText","tag","showFilter","href","route","config","routes","fof_user_directory","q","getIdentifier","_extends","assign","arguments","source","apply","extensions","Taxonomy","showLabel","customValueSlugger","canSearch","apiOrderEndpoint","apiTermsEndpoint","models","Forum","hasMany","Discussion","User","Product","tagsLabel","children","sortTerms","TaxonomyDropdown","termsInitialized","activeTermSlug","loadTerms","pushData","view","activeTerm","find","Dropdown","buttonClassName","label","onshow","onchange","Component","sortTaxonomies","termsLabel","UserTaxonomyPage","loadUser","param","user","UserPage","initializers","extend","DiscussionComposer","selectedTaxonomyTerms","show","trigger","override","original","resolve","selectedTags","callNextCallback","Promise","shift","taxonomyData","DiscussionControls","discussion","IndexPage","all","showsFilterFor","search","params","currentFilterForTaxonomy","routeName","GlobalSearchState","DiscussionListState","include","filterTermSlug","DiscussionListItem","labelsFromMultipleTaxonomiesList","DiscussionHero","flamarktTaxonomiesUser","path","username","ProductIndexLayout","ProductIndexPage","state","UserControls","LinkButton","addModels","searchTypes","AbstractType","components","SearchField","TaxonomyTermType","allTerms","loadingAllTermsPromise","suggestions","resourceType","query","promises","renderKind","renderLabel","applyFilter","initializeFromParams","gambits","word","gambit","addUserDirectorySearchType"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 48);\n","module.exports = flarum.core.compat['common/Model'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","module.exports = flarum.core.compat['common/extend'];","module.exports = flarum.core.compat['common/components/Button'];","import Taxonomy from '../models/Taxonomy';\n\nexport default function (taxonomies: Taxonomy[] | false): Taxonomy[] {\n    // Special case for when retrieving an empty relationship from the store\n    if (taxonomies === false) {\n        taxonomies = [];\n    }\n\n    return taxonomies.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['common/components/LoadingIndicator'];","import classList from 'flarum/common/utils/classList';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\nimport {Attributes} from 'mithril';\n\ninterface Settings {\n    useColor?: boolean\n}\n\nexport default function taxonomyIcon(term: Taxonomy | Term, attrs: Attributes = {}, settings: Settings = {}) {\n    const hasIcon = term && term.icon();\n    const {useColor = true} = settings;\n\n    attrs.className = classList([\n        attrs.className,\n        'icon',\n        hasIcon ? term.icon() : 'TaxonomyIcon',\n    ]);\n\n    if (term) {\n        attrs.style = attrs.style || {};\n\n        if (hasIcon) {\n            attrs.style.color = useColor ? term.color() : '';\n        } else {\n            attrs.style.backgroundColor = term.color();\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return hasIcon ? m('i', attrs) : m('span', attrs);\n}\n","module.exports = flarum.core.compat['common/utils/extract'];","type KeyboardEventHandler = (event: KeyboardEvent) => void;\ntype ShouldHandle = (event: KeyboardEvent) => boolean;\n\n/**\n * Same as Flarum's, but in common namespace so we can use it in backoffice as wel\n */\nexport default class KeyboardNavigatable {\n    /**\n     * Callback to be executed for a specified input.\n     */\n    protected callbacks = new Map<number, KeyboardEventHandler>();\n\n    /**\n     * Callback that determines whether keyboard input should be handled.\n     * By default, always handle keyboard navigation.\n     */\n    protected whenCallback: ShouldHandle = (event: KeyboardEvent) => true;\n\n    /**\n     * Provide a callback to be executed when navigating upwards.\n     *\n     * This will be triggered by the Up key.\n     */\n    onUp(callback: KeyboardEventHandler): KeyboardNavigatable {\n        this.callbacks.set(38, (e) => {\n            e.preventDefault();\n            callback(e);\n        });\n\n        return this;\n    }\n\n    /**\n     * Provide a callback to be executed when navigating downwards.\n     *\n     * This will be triggered by the Down key.\n     */\n    onDown(callback: KeyboardEventHandler): KeyboardNavigatable {\n        this.callbacks.set(40, (e) => {\n            e.preventDefault();\n            callback(e);\n        });\n\n        return this;\n    }\n\n    /**\n     * Provide a callback to be executed when the current item is selected..\n     *\n     * This will be triggered by the Return and Tab keys..\n     */\n    onSelect(callback: KeyboardEventHandler): KeyboardNavigatable {\n        const handler: KeyboardEventHandler = (e) => {\n            e.preventDefault();\n            callback(e);\n        };\n\n        this.callbacks.set(9, handler);\n        this.callbacks.set(13, handler);\n\n        return this;\n    }\n\n    /**\n     * Provide a callback to be executed when the navigation is canceled.\n     *\n     * This will be triggered by the Escape key.\n     */\n    onCancel(callback: KeyboardEventHandler): KeyboardNavigatable {\n        this.callbacks.set(27, (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            callback(e);\n        });\n\n        return this;\n    }\n\n    /**\n     * Provide a callback to be executed when previous input is removed.\n     *\n     * This will be triggered by the Backspace key.\n     *\n     * @public\n     * @param {KeyboardNavigatable~keyCallback} callback\n     * @return {KeyboardNavigatable}\n     */\n    onRemove(callback: KeyboardEventHandler): KeyboardNavigatable {\n        this.callbacks.set(8, (e) => {\n            if (e.target.selectionStart === 0 && e.target.selectionEnd === 0) {\n                callback(e);\n                e.preventDefault();\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Provide a callback that determines whether keyboard input should be handled.\n     */\n    when(callback: ShouldHandle): KeyboardNavigatable {\n        this.whenCallback = callback;\n\n        return this;\n    }\n\n    /**\n     * Set up the navigation key bindings on the given jQuery element.\n     */\n    bindTo($element: JQuery) {\n        // Handle navigation key events on the navigatable element.\n        $element.on('keydown', this.navigate.bind(this));\n    }\n\n    /**\n     * Interpret the given keyboard event as navigation commands.\n     */\n    navigate(event: KeyboardEvent) {\n        // This callback determines whether keyboard should be handled or ignored.\n        if (!this.whenCallback(event)) return;\n\n        const keyCallback = this.callbacks.get(event.which);\n        if (keyCallback) {\n            keyCallback(event);\n        }\n    }\n}\n","import {Children, Vnode} from 'mithril';\nimport {ComponentAttrs} from 'flarum/common/Component';\nimport Modal from 'flarum/common/components/Modal';\nimport Model from 'flarum/common/Model';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport highlight from 'flarum/common/helpers/highlight';\nimport classList from 'flarum/common/utils/classList';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport extractText from 'flarum/common/utils/extractText';\n\nimport termLabel from '../helpers/termLabel';\nimport taxonomyIcon from '../helpers/taxonomyIcon';\nimport termToIdentifier from '../utils/termToIdentifier';\nimport Term from '../models/Term';\nimport Taxonomy from '../models/Taxonomy';\nimport KeyboardNavigatable from '../utils/KeyboardNavigatable';\n\n/**\n * Comparing objects directly is unreliable because we will be creating some new records as well\n * So we use this method to do a proper deep check\n */\nfunction isSameTerm(a: Term, b: Term) {\n    if (a.data.type !== b.data.type) {\n        return false;\n    }\n\n    // If both have an ID and it's different\n    if (a.id() && b.id()) {\n        return a.id() === b.id();\n    }\n\n    // If only one has an ID, it's different\n    if (!a.id() !== !b.id()) {\n        return false;\n    }\n\n    // If both don't have an ID, it's a new value and we compare the name\n    return a.name() === b.name();\n}\n\nexport interface ChooseTaxonomyTermsModalAttrs extends ComponentAttrs {\n    resource: Model\n    taxonomy: Taxonomy\n    selectedTerms: Term[]\n    onsubmit?: (terms: Term[]) => void\n}\n\n/**\n * Based on Flarum's TagDiscussionModal\n */\nexport default class ChooseTaxonomyTermsModal extends Modal {\n    availableTerms: Term[] | null = null;\n    selectedTerms: Term[] = [];\n    searchFilter: string = '';\n    activeListIndex: number = 0;\n    inputIsFocused: boolean = false;\n    saving: boolean = false;\n    navigator!: KeyboardNavigatable;\n\n    attrs!: ChooseTaxonomyTermsModalAttrs\n\n    oninit(vnode: Vnode<ChooseTaxonomyTermsModalAttrs, this>) {\n        super.oninit(vnode);\n\n        if (this.attrs.selectedTerms) {\n            this.attrs.selectedTerms.forEach(this.addTerm.bind(this));\n        } else if (this.attrs.resource) {\n            this.attrs.resource.taxonomyTerms().forEach((term: Term) => {\n                if (term.taxonomy().id() === this.attrs.taxonomy.id()) {\n                    this.addTerm(term);\n                }\n            });\n        }\n\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiEndpoint() + '/terms',\n        }).then(result => {\n            this.availableTerms = app.store.pushPayload(result);\n\n            m.redraw();\n        });\n\n        this.navigator = new KeyboardNavigatable();\n        this.navigator\n            .onUp(() => this.setIndex(this.activeListIndex - 1, true))\n            .onDown(() => this.setIndex(this.activeListIndex + 1, true))\n            .onSelect(this.select.bind(this))\n            .onRemove(() => {\n                if (!this.selectedTerms.length) {\n                    return;\n                }\n\n                this.toggleTerm(this.selectedTerms[this.selectedTerms.length - 1]);\n            })\n            .when(event => {\n                // We want to allow selecting with space because it's a common way to select\n                // However this interferes with the ability to enter spaces\n                // So we will have space act as select, but only if nothing is typed yet\n                if (event.key === ' ' && this.searchFilter === '') {\n                    event.preventDefault();\n                    this.select(event);\n\n                    return false;\n                }\n\n                return true;\n            });\n    }\n\n    indexInSelectedTerms(term: Term) {\n        return this.selectedTerms.findIndex(t => isSameTerm(t, term));\n    }\n\n    addTerm(term: Term) {\n        this.selectedTerms.push(term);\n    }\n\n    removeTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.selectedTerms.splice(index, 1);\n        }\n    }\n\n    className() {\n        return 'ChooseTaxonomyTermsModal';\n    }\n\n    title() {\n        return this.attrs.resource\n            ? app.translator.trans('flamarkt-taxonomies.lib.modal.title.edit', {\n                taxonomy: this.attrs.taxonomy.name(),\n                title: m('em', this.attrs.resource.title ? this.attrs.resource.title() : this.attrs.resource.displayName()),\n            })\n            : app.translator.trans('flamarkt-taxonomies.lib.modal.title.new', {\n                taxonomy: this.attrs.taxonomy.name(),\n            });\n    }\n\n    getInstruction() {\n        const count = this.selectedTerms.length;\n\n        if (this.attrs.taxonomy.minTerms() && count < this.attrs.taxonomy.minTerms()) {\n            const remaining = this.attrs.taxonomy.minTerms() - count;\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholder', {\n                count: remaining,\n            });\n        } else if (count === 0) {\n            return app.translator.trans('flamarkt-taxonomies.lib.modal.placeholderOptional');\n        }\n\n        return '';\n    }\n\n    filteredAvailableTerms() {\n        let availableTerms = this.availableTerms === null ? [] : this.availableTerms;\n        const filter = this.searchFilter.toLowerCase();\n\n        if (filter) {\n            availableTerms = availableTerms.filter(term => term.name().substr(0, filter.length).toLowerCase() === filter);\n\n            if (\n                this.attrs.taxonomy.allowCustomValues() &&\n                !availableTerms.some(term => term.name().toLowerCase() === filter)\n            ) {\n                const validation = this.attrs.taxonomy.customValueValidation();\n                let regex: RegExp | null = null;\n\n                if (validation === 'alpha_num') {\n                    regex = /^[a-z0-9]$/i;\n                } else if (validation === 'alpha_dash') {\n                    regex = /^[a-z0-9_-]$/i;\n                } else if (validation.indexOf('/') === 0) {\n                    const parts = validation.split('/');\n                    if (parts.length === 3) {\n                        regex = new RegExp(parts[1], parts[2]);\n                    }\n                }\n\n                if (!regex || regex.test(this.searchFilter)) {\n                    availableTerms.push(app.store.createRecord('flamarkt-taxonomy-terms', {\n                        attributes: {\n                            name: this.searchFilter,\n                        },\n                    }));\n                }\n            }\n        }\n\n        if (this.attrs.taxonomy.maxTerms() && this.selectedTerms.length >= this.attrs.taxonomy.maxTerms()) {\n            availableTerms = [];\n        }\n\n        return availableTerms;\n    }\n\n    content() {\n        return [\n            this.viewForm(),\n            this.listAvailableTerms(this.filteredAvailableTerms()),\n        ];\n    }\n\n    viewForm() {\n        const description = this.attrs.taxonomy.description();\n\n        return m('.Modal-body', [\n            description ? m('p', description) : null,\n            m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n        ]);\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('input', m('.ChooseTaxonomyTermsModal-form-input', m('.TermsInput.FormControl', {\n            className: this.inputIsFocused ? 'focus' : '',\n        }, this.inputItems().toArray())), 20);\n\n        items.add('submit', m('.ChooseTaxonomyTermsModal-form-submit.App-primaryControl', Button.component({\n            type: 'submit',\n            className: 'Button Button--primary',\n            disabled: this.attrs.taxonomy.minTerms() && this.selectedTerms.length < this.attrs.taxonomy.minTerms(),\n            icon: 'fas fa-check',\n            loading: this.saving,\n        }, app.translator.trans('flamarkt-taxonomies.lib.modal.submit'))), 10);\n\n        return items;\n    }\n\n    inputItems() {\n        const items = new ItemList();\n\n        items.add('selected', this.selectedTerms.map(term => {\n            return m('span.TermsInput-term', {\n                onclick: () => {\n                    this.toggleTerm(term);\n                    this.onready();\n                },\n            }, termLabel(term));\n        }), 20);\n\n        items.add('control', m('input.FormControl', {\n            placeholder: extractText(this.getInstruction()),\n            value: this.searchFilter,\n            oninput: (event: Event) => {\n                this.searchFilter = (event.target as HTMLInputElement).value;\n                this.activeListIndex = 0;\n            },\n            onkeydown: this.navigator.navigate.bind(this.navigator),\n            // Use local methods so that other extensions can extend behaviour\n            onfocus: this.oninputfocus.bind(this),\n            onblur: this.oninputblur.bind(this),\n        }), 10);\n\n        return items;\n    }\n\n    oninputfocus() {\n        this.inputIsFocused = true;\n    }\n\n    oninputblur() {\n        this.inputIsFocused = false;\n    }\n\n    listAvailableTerms(terms: Term[]): Children {\n        return m('.Modal-footer', this.availableTerms === null ?\n            LoadingIndicator.component() :\n            m('ul.ChooseTaxonomyTermsModal-list.SelectTermList', {\n                className: terms.some(term => term.description()) ? 'SelectTermList--with-descriptions' : '',\n            }, terms.map(this.listAvailableTerm.bind(this)))\n        );\n    }\n\n    listAvailableTerm(term: Term, index: number) {\n        return m('li.SelectTermListItem', {\n            'data-index': index,\n            className: classList({\n                colored: !!term.color(),\n                selected: this.indexInSelectedTerms(term) !== -1,\n                active: this.activeListIndex === index,\n            }),\n            style: {color: term.color()},\n            onmouseover: () => this.activeListIndex = index,\n            onclick: this.toggleTerm.bind(this, term),\n        }, [\n            taxonomyIcon(term),\n            m('span.SelectTermListItem-name', term.exists ? highlight(term.name(), this.searchFilter) : app.translator.trans('flamarkt-taxonomies.lib.modal.custom', {\n                value: m('em', term.name()),\n            })),\n            term.description() ? m('span.SelectTermListItem-description', term.description()) : '',\n        ]);\n    }\n\n    toggleTerm(term: Term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.removeTerm(term);\n        } else {\n            this.addTerm(term);\n        }\n\n        if (this.searchFilter) {\n            this.searchFilter = '';\n            this.activeListIndex = 0;\n        }\n\n        // Defer re-focusing to next browser draw\n        setTimeout(() => {\n            this.onready();\n        });\n    }\n\n    select(e: KeyboardEvent) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case we don't want to submit just yet, but we will delete the text\n        // so that typing enter multiple times does end up submitting\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Ctrl + Enter submits the selection, just Enter completes the current entry\n        if (e.metaKey || e.ctrlKey || $element.is('.selected')) {\n            if (this.selectedTerms.length) {\n                // Calling .trigger() on the form with jQuery doesn't seem to trigger the onsubmit, so we'll just do that directly instead\n                this.onsubmit();\n            }\n        } else {\n            $element[0].dispatchEvent(new Event('click'));\n        }\n    }\n\n    getDomElement(index: number) {\n        return this.$(`.SelectTermListItem[data-index=\"${index}\"]`);\n    }\n\n    setIndex(index: number, scrollToItem: boolean) {\n        const $dropdown = this.$('.ChooseTaxonomyTermsModal-list');\n\n        const indexLength = this.$('.SelectTermListItem').length;\n\n        if (index < 0) {\n            index = indexLength - 1;\n        } else if (index >= indexLength) {\n            index = 0;\n        }\n\n        const $item = this.getDomElement(index);\n        this.activeListIndex = index;\n\n        m.redraw();\n\n        if (scrollToItem) {\n            const dropdownScroll = $dropdown.scrollTop() || 0;\n            const dropdownTop = $dropdown.offset()?.top || 0;\n            const dropdownBottom = dropdownTop + ($dropdown.outerHeight() || 0);\n            const itemTop = $item.offset()?.top || 0;\n            const itemBottom = itemTop + ($item.outerHeight() || 0);\n\n            let scrollTop;\n            if (itemTop < dropdownTop) {\n                scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n            } else if (itemBottom > dropdownBottom) {\n                scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n            }\n\n            if (typeof scrollTop !== 'undefined') {\n                $dropdown.stop(true).animate({scrollTop}, 100);\n            }\n        }\n    }\n\n    onsubmit(event?: Event) {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.attrs.resource) {\n            this.saveResource();\n\n            // Do not run the normal code - it might close the modal even if an error occurred\n            return;\n        }\n\n        if (this.attrs.onsubmit) this.attrs.onsubmit(this.selectedTerms);\n\n        app.modal.close();\n    }\n\n    saveResource() {\n        this.saving = true;\n\n        this.attrs.resource.save({\n            relationships: {\n                taxonomies: [\n                    {\n                        verbatim: true, // Flarum workaround, defined in flamarkt/core\n                        type: 'flamarkt-taxonomies',\n                        id: this.attrs.taxonomy.id(),\n                        relationships: {\n                            terms: {\n                                data: this.selectedTerms.map(termToIdentifier),\n                            },\n                        },\n                    },\n                ],\n            },\n        }).then(this.onsaved.bind(this), this.onerror.bind(this));\n    }\n\n    onsaved() {\n        // Need to check if DiscussionPage exists because in backoffice frontend the import will be undefined\n        if (DiscussionPage && app.current.matches(DiscussionPage)) {\n            app.current.get('stream').update();\n        }\n        this.saving = false;\n        m.redraw();\n\n        app.modal.close();\n    }\n\n    onerror() {\n        this.saving = false;\n        m.redraw();\n    }\n}\n","module.exports = flarum.core.compat['common/utils/extractText'];","module.exports = flarum.core.compat['common/utils/classList'];","import Model from 'flarum/common/Model';\nimport Taxonomy from './Taxonomy';\n\nexport default class Term extends Model {\n    name = Model.attribute('name');\n    slug = Model.attribute('slug');\n    description = Model.attribute('description');\n    color = Model.attribute('color');\n    icon = Model.attribute('icon');\n    order = Model.attribute('order');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n\n    taxonomy: () => Taxonomy | false = Model.hasOne('taxonomy');\n\n    protected apiEndpoint(): string {\n        return '/flamarkt/taxonomy-terms' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","import extract from 'flarum/common/utils/extract';\nimport Term from '../models/Term';\nimport taxonomyIcon from './taxonomyIcon';\nimport Taxonomy from '../models/Taxonomy';\nimport {Attributes} from 'mithril';\n\nexport default function termLabel(term: Taxonomy | Term | null = null, attrs: Attributes = {}) {\n    attrs.style = attrs.style || {};\n    attrs.className = 'TaxonomyLabel ' + (attrs.className || '');\n\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n    const tagText = term ? term.name() : app.translator.trans('flarum-tags.lib.deleted_tag_text');\n    let tag = 'span';\n\n    if (term) {\n        const color = term.color();\n        if (color) {\n            attrs.style.backgroundColor = attrs.style.color = color;\n            attrs.className += ' colored';\n        }\n\n        // We need to check for instanceof because this method is also used with a taxonomy passed as a value\n        if (term instanceof Term && term.taxonomy() && term.taxonomy().showFilter()) {\n            if (discussionLink) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('index', {[term.taxonomy().slug()]: term.slug()});\n                attrs.config = m.route;\n                tag = 'a';\n            }\n\n            // Only generate user taxonomy links if fof/user-directory is enabled\n            if (userLink && app.routes.fof_user_directory) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('fof_user_directory', {q: 'taxonomy:' + term.taxonomy().slug() + ':' + term.slug()});\n                attrs.config = m.route;\n                tag = 'a';\n            }\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return m(tag, attrs, m('span.TaxonomyLabel-text', [\n        term && term.icon() && taxonomyIcon(term, {}, {useColor: false}),\n        ' ' + tagText,\n    ]));\n}\n","module.exports = flarum.core.compat['common/helpers/icon'];","module.exports = flarum.core.compat['common/components/Modal'];","import Model from 'flarum/common/Model';\nimport Term from '../models/Term';\n\n/**\n * Prepares a model for a relationship payload\n * We need to keep the name value for custom terms\n */\nexport default function (term: Term) {\n    if (term.id()) {\n        return Model.getIdentifier(term);\n    }\n\n    return {\n        ...Model.getIdentifier(term),\n        attributes: {\n            name: term.name(),\n        },\n    }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","module.exports = flarum.core.compat['forum/components/DiscussionPage'];","module.exports = flarum.core.compat['common/utils/ItemList'];","module.exports = flarum.core.compat['common/components/LinkButton'];","module.exports = flarum.core.compat['common/Component'];","import Term from '../models/Term';\n\nexport default function (terms: Term[]): Term[] {\n    return terms.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['common/models/Discussion'];","module.exports = flarum.core.compat['common/models/Forum'];","module.exports = flarum.core.compat['common/models/User'];","module.exports = flarum.extensions['flamarkt-core']['common']['models/Product'];","module.exports = flarum.core.compat['common/helpers/highlight'];","import Model from 'flarum/common/Model';\n\nexport default class Taxonomy extends Model {\n    type = Model.attribute('type');\n    name = Model.attribute('name');\n    slug = Model.attribute('slug');\n    description = Model.attribute('description');\n    color = Model.attribute('color');\n    icon = Model.attribute('icon');\n    order = Model.attribute('order');\n    showLabel = Model.attribute('showLabel');\n    showFilter = Model.attribute('showFilter');\n    allowCustomValues = Model.attribute('allowCustomValues');\n    customValueValidation = Model.attribute('customValueValidation');\n    customValueSlugger = Model.attribute('customValueSlugger');\n    minTerms = Model.attribute('minTerms');\n    maxTerms = Model.attribute('maxTerms');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n    canSearch = Model.attribute('canSearch');\n\n    protected apiEndpoint(): string {\n        return '/flamarkt/taxonomies' + (this.exists ? '/' + this.data.id : '');\n    }\n\n    apiOrderEndpoint(): string {\n        return this.apiEndpoint() + '/terms/order';\n    }\n\n    apiTermsEndpoint(): string {\n        return this.apiEndpoint() + '/terms';\n    }\n}\n","import Discussion from 'flarum/common/models/Discussion';\nimport Forum from 'flarum/common/models/Forum';\nimport User from 'flarum/common/models/User';\nimport Model from 'flarum/common/Model';\nimport Product from 'flamarkt/core/common/models/Product';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\n\nexport default function () {\n    app.store.models['flamarkt-taxonomies'] = Taxonomy;\n    app.store.models['flamarkt-taxonomy-terms'] = Term;\n\n    Forum.prototype.taxonomies = Model.hasMany('taxonomies');\n    Discussion.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    User.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    Product.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n}\n","module.exports = flarum.core.compat['forum/components/DiscussionComposer'];","module.exports = flarum.core.compat['forum/components/UserPage'];","module.exports = flarum.core.compat['forum/utils/DiscussionControls'];","module.exports = flarum.core.compat['forum/components/IndexPage'];","module.exports = flarum.core.compat['forum/states/DiscussionListState'];","module.exports = flarum.core.compat['forum/states/GlobalSearchState'];","module.exports = flarum.core.compat['common/components/Dropdown'];","module.exports = flarum.core.compat['forum/components/DiscussionListItem'];","module.exports = flarum.core.compat['forum/components/DiscussionHero'];","module.exports = flarum.extensions['flamarkt-core']['forum']['layouts/ProductIndexLayout'];","module.exports = flarum.extensions['flamarkt-core']['forum']['pages/ProductIndexPage'];","module.exports = flarum.core.compat['forum/utils/UserControls'];","import extract from 'flarum/common/utils/extract';\nimport termLabel from './termLabel';\nimport sortTerms from '../utils/sortTerms';\nimport Term from '../models/Term';\nimport {Attributes, Vnode} from 'mithril';\n\nexport default function tagsLabel(terms: Term[], attrs: Attributes = {}) {\n    const children: Vnode[] = [];\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n\n    attrs.className = 'TaxonomiesLabel ' + (attrs.className || '');\n\n    if (terms) {\n        let taxonomy = extract(attrs, 'taxonomy');\n\n        if (!taxonomy) {\n            taxonomy = terms[0].taxonomy();\n        }\n\n        if (taxonomy) {\n            attrs['data-slug'] = taxonomy.slug();\n\n            if (taxonomy.showLabel()) {\n                children.push(termLabel(taxonomy, {\n                    className: 'TaxonomyParentLabel',\n                }));\n            }\n        }\n\n        sortTerms(terms).forEach(tag => {\n            if (tag || terms.length === 1) {\n                children.push(termLabel(tag, {discussionLink, userLink}));\n            }\n        });\n    } else {\n        children.push(termLabel());\n    }\n\n    return m('span', attrs, children);\n}\n","import {Vnode} from 'mithril';\nimport Component, {ComponentAttrs} from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport Dropdown from 'flarum/common/components/Dropdown';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Term from '../../common/models/Term';\nimport Taxonomy from '../../common/models/Taxonomy';\n\ninterface TaxonomyDropdownAttrs extends ComponentAttrs {\n    taxonomy: Taxonomy\n    onchange: (term: Term) => void\n    activeTermSlug?: string\n}\n\nexport default class TaxonomyDropdown extends Component<TaxonomyDropdownAttrs> {\n    termsInitialized: boolean = false;\n    terms: Term[] | null = null;\n\n    oninit(vnode: Vnode<TaxonomyDropdownAttrs>) {\n        super.oninit(vnode);\n\n        // If a term is active while the component inits, we're probably loading a page with pre-loaded filters\n        // We could retrieve the term from the store if it is present on discussion results\n        // But it's unreliable since a page with no results wouldn't have it but we want to show the term in the dropdown\n        if (this.attrs.activeTermSlug) {\n            this.loadTerms();\n        }\n    }\n\n    loadTerms() {\n        if (this.termsInitialized) {\n            return;\n        }\n\n        this.termsInitialized = true;\n\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.attrs.taxonomy.apiTermsEndpoint(),\n        }).then(result => {\n            this.terms = app.store.pushPayload(result) as Term[];\n\n            this.terms.forEach(term => {\n                term.pushData({\n                    relationships: {\n                        taxonomy: this.attrs.taxonomy,\n                    },\n                });\n            });\n\n            m.redraw();\n        });\n    }\n\n    view() {\n        let activeTerm = this.terms && this.terms.find(t => t.slug() === this.attrs.activeTermSlug);\n\n        return Dropdown.component({\n            buttonClassName: 'Button',\n            label: this.attrs.taxonomy.name() + (activeTerm ? ': ' + activeTerm.name() : ''),\n            onshow: () => {\n                this.loadTerms();\n            },\n        }, this.terms === null ? [\n            LoadingIndicator.component(),\n        ] : this.terms.map(term => {\n            const active = this.attrs.activeTermSlug === term.slug();\n\n            return Button.component({\n                icon: active ? 'fas fa-check' : true,\n                onclick: () => this.attrs.onchange(term),\n                active, // Remove after https://github.com/flarum/core/issues/2265\n            }, term.name());\n        }) as any);\n    }\n}\n","import Taxonomy from '../../common/models/Taxonomy';\n\nexport default function (type: string) {\n    return (t: Taxonomy) => t.type() === type && t.canSearch() && t.showFilter();\n}\n","import sortTaxonomies from '../utils/sortTaxonomies';\nimport termsLabel from './termsLabel';\nimport Term from '../models/Term';\nimport {Attributes} from 'mithril';\nimport Taxonomy from '../models/Taxonomy';\n\nexport default function (terms: Term[], attrs: Attributes = {}) {\n    const taxonomies: Taxonomy[] = [];\n\n    terms.forEach(term => {\n        const taxonomy = term.taxonomy();\n\n        if (taxonomies.indexOf(taxonomy) === -1) {\n            taxonomies.push(taxonomy);\n        }\n    });\n\n    return sortTaxonomies(taxonomies).map(taxonomy => {\n        return termsLabel(terms.filter(term => term.taxonomy() === taxonomy), attrs);\n    });\n}\n","import {Vnode} from 'mithril';\nimport UserPage from 'flarum/forum/components/UserPage';\nimport sortTaxonomies from '../../common/utils/sortTaxonomies';\nimport termsLabel from '../../common/helpers/termsLabel';\nimport Taxonomy from '../../common/models/Taxonomy';\nimport Term from '../../common/models/Term';\n\n// @ts-ignore UserPage.view not type-hinted\nexport default class UserTaxonomyPage extends UserPage {\n    oninit(vnode: Vnode<any, this>) {\n        super.oninit(vnode);\n\n        this.loadUser(m.route.param('username'));\n    }\n\n    content() {\n        const terms: Term[] = this.user.taxonomyTerms();\n\n        if (!terms || !terms.length) {\n            return null;\n        }\n\n        const taxonomies: Taxonomy[] = [];\n\n        terms.forEach(term => {\n            const taxonomy = term.taxonomy();\n\n            if (taxonomy && taxonomies.indexOf(taxonomy) === -1) {\n                taxonomies.push(taxonomy);\n            }\n        });\n\n        return sortTaxonomies(taxonomies).map(taxonomy => [\n            m('h2', taxonomy.name()),\n            termsLabel(terms.filter(term => term.taxonomy() === taxonomy), {userLink: true}),\n        ]);\n    }\n}\n","import addComposerControls from './addComposerControls';\nimport addDiscussionControls from './addDiscussionControls';\nimport addIndexFilters from './addIndexFilters';\nimport addLabels from './addLabels';\nimport addPages from './addPages';\nimport addProductFilters from './addProductFilters';\nimport addUserControls from './addUserControls';\nimport addModels from '../common/addModels';\nimport addUserDirectorySearchType from './addUserDirectorySearchType';\n\napp.initializers.add('flamarkt-taxonomies', () => {\n    addComposerControls();\n    addDiscussionControls();\n    addIndexFilters();\n    addLabels();\n    addPages();\n    addProductFilters();\n    addUserControls();\n    addModels();\n    addUserDirectorySearchType();\n});\n","import {extend, override} from 'flarum/common/extend';\nimport DiscussionComposer from 'flarum/forum/components/DiscussionComposer';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport icon from 'flarum/common/helpers/icon';\nimport ChooseTaxonomyTermsModal from '../common/components/ChooseTaxonomyTermsModal';\nimport termsLabel from '../common/helpers/termsLabel';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport termToIdentifier from '../common/utils/termToIdentifier';\nimport Term from '../common/models/Term';\n\nexport default function () {\n    extend(DiscussionComposer.prototype, 'oninit', function (this: DiscussionComposer) {\n        this.selectedTaxonomyTerms = {};\n    });\n\n    extend(DiscussionComposer.prototype, 'headerItems', function (this: DiscussionComposer, items: ItemList) {\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'discussions') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), m('a.DiscussionComposer-changeTaxonomies', {\n                    onclick: () => {\n                        app.modal.show(ChooseTaxonomyTermsModal, {\n                            taxonomy,\n                            selectedTerms: (this.selectedTaxonomyTerms[taxonomy.id()] || []).slice(0),\n                            onsubmit: (terms: Term[]) => {\n                                this.selectedTaxonomyTerms[taxonomy.id()] = terms;\n                                this.$('textarea').trigger('focus');\n                            },\n                        });\n                    },\n                }, this.selectedTaxonomyTerms[taxonomy.id()] && this.selectedTaxonomyTerms[taxonomy.id()].length\n                ? termsLabel(this.selectedTaxonomyTerms[taxonomy.id()], {\n                    taxonomy,\n                })\n                : m('span.TaxonomyLabel.untagged', [\n                    taxonomy.icon() ? [icon(taxonomy.icon()), ' '] : null,\n                    app.translator.trans('flamarkt-taxonomies.forum.composer.choose', {\n                        taxonomy: taxonomy.name(),\n                    }),\n                ])\n            ), 9); // Tags uses 10, we add ours right to the tagson the right of the tags\n        });\n    });\n\n    override(DiscussionComposer.prototype, 'onsubmit', function (this: DiscussionComposer, original: any) {\n        // Zero timeout to change the execution thread and let the modal close in TagDiscussionModal / ChooseTaxonomyTermsModal\n        // before we try opening another one\n        const callbacks: ((resolve: () => void) => void)[] = [];\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'discussions') {\n                return;\n            }\n\n            const count = (this.selectedTaxonomyTerms[taxonomy.id()] || []).length;\n\n            if (taxonomy.minTerms() && count < taxonomy.minTerms()) {\n                callbacks.push(resolve => {\n                    app.modal.show(ChooseTaxonomyTermsModal, {\n                        taxonomy,\n                        selectedTags: (this.selectedTaxonomyTerms[taxonomy.id()] || []).slice(0),\n                        onsubmit: (terms: Term[]) => {\n                            this.selectedTaxonomyTerms[taxonomy.id()] = terms;\n                            resolve();\n                        },\n                    });\n                });\n            }\n        });\n\n        if (callbacks.length) {\n            const callNextCallback = () => {\n                if (!callbacks.length) {\n                    original();\n\n                    return;\n                }\n\n                new Promise(callbacks.shift() as any).then(() => {\n                    // We give time for the modal to close before opening another one\n                    // Opening a different modal without closing the first one is very difficult because app.modal.show\n                    // Would have to be called in the same thread that just called app.modal.close and it's very difficult\n                    // We also apply that delay after our last modal in case Tags' modal shows up after ours\n                    setTimeout(() => {\n                        callNextCallback();\n                    }, 400); // 300ms is bootstrap's default Modal.TRANSITION_DURATION and we add a bit of delay\n                });\n            }\n\n            if (app.modal.modal) {\n                // In case Tags' modal is currently visible (their override ran before ours) we wait for it to close\n                // We have no other option because our override is called from TagDiscussionModal.props.onsubmit\n                // at which point app.modal.close has not been called yet\n                setTimeout(() => {\n                    callNextCallback();\n                }, 400);\n            } else {\n                callNextCallback();\n            }\n        } else {\n            original();\n        }\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (this: DiscussionComposer, data: any) {\n        const taxonomyData: any[] = [];\n\n        // We put all term IDs from all taxonomies together for the request\n        (app.forum.taxonomies() || []).forEach(taxonomy => {\n            if (taxonomy.type() !== 'discussions') {\n                return;\n            }\n\n            if (this.selectedTaxonomyTerms[taxonomy.id()] && this.selectedTaxonomyTerms[taxonomy.id()].length) {\n                taxonomyData.push({\n                    verbatim: true, // Flarum workaround, defined in flamarkt/core\n                    type: 'flamarkt-taxonomies',\n                    id: taxonomy.id(),\n                    relationships: {\n                        terms: {\n                            data: this.selectedTaxonomyTerms[taxonomy.id()].map(termToIdentifier),\n                        },\n                    },\n                });\n            }\n        });\n\n        data.relationships = data.relationships || {};\n        data.relationships.taxonomies = taxonomyData;\n    });\n}\n","import {extend} from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Button from 'flarum/common/components/Button';\nimport ChooseTaxonomyTermsModal from '../common/components/ChooseTaxonomyTermsModal';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items: ItemList, discussion: Discussion) {\n        if (!discussion.attribute('canEditTaxonomies')) {\n            return;\n        }\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'discussions') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), Button.component({\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(ChooseTaxonomyTermsModal, {\n                    resource: discussion,\n                    taxonomy,\n                }),\n            }, app.translator.trans('flamarkt-taxonomies.forum.discussion.edit', {\n                taxonomy: taxonomy.name(),\n            })));\n        });\n    });\n}\n","import {extend} from 'flarum/common/extend';\nimport IndexPage from 'flarum/forum/components/IndexPage';\nimport DiscussionListState from 'flarum/forum/states/DiscussionListState';\nimport GlobalSearchState from 'flarum/forum/states/GlobalSearchState';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport TaxonomyDropdown from './components/TaxonomyDropdown';\nimport Term from '../common/models/Term';\nimport showsFilterFor from './utils/showsFilterFor';\n\nexport default function () {\n    extend(IndexPage.prototype, 'viewItems', function (this: IndexPage, items: ItemList) {\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('discussions')).forEach(taxonomy => {\n            items.add('taxonomy-' + taxonomy.slug(), TaxonomyDropdown.component({\n                taxonomy,\n                activeTermSlug: app.search.params()[taxonomy.slug()],\n                onchange: (term: Term) => {\n                    const params = app.search.params();\n\n                    const currentFilterForTaxonomy = params[taxonomy.slug()];\n\n                    if (term.slug() === currentFilterForTaxonomy) {\n                        delete params[taxonomy.slug()];\n                    } else {\n                        params[taxonomy.slug()] = term.slug();\n                    }\n\n                    // @ts-ignore Flarum injects routeName as a page attr but this isn't type-hinted anywhere\n                    const {routeName} = this.attrs;\n\n                    m.route.set(app.route(routeName, params));\n                },\n            }));\n        });\n    });\n\n    extend(GlobalSearchState.prototype, 'stickyParams', function (params: any) {\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('discussions')).forEach(taxonomy => {\n            params[taxonomy.slug()] = m.route.param(taxonomy.slug());\n        });\n    });\n\n    extend(DiscussionListState.prototype, 'requestParams', function (this: DiscussionListState, params: any) {\n        // Include the taxonomies when navigating to the discussion list\n        // Same includes are pre-loaded in DiscussionAttributes.php\n        params.include.push('taxonomyTerms', 'taxonomyTerms.taxonomy');\n\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('discussions')).forEach(taxonomy => {\n            const filterTermSlug = this.params[taxonomy.slug()];\n\n            if (filterTermSlug) {\n                params.filter.q = (params.filter.q || '') + ' taxonomy:' + taxonomy.slug() + ':' + filterTermSlug;\n\n                //TODO: switch between gambits and filters\n                //params.filter[taxonomy.slug()] = filterTermSlug;\n            }\n        });\n    });\n}\n","import {extend} from 'flarum/common/extend';\nimport DiscussionListItem from 'flarum/forum/components/DiscussionListItem';\nimport DiscussionHero from 'flarum/forum/components/DiscussionHero';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport labelsFromMultipleTaxonomiesList from '../common/helpers/labelsFromMultipleTaxonomiesList';\n\nexport default function () {\n    extend(DiscussionListItem.prototype, 'infoItems', function (this: DiscussionListItem, items: ItemList) {\n        const terms = this.attrs.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', labelsFromMultipleTaxonomiesList(terms), 10);\n        }\n    });\n\n    extend(DiscussionHero.prototype, 'items', function (this: DiscussionHero, items: ItemList) {\n        const terms = this.attrs.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', labelsFromMultipleTaxonomiesList(terms, {discussionLink: true}), 5);\n        }\n    });\n}\n","import UserTaxonomyPage from './components/UserTaxonomyPage';\n\nexport default function () {\n    app.routes.flamarktTaxonomiesUser = {\n        path: '/u/:username/taxonomies',\n        component: UserTaxonomyPage,\n    };\n\n    app.route.flamarktTaxonomiesUser = user => {\n        return app.route('flamarktTaxonomiesUser', {\n            username: user.username(),\n        });\n    };\n}\n","import {extend} from 'flarum/common/extend';\nimport ProductIndexLayout from 'flamarkt/core/forum/layouts/ProductIndexLayout';\nimport ProductIndexPage from 'flamarkt/core/forum/pages/ProductIndexPage';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport TaxonomyDropdown from './components/TaxonomyDropdown';\nimport Term from '../common/models/Term';\nimport showsFilterFor from './utils/showsFilterFor';\n\nexport default function () {\n    extend(ProductIndexLayout.prototype, 'filters', function (this: ProductIndexLayout, items: ItemList) {\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('products')).forEach(taxonomy => {\n            items.add('taxonomy-' + taxonomy.slug(), TaxonomyDropdown.component({\n                taxonomy,\n                activeTermSlug: m.route.param()[taxonomy.slug()],\n                onchange: (term: Term) => {\n                    const params = {...m.route.param()};\n\n                    delete params.key;\n\n                    const currentFilterForTaxonomy = params[taxonomy.slug()];\n\n                    if (term.slug() === currentFilterForTaxonomy) {\n                        delete params[taxonomy.slug()];\n                    } else {\n                        params[taxonomy.slug()] = term.slug();\n                    }\n\n                    // @ts-ignore\n                    const {routeName} = app.current.data;\n\n                    //TODO: also apply to the filters. Right now it's just the URL that changes\n                    m.route.set(app.route(routeName, params));\n                },\n            }));\n        });\n    });\n\n    extend(ProductIndexPage.prototype, 'initState', function (state) {\n        const params = m.route.param();\n\n        sortTaxonomies(app.store.all('flamarkt-taxonomies')).filter(showsFilterFor('products')).forEach(taxonomy => {\n            const filterTermSlug = params[taxonomy.slug()];\n\n            if (filterTermSlug) {\n                // Same implementation as addIndexFilters()\n                state.params.q = (state.params.q || '') + ' taxonomy:' + taxonomy.slug() + ':' + filterTermSlug;\n            }\n        });\n    });\n}\n","import {extend} from 'flarum/common/extend';\nimport UserControls from 'flarum/forum/utils/UserControls';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport User from 'flarum/common/models/User';\nimport Button from 'flarum/common/components/Button';\nimport UserPage from 'flarum/forum/components/UserPage';\nimport LinkButton from 'flarum/common/components/LinkButton';\nimport ChooseTaxonomyTermsModal from '../common/components/ChooseTaxonomyTermsModal';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\n\nexport default function () {\n    extend(UserControls, 'userControls', function (items: ItemList, user: User) {\n        if (!user.attribute('canEditTaxonomies')) {\n            return;\n        }\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'users') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), Button.component({\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(ChooseTaxonomyTermsModal, {\n                    resource: user,\n                    taxonomy,\n                }),\n            }, app.translator.trans('flamarkt-taxonomies.forum.user.edit', {\n                taxonomy: taxonomy.name(),\n            })));\n        });\n    });\n\n    extend(UserPage.prototype, 'navItems', function (this: UserPage, items: ItemList) {\n        const userTaxonomiesExist = sortTaxonomies(app.forum.taxonomies()).some(taxonomy => {\n            return taxonomy.type() === 'users';\n        });\n\n        if (!userTaxonomiesExist) {\n            return;\n        }\n\n        items.add(\n            'taxonomies',\n            LinkButton.component({\n                href: app.route.flamarktTaxonomiesUser(this.user),\n                icon: 'fas fa-tags',\n            }, app.translator.trans('flamarkt-taxonomies.forum.user.nav')),\n            120\n        );\n    });\n}\n","import {extend} from 'flarum/common/extend';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Term from '../common/models/Term';\nimport showsFilterFor from './utils/showsFilterFor';\n\nexport default function () {\n    // Verify User Directory is enabled and exports all the classes we need\n    if (\n        !flarum.extensions['fof-user-directory'] ||\n        !flarum.extensions['fof-user-directory'].searchTypes ||\n        !flarum.extensions['fof-user-directory'].searchTypes.AbstractType ||\n        !flarum.extensions['fof-user-directory'].components ||\n        !flarum.extensions['fof-user-directory'].components.SearchField\n    ) {\n        return;\n    }\n\n    // Class must be defined here because it needs to extend the base class\n    // Which might not be available yet when imports are resolved\n    class TaxonomyTermType extends flarum.extensions['fof-user-directory'].searchTypes.AbstractType {\n        allTerms: Term[] | null = null\n        loadingAllTermsPromise: Promise<void> | null = null\n        loading: boolean = false\n        suggestions: Term[] = []\n\n        resourceType() {\n            return 'flamarkt-taxonomy-terms';\n        }\n\n        search(query: string) {\n            this.loading = true;\n\n            this.loadTerms().then(() => {\n                this.loading = false;\n                this.suggestions = [];\n\n                if (!query) {\n                    m.redraw();\n\n                    return;\n                }\n\n                query = query.toLowerCase();\n\n                this.allTerms.forEach(term => {\n                    if (term.name().toLowerCase().indexOf(query) !== -1) {\n                        this.suggestions.push(term);\n                    }\n                });\n\n                m.redraw();\n            });\n        }\n\n        loadTerms() {\n            if (this.loadingAllTermsPromise) {\n                return this.loadingAllTermsPromise;\n            }\n\n            if (this.allTerms !== null) {\n                return Promise.resolve(null);\n            }\n\n            this.allTerms = [];\n\n            const promises: Promise<void>[] = [];\n\n            app.store.all('flamarkt-taxonomies').filter(showsFilterFor('users')).forEach(taxonomy => {\n                promises.push(app.request({\n                    method: 'GET',\n                    url: app.forum.attribute('apiUrl') + taxonomy.apiEndpoint() + '/terms',\n                }).then(result => {\n                    const terms = app.store.pushPayload(result);\n\n                    terms.forEach((term: Term) => {\n                        term.pushData({\n                            relationships: {\n                                taxonomy,\n                            },\n                        });\n                    });\n\n                    this.allTerms.push(...terms);\n                }));\n            });\n\n            this.loadingAllTermsPromise = Promise.all(promises);\n\n            return this.loadingAllTermsPromise.then(() => {\n                this.loadingAllTermsPromise = null;\n            });\n        }\n\n        renderKind(term: Term) {\n            return term.taxonomy().name();\n        }\n\n        renderLabel(term: Term) {\n            return m('.UserDirectorySearchLabel', term.color() ? {\n                className: 'colored',\n                style: {\n                    backgroundColor: term.color(),\n                },\n            } : {}, [\n                term.icon() ? [\n                    icon(term.icon()),\n                    ' ',\n                ] : null,\n                term.name(),\n            ]);\n        }\n\n        applyFilter(params: any, resource: any) {\n            params.q = params.q ? params.q + ' ' : '';\n            params.q += 'taxonomy:' + resource.taxonomy().slug() + ':' + resource.slug();\n        }\n\n        initializeFromParams(params) {\n            if (!params.q) {\n                return Promise.resolve([]);\n            }\n\n            const gambits: string[] = params.q.split(' ').filter(word => word.indexOf('taxonomy:') === 0);\n\n            if (!gambits.length) {\n                return Promise.resolve([]);\n            }\n\n            return this.loadTerms().then(() => {\n                const terms: Term[] = [];\n\n                gambits.forEach(gambit => {\n                    const parts = gambit.split(':');\n\n                    if (parts.length < 3) {\n                        return;\n                    }\n\n                    const term = this.allTerms.find(t => t.slug() === parts[2] && t.taxonomy().slug() === parts[1]);\n\n                    if (term) {\n                        terms.push(term);\n                    }\n                });\n\n                return terms;\n            });\n        }\n    }\n\n    extend(flarum.extensions['fof-user-directory'].components.SearchField.prototype, 'filterTypes', function (items: ItemList) {\n        items.add('flamarkt-taxonomies', new TaxonomyTermType(), 15);\n    });\n}\n"],"sourceRoot":""}